
Ketron.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000020a  00800100  00006f50  00006fe4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006f50  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001cf  0080030a  0080030a  000071ee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000071ee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007220  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000868  00000000  00000000  00007260  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001788c  00000000  00000000  00007ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003ab1  00000000  00000000  0001f354  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006ab8  00000000  00000000  00022e05  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001fc8  00000000  00000000  000298c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00006f25  00000000  00000000  0002b888  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000e6a8  00000000  00000000  000327ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000980  00000000  00000000  00040e55  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3f 18 	jmp	0x307e	; 0x307e <__dtors_end>
       4:	0c 94 67 18 	jmp	0x30ce	; 0x30ce <__bad_interrupt>
       8:	0c 94 67 18 	jmp	0x30ce	; 0x30ce <__bad_interrupt>
       c:	0c 94 67 18 	jmp	0x30ce	; 0x30ce <__bad_interrupt>
      10:	0c 94 67 18 	jmp	0x30ce	; 0x30ce <__bad_interrupt>
      14:	0c 94 67 18 	jmp	0x30ce	; 0x30ce <__bad_interrupt>
      18:	0c 94 67 18 	jmp	0x30ce	; 0x30ce <__bad_interrupt>
      1c:	0c 94 67 18 	jmp	0x30ce	; 0x30ce <__bad_interrupt>
      20:	0c 94 67 18 	jmp	0x30ce	; 0x30ce <__bad_interrupt>
      24:	0c 94 67 18 	jmp	0x30ce	; 0x30ce <__bad_interrupt>
      28:	0c 94 67 18 	jmp	0x30ce	; 0x30ce <__bad_interrupt>
      2c:	0c 94 67 18 	jmp	0x30ce	; 0x30ce <__bad_interrupt>
      30:	0c 94 67 18 	jmp	0x30ce	; 0x30ce <__bad_interrupt>
      34:	0c 94 67 18 	jmp	0x30ce	; 0x30ce <__bad_interrupt>
      38:	0c 94 67 18 	jmp	0x30ce	; 0x30ce <__bad_interrupt>
      3c:	0c 94 67 18 	jmp	0x30ce	; 0x30ce <__bad_interrupt>
      40:	0c 94 55 35 	jmp	0x6aaa	; 0x6aaa <__vector_16>
      44:	0c 94 67 18 	jmp	0x30ce	; 0x30ce <__bad_interrupt>
      48:	0c 94 8f 34 	jmp	0x691e	; 0x691e <__vector_18>
      4c:	0c 94 c1 34 	jmp	0x6982	; 0x6982 <__vector_19>
      50:	0c 94 67 18 	jmp	0x30ce	; 0x30ce <__bad_interrupt>
      54:	0c 94 67 18 	jmp	0x30ce	; 0x30ce <__bad_interrupt>
      58:	0c 94 67 18 	jmp	0x30ce	; 0x30ce <__bad_interrupt>
      5c:	0c 94 67 18 	jmp	0x30ce	; 0x30ce <__bad_interrupt>
      60:	0c 94 67 18 	jmp	0x30ce	; 0x30ce <__bad_interrupt>
      64:	0c 94 67 18 	jmp	0x30ce	; 0x30ce <__bad_interrupt>
      68:	45 27       	eor	r20, r21
      6a:	52 27       	eor	r21, r18
      6c:	52 27       	eor	r21, r18
      6e:	52 27       	eor	r21, r18
      70:	52 27       	eor	r21, r18
      72:	52 27       	eor	r21, r18
      74:	52 27       	eor	r21, r18
      76:	52 27       	eor	r21, r18
      78:	52 27       	eor	r21, r18
      7a:	52 27       	eor	r21, r18
      7c:	52 27       	eor	r21, r18
      7e:	52 27       	eor	r21, r18
      80:	52 27       	eor	r21, r18
      82:	52 27       	eor	r21, r18
      84:	52 27       	eor	r21, r18
      86:	52 27       	eor	r21, r18
      88:	45 27       	eor	r20, r21
      8a:	52 27       	eor	r21, r18
      8c:	52 27       	eor	r21, r18
      8e:	52 27       	eor	r21, r18
      90:	52 27       	eor	r21, r18
      92:	52 27       	eor	r21, r18
      94:	52 27       	eor	r21, r18
      96:	52 27       	eor	r21, r18
      98:	52 27       	eor	r21, r18
      9a:	52 27       	eor	r21, r18
      9c:	52 27       	eor	r21, r18
      9e:	52 27       	eor	r21, r18
      a0:	52 27       	eor	r21, r18
      a2:	52 27       	eor	r21, r18
      a4:	52 27       	eor	r21, r18
      a6:	52 27       	eor	r21, r18
      a8:	45 27       	eor	r20, r21
      aa:	52 27       	eor	r21, r18
      ac:	52 27       	eor	r21, r18
      ae:	52 27       	eor	r21, r18
      b0:	52 27       	eor	r21, r18
      b2:	52 27       	eor	r21, r18
      b4:	52 27       	eor	r21, r18
      b6:	52 27       	eor	r21, r18
      b8:	52 27       	eor	r21, r18
      ba:	52 27       	eor	r21, r18
      bc:	52 27       	eor	r21, r18
      be:	52 27       	eor	r21, r18
      c0:	52 27       	eor	r21, r18
      c2:	52 27       	eor	r21, r18
      c4:	52 27       	eor	r21, r18
      c6:	52 27       	eor	r21, r18
      c8:	45 27       	eor	r20, r21
      ca:	52 27       	eor	r21, r18
      cc:	52 27       	eor	r21, r18
      ce:	52 27       	eor	r21, r18
      d0:	52 27       	eor	r21, r18
      d2:	52 27       	eor	r21, r18
      d4:	52 27       	eor	r21, r18
      d6:	52 27       	eor	r21, r18
      d8:	52 27       	eor	r21, r18
      da:	52 27       	eor	r21, r18
      dc:	52 27       	eor	r21, r18
      de:	52 27       	eor	r21, r18
      e0:	52 27       	eor	r21, r18
      e2:	52 27       	eor	r21, r18
      e4:	52 27       	eor	r21, r18
      e6:	52 27       	eor	r21, r18
      e8:	40 27       	eor	r20, r16
      ea:	52 27       	eor	r21, r18
      ec:	52 27       	eor	r21, r18
      ee:	52 27       	eor	r21, r18
      f0:	52 27       	eor	r21, r18
      f2:	52 27       	eor	r21, r18
      f4:	52 27       	eor	r21, r18
      f6:	52 27       	eor	r21, r18
      f8:	52 27       	eor	r21, r18
      fa:	52 27       	eor	r21, r18
      fc:	52 27       	eor	r21, r18
      fe:	52 27       	eor	r21, r18
     100:	52 27       	eor	r21, r18
     102:	52 27       	eor	r21, r18
     104:	52 27       	eor	r21, r18
     106:	52 27       	eor	r21, r18
     108:	40 27       	eor	r20, r16
     10a:	52 27       	eor	r21, r18
     10c:	52 27       	eor	r21, r18
     10e:	52 27       	eor	r21, r18
     110:	52 27       	eor	r21, r18
     112:	52 27       	eor	r21, r18
     114:	52 27       	eor	r21, r18
     116:	52 27       	eor	r21, r18
     118:	52 27       	eor	r21, r18
     11a:	52 27       	eor	r21, r18
     11c:	52 27       	eor	r21, r18
     11e:	52 27       	eor	r21, r18
     120:	52 27       	eor	r21, r18
     122:	52 27       	eor	r21, r18
     124:	52 27       	eor	r21, r18
     126:	52 27       	eor	r21, r18
     128:	45 27       	eor	r20, r21
     12a:	52 27       	eor	r21, r18
     12c:	52 27       	eor	r21, r18
     12e:	52 27       	eor	r21, r18
     130:	52 27       	eor	r21, r18
     132:	52 27       	eor	r21, r18
     134:	52 27       	eor	r21, r18
     136:	52 27       	eor	r21, r18
     138:	52 27       	eor	r21, r18
     13a:	52 27       	eor	r21, r18
     13c:	52 27       	eor	r21, r18
     13e:	52 27       	eor	r21, r18
     140:	52 27       	eor	r21, r18
     142:	52 27       	eor	r21, r18
     144:	52 27       	eor	r21, r18
     146:	52 27       	eor	r21, r18
     148:	4a 27       	eor	r20, r26
     14a:	40 27       	eor	r20, r16
     14c:	45 27       	eor	r20, r21
     14e:	40 27       	eor	r20, r16
     150:	52 27       	eor	r21, r18
     152:	52 27       	eor	r21, r18
     154:	32 27       	eor	r19, r18
     156:	52 27       	eor	r21, r18
     158:	32 27       	eor	r19, r18
     15a:	52 27       	eor	r21, r18
     15c:	32 27       	eor	r19, r18
     15e:	32 27       	eor	r19, r18
     160:	32 27       	eor	r19, r18
     162:	52 27       	eor	r21, r18
     164:	32 27       	eor	r19, r18
     166:	32 27       	eor	r19, r18
     168:	45 27       	eor	r20, r21
     16a:	52 27       	eor	r21, r18
     16c:	52 27       	eor	r21, r18
     16e:	52 27       	eor	r21, r18
     170:	52 27       	eor	r21, r18
     172:	52 27       	eor	r21, r18
     174:	52 27       	eor	r21, r18
     176:	52 27       	eor	r21, r18
     178:	52 27       	eor	r21, r18
     17a:	52 27       	eor	r21, r18
     17c:	52 27       	eor	r21, r18
     17e:	52 27       	eor	r21, r18
     180:	52 27       	eor	r21, r18
     182:	52 27       	eor	r21, r18
     184:	52 27       	eor	r21, r18
     186:	52 27       	eor	r21, r18
     188:	45 27       	eor	r20, r21
     18a:	52 27       	eor	r21, r18
     18c:	52 27       	eor	r21, r18
     18e:	52 27       	eor	r21, r18
     190:	52 27       	eor	r21, r18
     192:	52 27       	eor	r21, r18
     194:	52 27       	eor	r21, r18
     196:	52 27       	eor	r21, r18
     198:	52 27       	eor	r21, r18
     19a:	52 27       	eor	r21, r18
     19c:	52 27       	eor	r21, r18
     19e:	52 27       	eor	r21, r18
     1a0:	52 27       	eor	r21, r18
     1a2:	52 27       	eor	r21, r18
     1a4:	52 27       	eor	r21, r18
     1a6:	52 27       	eor	r21, r18
     1a8:	45 27       	eor	r20, r21
     1aa:	52 27       	eor	r21, r18
     1ac:	52 27       	eor	r21, r18
     1ae:	52 27       	eor	r21, r18
     1b0:	52 27       	eor	r21, r18
     1b2:	52 27       	eor	r21, r18
     1b4:	52 27       	eor	r21, r18
     1b6:	52 27       	eor	r21, r18
     1b8:	52 27       	eor	r21, r18
     1ba:	52 27       	eor	r21, r18
     1bc:	52 27       	eor	r21, r18
     1be:	52 27       	eor	r21, r18
     1c0:	52 27       	eor	r21, r18
     1c2:	52 27       	eor	r21, r18
     1c4:	52 27       	eor	r21, r18
     1c6:	52 27       	eor	r21, r18
     1c8:	45 27       	eor	r20, r21
     1ca:	52 27       	eor	r21, r18
     1cc:	52 27       	eor	r21, r18
     1ce:	52 27       	eor	r21, r18
     1d0:	52 27       	eor	r21, r18
     1d2:	52 27       	eor	r21, r18
     1d4:	52 27       	eor	r21, r18
     1d6:	52 27       	eor	r21, r18
     1d8:	52 27       	eor	r21, r18
     1da:	52 27       	eor	r21, r18
     1dc:	52 27       	eor	r21, r18
     1de:	52 27       	eor	r21, r18
     1e0:	52 27       	eor	r21, r18
     1e2:	52 27       	eor	r21, r18
     1e4:	52 27       	eor	r21, r18
     1e6:	52 27       	eor	r21, r18
     1e8:	40 27       	eor	r20, r16
     1ea:	52 27       	eor	r21, r18
     1ec:	52 27       	eor	r21, r18
     1ee:	52 27       	eor	r21, r18
     1f0:	52 27       	eor	r21, r18
     1f2:	52 27       	eor	r21, r18
     1f4:	52 27       	eor	r21, r18
     1f6:	52 27       	eor	r21, r18
     1f8:	52 27       	eor	r21, r18
     1fa:	52 27       	eor	r21, r18
     1fc:	52 27       	eor	r21, r18
     1fe:	52 27       	eor	r21, r18
     200:	52 27       	eor	r21, r18
     202:	52 27       	eor	r21, r18
     204:	52 27       	eor	r21, r18
     206:	52 27       	eor	r21, r18
     208:	40 27       	eor	r20, r16
     20a:	52 27       	eor	r21, r18
     20c:	52 27       	eor	r21, r18
     20e:	52 27       	eor	r21, r18
     210:	52 27       	eor	r21, r18
     212:	52 27       	eor	r21, r18
     214:	52 27       	eor	r21, r18
     216:	52 27       	eor	r21, r18
     218:	52 27       	eor	r21, r18
     21a:	52 27       	eor	r21, r18
     21c:	52 27       	eor	r21, r18
     21e:	52 27       	eor	r21, r18
     220:	52 27       	eor	r21, r18
     222:	52 27       	eor	r21, r18
     224:	52 27       	eor	r21, r18
     226:	52 27       	eor	r21, r18
     228:	45 27       	eor	r20, r21
     22a:	52 27       	eor	r21, r18
     22c:	52 27       	eor	r21, r18
     22e:	52 27       	eor	r21, r18
     230:	52 27       	eor	r21, r18
     232:	52 27       	eor	r21, r18
     234:	52 27       	eor	r21, r18
     236:	52 27       	eor	r21, r18
     238:	52 27       	eor	r21, r18
     23a:	52 27       	eor	r21, r18
     23c:	52 27       	eor	r21, r18
     23e:	52 27       	eor	r21, r18
     240:	52 27       	eor	r21, r18
     242:	52 27       	eor	r21, r18
     244:	52 27       	eor	r21, r18
     246:	52 27       	eor	r21, r18
     248:	4a 27       	eor	r20, r26
     24a:	40 27       	eor	r20, r16
     24c:	45 27       	eor	r20, r21
     24e:	40 27       	eor	r20, r16
     250:	52 27       	eor	r21, r18
     252:	52 27       	eor	r21, r18
     254:	31 27       	eor	r19, r17
     256:	52 27       	eor	r21, r18
     258:	31 27       	eor	r19, r17
     25a:	52 27       	eor	r21, r18
     25c:	31 27       	eor	r19, r17
     25e:	31 27       	eor	r19, r17
     260:	31 27       	eor	r19, r17
     262:	52 27       	eor	r21, r18
     264:	31 27       	eor	r19, r17
     266:	31 27       	eor	r19, r17
     268:	61 28       	or	r6, r1
     26a:	57 29       	or	r21, r7
     26c:	57 29       	or	r21, r7
     26e:	57 29       	or	r21, r7
     270:	57 29       	or	r21, r7
     272:	57 29       	or	r21, r7
     274:	57 29       	or	r21, r7
     276:	57 29       	or	r21, r7
     278:	57 29       	or	r21, r7
     27a:	57 29       	or	r21, r7
     27c:	57 29       	or	r21, r7
     27e:	57 29       	or	r21, r7
     280:	57 29       	or	r21, r7
     282:	57 29       	or	r21, r7
     284:	57 29       	or	r21, r7
     286:	57 29       	or	r21, r7
     288:	71 28       	or	r7, r1
     28a:	57 29       	or	r21, r7
     28c:	57 29       	or	r21, r7
     28e:	57 29       	or	r21, r7
     290:	57 29       	or	r21, r7
     292:	57 29       	or	r21, r7
     294:	57 29       	or	r21, r7
     296:	57 29       	or	r21, r7
     298:	57 29       	or	r21, r7
     29a:	57 29       	or	r21, r7
     29c:	57 29       	or	r21, r7
     29e:	57 29       	or	r21, r7
     2a0:	57 29       	or	r21, r7
     2a2:	57 29       	or	r21, r7
     2a4:	57 29       	or	r21, r7
     2a6:	57 29       	or	r21, r7
     2a8:	d9 28       	or	r13, r9
     2aa:	57 29       	or	r21, r7
     2ac:	57 29       	or	r21, r7
     2ae:	57 29       	or	r21, r7
     2b0:	57 29       	or	r21, r7
     2b2:	57 29       	or	r21, r7
     2b4:	57 29       	or	r21, r7
     2b6:	57 29       	or	r21, r7
     2b8:	57 29       	or	r21, r7
     2ba:	57 29       	or	r21, r7
     2bc:	57 29       	or	r21, r7
     2be:	57 29       	or	r21, r7
     2c0:	57 29       	or	r21, r7
     2c2:	57 29       	or	r21, r7
     2c4:	57 29       	or	r21, r7
     2c6:	57 29       	or	r21, r7
     2c8:	af 28       	or	r10, r15
     2ca:	57 29       	or	r21, r7
     2cc:	57 29       	or	r21, r7
     2ce:	57 29       	or	r21, r7
     2d0:	57 29       	or	r21, r7
     2d2:	57 29       	or	r21, r7
     2d4:	57 29       	or	r21, r7
     2d6:	57 29       	or	r21, r7
     2d8:	57 29       	or	r21, r7
     2da:	57 29       	or	r21, r7
     2dc:	57 29       	or	r21, r7
     2de:	57 29       	or	r21, r7
     2e0:	57 29       	or	r21, r7
     2e2:	57 29       	or	r21, r7
     2e4:	57 29       	or	r21, r7
     2e6:	57 29       	or	r21, r7
     2e8:	f8 28       	or	r15, r8
     2ea:	57 29       	or	r21, r7
     2ec:	57 29       	or	r21, r7
     2ee:	57 29       	or	r21, r7
     2f0:	57 29       	or	r21, r7
     2f2:	57 29       	or	r21, r7
     2f4:	57 29       	or	r21, r7
     2f6:	57 29       	or	r21, r7
     2f8:	57 29       	or	r21, r7
     2fa:	57 29       	or	r21, r7
     2fc:	57 29       	or	r21, r7
     2fe:	57 29       	or	r21, r7
     300:	57 29       	or	r21, r7
     302:	57 29       	or	r21, r7
     304:	57 29       	or	r21, r7
     306:	57 29       	or	r21, r7
     308:	ea 28       	or	r14, r10
     30a:	57 29       	or	r21, r7
     30c:	57 29       	or	r21, r7
     30e:	57 29       	or	r21, r7
     310:	57 29       	or	r21, r7
     312:	57 29       	or	r21, r7
     314:	57 29       	or	r21, r7
     316:	57 29       	or	r21, r7
     318:	57 29       	or	r21, r7
     31a:	57 29       	or	r21, r7
     31c:	57 29       	or	r21, r7
     31e:	57 29       	or	r21, r7
     320:	57 29       	or	r21, r7
     322:	57 29       	or	r21, r7
     324:	57 29       	or	r21, r7
     326:	57 29       	or	r21, r7
     328:	c0 28       	or	r12, r0
     32a:	57 29       	or	r21, r7
     32c:	57 29       	or	r21, r7
     32e:	57 29       	or	r21, r7
     330:	57 29       	or	r21, r7
     332:	57 29       	or	r21, r7
     334:	57 29       	or	r21, r7
     336:	57 29       	or	r21, r7
     338:	57 29       	or	r21, r7
     33a:	57 29       	or	r21, r7
     33c:	57 29       	or	r21, r7
     33e:	57 29       	or	r21, r7
     340:	57 29       	or	r21, r7
     342:	57 29       	or	r21, r7
     344:	57 29       	or	r21, r7
     346:	57 29       	or	r21, r7
     348:	06 29       	or	r16, r6
     34a:	20 29       	or	r18, r0
     34c:	2a 29       	or	r18, r10
     34e:	3e 29       	or	r19, r14
     350:	57 29       	or	r21, r7
     352:	57 29       	or	r21, r7
     354:	48 29       	or	r20, r8
     356:	57 29       	or	r21, r7
     358:	82 28       	or	r8, r2
     35a:	57 29       	or	r21, r7
     35c:	8b 28       	or	r8, r11
     35e:	94 28       	or	r9, r4
     360:	9d 28       	or	r9, r13
     362:	57 29       	or	r21, r7
     364:	a6 28       	or	r10, r6
     366:	50 29       	or	r21, r0
     368:	ba 29       	or	r27, r10
     36a:	25 2a       	or	r2, r21
     36c:	f6 29       	or	r31, r6
     36e:	df 29       	or	r29, r15
     370:	4e 2a       	or	r4, r30
     372:	4e 2a       	or	r4, r30
     374:	a4 29       	or	r26, r4
     376:	4e 2a       	or	r4, r30
     378:	a4 29       	or	r26, r4
     37a:	4e 2a       	or	r4, r30
     37c:	a4 29       	or	r26, r4
     37e:	a4 29       	or	r26, r4
     380:	a4 29       	or	r26, r4
     382:	4e 2a       	or	r4, r30
     384:	a4 29       	or	r26, r4
     386:	a4 29       	or	r26, r4
     388:	78 2e       	mov	r7, r24
     38a:	8a 2e       	mov	r8, r26
     38c:	9c 2e       	mov	r9, r28
     38e:	ae 2e       	mov	r10, r30
     390:	c0 2e       	mov	r12, r16
     392:	d2 2e       	mov	r13, r18
     394:	e4 2e       	mov	r14, r20
     396:	f6 2e       	mov	r15, r22
     398:	08 2f       	mov	r16, r24
     39a:	1a 2f       	mov	r17, r26
     39c:	2c 2f       	mov	r18, r28
     39e:	3e 2f       	mov	r19, r30
     3a0:	50 2f       	mov	r21, r16

000003a2 <__trampolines_end>:
     3a2:	00 00       	nop
     3a4:	00 00       	nop
     3a6:	00 3e       	cpi	r16, 0xE0	; 224
     3a8:	5b 4f       	sbci	r21, 0xFB	; 251
     3aa:	5b 3e       	cpi	r21, 0xEB	; 235
     3ac:	3e 6b       	ori	r19, 0xBE	; 190
     3ae:	4f 6b       	ori	r20, 0xBF	; 191
     3b0:	3e 1c       	adc	r3, r14
     3b2:	3e 7c       	andi	r19, 0xCE	; 206
     3b4:	3e 1c       	adc	r3, r14
     3b6:	18 3c       	cpi	r17, 0xC8	; 200
     3b8:	7e 3c       	cpi	r23, 0xCE	; 206
     3ba:	18 1c       	adc	r1, r8
     3bc:	57 7d       	andi	r21, 0xD7	; 215
     3be:	57 1c       	adc	r5, r7
     3c0:	1c 5e       	subi	r17, 0xEC	; 236
     3c2:	7f 5e       	subi	r23, 0xEF	; 239
     3c4:	1c 00       	.word	0x001c	; ????
     3c6:	18 3c       	cpi	r17, 0xC8	; 200
     3c8:	18 00       	.word	0x0018	; ????
     3ca:	ff e7       	ldi	r31, 0x7F	; 127
     3cc:	c3 e7       	ldi	r28, 0x73	; 115
     3ce:	ff 00       	.word	0x00ff	; ????
     3d0:	18 24       	eor	r1, r8
     3d2:	18 00       	.word	0x0018	; ????
     3d4:	ff e7       	ldi	r31, 0x7F	; 127
     3d6:	db e7       	ldi	r29, 0x7B	; 123
     3d8:	ff 30       	cpi	r31, 0x0F	; 15
     3da:	48 3a       	cpi	r20, 0xA8	; 168
     3dc:	06 0e       	add	r0, r22
     3de:	26 29       	or	r18, r6
     3e0:	79 29       	or	r23, r9
     3e2:	26 40       	sbci	r18, 0x06	; 6
     3e4:	7f 05       	cpc	r23, r15
     3e6:	05 07       	cpc	r16, r21
     3e8:	40 7f       	andi	r20, 0xF0	; 240
     3ea:	05 25       	eor	r16, r5
     3ec:	3f 5a       	subi	r19, 0xAF	; 175
     3ee:	3c e7       	ldi	r19, 0x7C	; 124
     3f0:	3c 5a       	subi	r19, 0xAC	; 172
     3f2:	7f 3e       	cpi	r23, 0xEF	; 239
     3f4:	1c 1c       	adc	r1, r12
     3f6:	08 08       	sbc	r0, r8
     3f8:	1c 1c       	adc	r1, r12
     3fa:	3e 7f       	andi	r19, 0xFE	; 254
     3fc:	14 22       	and	r1, r20
     3fe:	7f 22       	and	r7, r31
     400:	14 5f       	subi	r17, 0xF4	; 244
     402:	5f 00       	.word	0x005f	; ????
     404:	5f 5f       	subi	r21, 0xFF	; 255
     406:	06 09       	sbc	r16, r6
     408:	7f 01       	movw	r14, r30
     40a:	7f 00       	.word	0x007f	; ????
     40c:	66 89       	ldd	r22, Z+22	; 0x16
     40e:	95 6a       	ori	r25, 0xA5	; 165
     410:	60 60       	ori	r22, 0x00	; 0
     412:	60 60       	ori	r22, 0x00	; 0
     414:	60 94       	com	r6
     416:	a2 ff       	sbrs	r26, 2
     418:	a2 94       	swap	r10
     41a:	08 04       	cpc	r0, r8
     41c:	7e 04       	cpc	r7, r14
     41e:	08 10       	cpse	r0, r8
     420:	20 7e       	andi	r18, 0xE0	; 224
     422:	20 10       	cpse	r2, r0
     424:	08 08       	sbc	r0, r8
     426:	2a 1c       	adc	r2, r10
     428:	08 08       	sbc	r0, r8
     42a:	1c 2a       	or	r1, r28
     42c:	08 08       	sbc	r0, r8
     42e:	1e 10       	cpse	r1, r14
     430:	10 10       	cpse	r1, r0
     432:	10 0c       	add	r1, r0
     434:	1e 0c       	add	r1, r14
     436:	1e 0c       	add	r1, r14
     438:	30 38       	cpi	r19, 0x80	; 128
     43a:	3e 38       	cpi	r19, 0x8E	; 142
     43c:	30 06       	cpc	r3, r16
     43e:	0e 3e       	cpi	r16, 0xEE	; 238
     440:	0e 06       	cpc	r0, r30
     442:	00 00       	nop
     444:	00 00       	nop
     446:	00 00       	nop
     448:	00 5f       	subi	r16, 0xF0	; 240
     44a:	00 00       	nop
     44c:	00 07       	cpc	r16, r16
     44e:	00 07       	cpc	r16, r16
     450:	00 14       	cp	r0, r0
     452:	7f 14       	cp	r7, r15
     454:	7f 14       	cp	r7, r15
     456:	24 2a       	or	r2, r20
     458:	7f 2a       	or	r7, r31
     45a:	12 23       	and	r17, r18
     45c:	13 08       	sbc	r1, r3
     45e:	64 62       	ori	r22, 0x24	; 36
     460:	36 49       	sbci	r19, 0x96	; 150
     462:	56 20       	and	r5, r6
     464:	50 00       	.word	0x0050	; ????
     466:	08 07       	cpc	r16, r24
     468:	03 00       	.word	0x0003	; ????
     46a:	00 1c       	adc	r0, r0
     46c:	22 41       	sbci	r18, 0x12	; 18
     46e:	00 00       	nop
     470:	41 22       	and	r4, r17
     472:	1c 00       	.word	0x001c	; ????
     474:	2a 1c       	adc	r2, r10
     476:	7f 1c       	adc	r7, r15
     478:	2a 08       	sbc	r2, r10
     47a:	08 3e       	cpi	r16, 0xE8	; 232
     47c:	08 08       	sbc	r0, r8
     47e:	00 80       	ld	r0, Z
     480:	70 30       	cpi	r23, 0x00	; 0
     482:	00 08       	sbc	r0, r0
     484:	08 08       	sbc	r0, r8
     486:	08 08       	sbc	r0, r8
     488:	00 00       	nop
     48a:	60 60       	ori	r22, 0x00	; 0
     48c:	00 20       	and	r0, r0
     48e:	10 08       	sbc	r1, r0
     490:	04 02       	muls	r16, r20
     492:	3e 51       	subi	r19, 0x1E	; 30
     494:	49 45       	sbci	r20, 0x59	; 89
     496:	3e 00       	.word	0x003e	; ????
     498:	42 7f       	andi	r20, 0xF2	; 242
     49a:	40 00       	.word	0x0040	; ????
     49c:	72 49       	sbci	r23, 0x92	; 146
     49e:	49 49       	sbci	r20, 0x99	; 153
     4a0:	46 21       	and	r20, r6
     4a2:	41 49       	sbci	r20, 0x91	; 145
     4a4:	4d 33       	cpi	r20, 0x3D	; 61
     4a6:	18 14       	cp	r1, r8
     4a8:	12 7f       	andi	r17, 0xF2	; 242
     4aa:	10 27       	eor	r17, r16
     4ac:	45 45       	sbci	r20, 0x55	; 85
     4ae:	45 39       	cpi	r20, 0x95	; 149
     4b0:	3c 4a       	sbci	r19, 0xAC	; 172
     4b2:	49 49       	sbci	r20, 0x99	; 153
     4b4:	31 41       	sbci	r19, 0x11	; 17
     4b6:	21 11       	cpse	r18, r1
     4b8:	09 07       	cpc	r16, r25
     4ba:	36 49       	sbci	r19, 0x96	; 150
     4bc:	49 49       	sbci	r20, 0x99	; 153
     4be:	36 46       	sbci	r19, 0x66	; 102
     4c0:	49 49       	sbci	r20, 0x99	; 153
     4c2:	29 1e       	adc	r2, r25
     4c4:	00 00       	nop
     4c6:	14 00       	.word	0x0014	; ????
     4c8:	00 00       	nop
     4ca:	40 34       	cpi	r20, 0x40	; 64
     4cc:	00 00       	nop
     4ce:	00 08       	sbc	r0, r0
     4d0:	14 22       	and	r1, r20
     4d2:	41 14       	cp	r4, r1
     4d4:	14 14       	cp	r1, r4
     4d6:	14 14       	cp	r1, r4
     4d8:	00 41       	sbci	r16, 0x10	; 16
     4da:	22 14       	cp	r2, r2
     4dc:	08 02       	muls	r16, r24
     4de:	01 59       	subi	r16, 0x91	; 145
     4e0:	09 06       	cpc	r0, r25
     4e2:	3e 41       	sbci	r19, 0x1E	; 30
     4e4:	5d 59       	subi	r21, 0x9D	; 157
     4e6:	4e 7c       	andi	r20, 0xCE	; 206
     4e8:	12 11       	cpse	r17, r2
     4ea:	12 7c       	andi	r17, 0xC2	; 194
     4ec:	7f 49       	sbci	r23, 0x9F	; 159
     4ee:	49 49       	sbci	r20, 0x99	; 153
     4f0:	36 3e       	cpi	r19, 0xE6	; 230
     4f2:	41 41       	sbci	r20, 0x11	; 17
     4f4:	41 22       	and	r4, r17
     4f6:	7f 41       	sbci	r23, 0x1F	; 31
     4f8:	41 41       	sbci	r20, 0x11	; 17
     4fa:	3e 7f       	andi	r19, 0xFE	; 254
     4fc:	49 49       	sbci	r20, 0x99	; 153
     4fe:	49 41       	sbci	r20, 0x19	; 25
     500:	7f 09       	sbc	r23, r15
     502:	09 09       	sbc	r16, r9
     504:	01 3e       	cpi	r16, 0xE1	; 225
     506:	41 41       	sbci	r20, 0x11	; 17
     508:	51 73       	andi	r21, 0x31	; 49
     50a:	7f 08       	sbc	r7, r15
     50c:	08 08       	sbc	r0, r8
     50e:	7f 00       	.word	0x007f	; ????
     510:	41 7f       	andi	r20, 0xF1	; 241
     512:	41 00       	.word	0x0041	; ????
     514:	20 40       	sbci	r18, 0x00	; 0
     516:	41 3f       	cpi	r20, 0xF1	; 241
     518:	01 7f       	andi	r16, 0xF1	; 241
     51a:	08 14       	cp	r0, r8
     51c:	22 41       	sbci	r18, 0x12	; 18
     51e:	7f 40       	sbci	r23, 0x0F	; 15
     520:	40 40       	sbci	r20, 0x00	; 0
     522:	40 7f       	andi	r20, 0xF0	; 240
     524:	02 1c       	adc	r0, r2
     526:	02 7f       	andi	r16, 0xF2	; 242
     528:	7f 04       	cpc	r7, r15
     52a:	08 10       	cpse	r0, r8
     52c:	7f 3e       	cpi	r23, 0xEF	; 239
     52e:	41 41       	sbci	r20, 0x11	; 17
     530:	41 3e       	cpi	r20, 0xE1	; 225
     532:	7f 09       	sbc	r23, r15
     534:	09 09       	sbc	r16, r9
     536:	06 3e       	cpi	r16, 0xE6	; 230
     538:	41 51       	subi	r20, 0x11	; 17
     53a:	21 5e       	subi	r18, 0xE1	; 225
     53c:	7f 09       	sbc	r23, r15
     53e:	19 29       	or	r17, r9
     540:	46 26       	eor	r4, r22
     542:	49 49       	sbci	r20, 0x99	; 153
     544:	49 32       	cpi	r20, 0x29	; 41
     546:	03 01       	movw	r0, r6
     548:	7f 01       	movw	r14, r30
     54a:	03 3f       	cpi	r16, 0xF3	; 243
     54c:	40 40       	sbci	r20, 0x00	; 0
     54e:	40 3f       	cpi	r20, 0xF0	; 240
     550:	1f 20       	and	r1, r15
     552:	40 20       	and	r4, r0
     554:	1f 3f       	cpi	r17, 0xFF	; 255
     556:	40 38       	cpi	r20, 0x80	; 128
     558:	40 3f       	cpi	r20, 0xF0	; 240
     55a:	63 14       	cp	r6, r3
     55c:	08 14       	cp	r0, r8
     55e:	63 03       	mulsu	r22, r19
     560:	04 78       	andi	r16, 0x84	; 132
     562:	04 03       	mulsu	r16, r20
     564:	61 59       	subi	r22, 0x91	; 145
     566:	49 4d       	sbci	r20, 0xD9	; 217
     568:	43 00       	.word	0x0043	; ????
     56a:	7f 41       	sbci	r23, 0x1F	; 31
     56c:	41 41       	sbci	r20, 0x11	; 17
     56e:	02 04       	cpc	r0, r2
     570:	08 10       	cpse	r0, r8
     572:	20 00       	.word	0x0020	; ????
     574:	41 41       	sbci	r20, 0x11	; 17
     576:	41 7f       	andi	r20, 0xF1	; 241
     578:	04 02       	muls	r16, r20
     57a:	01 02       	muls	r16, r17
     57c:	04 40       	sbci	r16, 0x04	; 4
     57e:	40 40       	sbci	r20, 0x00	; 0
     580:	40 40       	sbci	r20, 0x00	; 0
     582:	00 03       	mulsu	r16, r16
     584:	07 08       	sbc	r0, r7
     586:	00 20       	and	r0, r0
     588:	54 54       	subi	r21, 0x44	; 68
     58a:	78 40       	sbci	r23, 0x08	; 8
     58c:	7f 28       	or	r7, r15
     58e:	44 44       	sbci	r20, 0x44	; 68
     590:	38 38       	cpi	r19, 0x88	; 136
     592:	44 44       	sbci	r20, 0x44	; 68
     594:	44 28       	or	r4, r4
     596:	38 44       	sbci	r19, 0x48	; 72
     598:	44 28       	or	r4, r4
     59a:	7f 38       	cpi	r23, 0x8F	; 143
     59c:	54 54       	subi	r21, 0x44	; 68
     59e:	54 18       	sub	r5, r4
     5a0:	00 08       	sbc	r0, r0
     5a2:	7e 09       	sbc	r23, r14
     5a4:	02 18       	sub	r0, r2
     5a6:	a4 a4       	ldd	r10, Z+44	; 0x2c
     5a8:	9c 78       	andi	r25, 0x8C	; 140
     5aa:	7f 08       	sbc	r7, r15
     5ac:	04 04       	cpc	r0, r4
     5ae:	78 00       	.word	0x0078	; ????
     5b0:	44 7d       	andi	r20, 0xD4	; 212
     5b2:	40 00       	.word	0x0040	; ????
     5b4:	20 40       	sbci	r18, 0x00	; 0
     5b6:	40 3d       	cpi	r20, 0xD0	; 208
     5b8:	00 7f       	andi	r16, 0xF0	; 240
     5ba:	10 28       	or	r1, r0
     5bc:	44 00       	.word	0x0044	; ????
     5be:	00 41       	sbci	r16, 0x10	; 16
     5c0:	7f 40       	sbci	r23, 0x0F	; 15
     5c2:	00 7c       	andi	r16, 0xC0	; 192
     5c4:	04 78       	andi	r16, 0x84	; 132
     5c6:	04 78       	andi	r16, 0x84	; 132
     5c8:	7c 08       	sbc	r7, r12
     5ca:	04 04       	cpc	r0, r4
     5cc:	78 38       	cpi	r23, 0x88	; 136
     5ce:	44 44       	sbci	r20, 0x44	; 68
     5d0:	44 38       	cpi	r20, 0x84	; 132
     5d2:	fc 18       	sub	r15, r12
     5d4:	24 24       	eor	r2, r4
     5d6:	18 18       	sub	r1, r8
     5d8:	24 24       	eor	r2, r4
     5da:	18 fc       	.word	0xfc18	; ????
     5dc:	7c 08       	sbc	r7, r12
     5de:	04 04       	cpc	r0, r4
     5e0:	08 48       	sbci	r16, 0x88	; 136
     5e2:	54 54       	subi	r21, 0x44	; 68
     5e4:	54 24       	eor	r5, r4
     5e6:	04 04       	cpc	r0, r4
     5e8:	3f 44       	sbci	r19, 0x4F	; 79
     5ea:	24 3c       	cpi	r18, 0xC4	; 196
     5ec:	40 40       	sbci	r20, 0x00	; 0
     5ee:	20 7c       	andi	r18, 0xC0	; 192
     5f0:	1c 20       	and	r1, r12
     5f2:	40 20       	and	r4, r0
     5f4:	1c 3c       	cpi	r17, 0xCC	; 204
     5f6:	40 30       	cpi	r20, 0x00	; 0
     5f8:	40 3c       	cpi	r20, 0xC0	; 192
     5fa:	44 28       	or	r4, r4
     5fc:	10 28       	or	r1, r0
     5fe:	44 4c       	sbci	r20, 0xC4	; 196
     600:	90 90 90 7c 	lds	r9, 0x7C90	; 0x807c90 <__bss_end+0x77b7>
     604:	44 64       	ori	r20, 0x44	; 68
     606:	54 4c       	sbci	r21, 0xC4	; 196
     608:	44 00       	.word	0x0044	; ????
     60a:	08 36       	cpi	r16, 0x68	; 104
     60c:	41 00       	.word	0x0041	; ????
     60e:	00 00       	nop
     610:	77 00       	.word	0x0077	; ????
     612:	00 00       	nop
     614:	41 36       	cpi	r20, 0x61	; 97
     616:	08 00       	.word	0x0008	; ????
     618:	02 01       	movw	r0, r4
     61a:	02 04       	cpc	r0, r2
     61c:	02 3c       	cpi	r16, 0xC2	; 194
     61e:	26 23       	and	r18, r22
     620:	26 3c       	cpi	r18, 0xC6	; 198
     622:	1e a1       	ldd	r17, Y+38	; 0x26
     624:	a1 61       	ori	r26, 0x11	; 17
     626:	12 3a       	cpi	r17, 0xA2	; 162
     628:	40 40       	sbci	r20, 0x00	; 0
     62a:	20 7a       	andi	r18, 0xA0	; 160
     62c:	38 54       	subi	r19, 0x48	; 72
     62e:	54 55       	subi	r21, 0x54	; 84
     630:	59 21       	and	r21, r9
     632:	55 55       	subi	r21, 0x55	; 85
     634:	79 41       	sbci	r23, 0x19	; 25
     636:	21 54       	subi	r18, 0x41	; 65
     638:	54 78       	andi	r21, 0x84	; 132
     63a:	41 21       	and	r20, r1
     63c:	55 54       	subi	r21, 0x45	; 69
     63e:	78 40       	sbci	r23, 0x08	; 8
     640:	20 54       	subi	r18, 0x40	; 64
     642:	55 79       	andi	r21, 0x95	; 149
     644:	40 0c       	add	r4, r0
     646:	1e 52       	subi	r17, 0x2E	; 46
     648:	72 12       	cpse	r7, r18
     64a:	39 55       	subi	r19, 0x59	; 89
     64c:	55 55       	subi	r21, 0x55	; 85
     64e:	59 39       	cpi	r21, 0x99	; 153
     650:	54 54       	subi	r21, 0x44	; 68
     652:	54 59       	subi	r21, 0x94	; 148
     654:	39 55       	subi	r19, 0x59	; 89
     656:	54 54       	subi	r21, 0x44	; 68
     658:	58 00       	.word	0x0058	; ????
     65a:	00 45       	sbci	r16, 0x50	; 80
     65c:	7c 41       	sbci	r23, 0x1C	; 28
     65e:	00 02       	muls	r16, r16
     660:	45 7d       	andi	r20, 0xD5	; 213
     662:	42 00       	.word	0x0042	; ????
     664:	01 45       	sbci	r16, 0x51	; 81
     666:	7c 40       	sbci	r23, 0x0C	; 12
     668:	f0 29       	or	r31, r0
     66a:	24 29       	or	r18, r4
     66c:	f0 f0       	brcs	.+60     	; 0x6aa <__LOCK_REGION_LENGTH__+0x2aa>
     66e:	28 25       	eor	r18, r8
     670:	28 f0       	brcs	.+10     	; 0x67c <__LOCK_REGION_LENGTH__+0x27c>
     672:	7c 54       	subi	r23, 0x4C	; 76
     674:	55 45       	sbci	r21, 0x55	; 85
     676:	00 20       	and	r0, r0
     678:	54 54       	subi	r21, 0x44	; 68
     67a:	7c 54       	subi	r23, 0x4C	; 76
     67c:	7c 0a       	sbc	r7, r28
     67e:	09 7f       	andi	r16, 0xF9	; 249
     680:	49 32       	cpi	r20, 0x29	; 41
     682:	49 49       	sbci	r20, 0x99	; 153
     684:	49 32       	cpi	r20, 0x29	; 41
     686:	32 48       	sbci	r19, 0x82	; 130
     688:	48 48       	sbci	r20, 0x88	; 136
     68a:	32 32       	cpi	r19, 0x22	; 34
     68c:	4a 48       	sbci	r20, 0x8A	; 138
     68e:	48 30       	cpi	r20, 0x08	; 8
     690:	3a 41       	sbci	r19, 0x1A	; 26
     692:	41 21       	and	r20, r1
     694:	7a 3a       	cpi	r23, 0xAA	; 170
     696:	42 40       	sbci	r20, 0x02	; 2
     698:	20 78       	andi	r18, 0x80	; 128
     69a:	00 9d       	mul	r16, r0
     69c:	a0 a0       	ldd	r10, Z+32	; 0x20
     69e:	7d 39       	cpi	r23, 0x9D	; 157
     6a0:	44 44       	sbci	r20, 0x44	; 68
     6a2:	44 39       	cpi	r20, 0x94	; 148
     6a4:	3d 40       	sbci	r19, 0x0D	; 13
     6a6:	40 40       	sbci	r20, 0x00	; 0
     6a8:	3d 3c       	cpi	r19, 0xCD	; 205
     6aa:	24 ff       	sbrs	r18, 4
     6ac:	24 24       	eor	r2, r4
     6ae:	48 7e       	andi	r20, 0xE8	; 232
     6b0:	49 43       	sbci	r20, 0x39	; 57
     6b2:	66 2b       	or	r22, r22
     6b4:	2f fc       	.word	0xfc2f	; ????
     6b6:	2f 2b       	or	r18, r31
     6b8:	ff 09       	sbc	r31, r15
     6ba:	29 f6       	brne	.-118    	; 0x646 <__LOCK_REGION_LENGTH__+0x246>
     6bc:	20 c0       	rjmp	.+64     	; 0x6fe <__LOCK_REGION_LENGTH__+0x2fe>
     6be:	88 7e       	andi	r24, 0xE8	; 232
     6c0:	09 03       	fmul	r16, r17
     6c2:	20 54       	subi	r18, 0x40	; 64
     6c4:	54 79       	andi	r21, 0x94	; 148
     6c6:	41 00       	.word	0x0041	; ????
     6c8:	00 44       	sbci	r16, 0x40	; 64
     6ca:	7d 41       	sbci	r23, 0x1D	; 29
     6cc:	30 48       	sbci	r19, 0x80	; 128
     6ce:	48 4a       	sbci	r20, 0xA8	; 168
     6d0:	32 38       	cpi	r19, 0x82	; 130
     6d2:	40 40       	sbci	r20, 0x00	; 0
     6d4:	22 7a       	andi	r18, 0xA2	; 162
     6d6:	00 7a       	andi	r16, 0xA0	; 160
     6d8:	0a 0a       	sbc	r0, r26
     6da:	72 7d       	andi	r23, 0xD2	; 210
     6dc:	0d 19       	sub	r16, r13
     6de:	31 7d       	andi	r19, 0xD1	; 209
     6e0:	26 29       	or	r18, r6
     6e2:	29 2f       	mov	r18, r25
     6e4:	28 26       	eor	r2, r24
     6e6:	29 29       	or	r18, r9
     6e8:	29 26       	eor	r2, r25
     6ea:	30 48       	sbci	r19, 0x80	; 128
     6ec:	4d 40       	sbci	r20, 0x0D	; 13
     6ee:	20 38       	cpi	r18, 0x80	; 128
     6f0:	08 08       	sbc	r0, r8
     6f2:	08 08       	sbc	r0, r8
     6f4:	08 08       	sbc	r0, r8
     6f6:	08 08       	sbc	r0, r8
     6f8:	38 2f       	mov	r19, r24
     6fa:	10 c8       	rjmp	.-4064   	; 0xfffff71c <__eeprom_end+0xff7ef71c>
     6fc:	ac ba       	out	0x1c, r10	; 28
     6fe:	2f 10       	cpse	r2, r15
     700:	28 34       	cpi	r18, 0x48	; 72
     702:	fa 00       	.word	0x00fa	; ????
     704:	00 7b       	andi	r16, 0xB0	; 176
     706:	00 00       	nop
     708:	08 14       	cp	r0, r8
     70a:	2a 14       	cp	r2, r10
     70c:	22 22       	and	r2, r18
     70e:	14 2a       	or	r1, r20
     710:	14 08       	sbc	r1, r4
     712:	aa 00       	.word	0x00aa	; ????
     714:	55 00       	.word	0x0055	; ????
     716:	aa aa       	std	Y+50, r10	; 0x32
     718:	55 aa       	std	Z+53, r5	; 0x35
     71a:	55 aa       	std	Z+53, r5	; 0x35
     71c:	00 00       	nop
     71e:	00 ff       	sbrs	r16, 0
     720:	00 10       	cpse	r0, r0
     722:	10 10       	cpse	r1, r0
     724:	ff 00       	.word	0x00ff	; ????
     726:	14 14       	cp	r1, r4
     728:	14 ff       	sbrs	r17, 4
     72a:	00 10       	cpse	r0, r0
     72c:	10 ff       	sbrs	r17, 0
     72e:	00 ff       	sbrs	r16, 0
     730:	10 10       	cpse	r1, r0
     732:	f0 10       	cpse	r15, r0
     734:	f0 14       	cp	r15, r0
     736:	14 14       	cp	r1, r4
     738:	fc 00       	.word	0x00fc	; ????
     73a:	14 14       	cp	r1, r4
     73c:	f7 00       	.word	0x00f7	; ????
     73e:	ff 00       	.word	0x00ff	; ????
     740:	00 ff       	sbrs	r16, 0
     742:	00 ff       	sbrs	r16, 0
     744:	14 14       	cp	r1, r4
     746:	f4 04       	cpc	r15, r4
     748:	fc 14       	cp	r15, r12
     74a:	14 17       	cp	r17, r20
     74c:	10 1f       	adc	r17, r16
     74e:	10 10       	cpse	r1, r0
     750:	1f 10       	cpse	r1, r15
     752:	1f 14       	cp	r1, r15
     754:	14 14       	cp	r1, r4
     756:	1f 00       	.word	0x001f	; ????
     758:	10 10       	cpse	r1, r0
     75a:	10 f0       	brcs	.+4      	; 0x760 <__LOCK_REGION_LENGTH__+0x360>
     75c:	00 00       	nop
     75e:	00 00       	nop
     760:	1f 10       	cpse	r1, r15
     762:	10 10       	cpse	r1, r0
     764:	10 1f       	adc	r17, r16
     766:	10 10       	cpse	r1, r0
     768:	10 10       	cpse	r1, r0
     76a:	f0 10       	cpse	r15, r0
     76c:	00 00       	nop
     76e:	00 ff       	sbrs	r16, 0
     770:	10 10       	cpse	r1, r0
     772:	10 10       	cpse	r1, r0
     774:	10 10       	cpse	r1, r0
     776:	10 10       	cpse	r1, r0
     778:	10 ff       	sbrs	r17, 0
     77a:	10 00       	.word	0x0010	; ????
     77c:	00 00       	nop
     77e:	ff 14       	cp	r15, r15
     780:	00 00       	nop
     782:	ff 00       	.word	0x00ff	; ????
     784:	ff 00       	.word	0x00ff	; ????
     786:	00 1f       	adc	r16, r16
     788:	10 17       	cp	r17, r16
     78a:	00 00       	nop
     78c:	fc 04       	cpc	r15, r12
     78e:	f4 14       	cp	r15, r4
     790:	14 17       	cp	r17, r20
     792:	10 17       	cp	r17, r16
     794:	14 14       	cp	r1, r4
     796:	f4 04       	cpc	r15, r4
     798:	f4 00       	.word	0x00f4	; ????
     79a:	00 ff       	sbrs	r16, 0
     79c:	00 f7       	brcc	.-64     	; 0x75e <__LOCK_REGION_LENGTH__+0x35e>
     79e:	14 14       	cp	r1, r4
     7a0:	14 14       	cp	r1, r4
     7a2:	14 14       	cp	r1, r4
     7a4:	14 f7       	brge	.-60     	; 0x76a <__LOCK_REGION_LENGTH__+0x36a>
     7a6:	00 f7       	brcc	.-64     	; 0x768 <__LOCK_REGION_LENGTH__+0x368>
     7a8:	14 14       	cp	r1, r4
     7aa:	14 17       	cp	r17, r20
     7ac:	14 10       	cpse	r1, r4
     7ae:	10 1f       	adc	r17, r16
     7b0:	10 1f       	adc	r17, r16
     7b2:	14 14       	cp	r1, r4
     7b4:	14 f4       	brge	.+4      	; 0x7ba <__LOCK_REGION_LENGTH__+0x3ba>
     7b6:	14 10       	cpse	r1, r4
     7b8:	10 f0       	brcs	.+4      	; 0x7be <__LOCK_REGION_LENGTH__+0x3be>
     7ba:	10 f0       	brcs	.+4      	; 0x7c0 <__LOCK_REGION_LENGTH__+0x3c0>
     7bc:	00 00       	nop
     7be:	1f 10       	cpse	r1, r15
     7c0:	1f 00       	.word	0x001f	; ????
     7c2:	00 00       	nop
     7c4:	1f 14       	cp	r1, r15
     7c6:	00 00       	nop
     7c8:	00 fc       	sbrc	r0, 0
     7ca:	14 00       	.word	0x0014	; ????
     7cc:	00 f0       	brcs	.+0      	; 0x7ce <__LOCK_REGION_LENGTH__+0x3ce>
     7ce:	10 f0       	brcs	.+4      	; 0x7d4 <__LOCK_REGION_LENGTH__+0x3d4>
     7d0:	10 10       	cpse	r1, r0
     7d2:	ff 10       	cpse	r15, r15
     7d4:	ff 14       	cp	r15, r15
     7d6:	14 14       	cp	r1, r4
     7d8:	ff 14       	cp	r15, r15
     7da:	10 10       	cpse	r1, r0
     7dc:	10 1f       	adc	r17, r16
     7de:	00 00       	nop
     7e0:	00 00       	nop
     7e2:	f0 10       	cpse	r15, r0
     7e4:	ff ff       	.word	0xffff	; ????
     7e6:	ff ff       	.word	0xffff	; ????
     7e8:	ff f0       	brie	.+62     	; 0x828 <__LOCK_REGION_LENGTH__+0x428>
     7ea:	f0 f0       	brcs	.+60     	; 0x828 <__LOCK_REGION_LENGTH__+0x428>
     7ec:	f0 f0       	brcs	.+60     	; 0x82a <__LOCK_REGION_LENGTH__+0x42a>
     7ee:	ff ff       	.word	0xffff	; ????
     7f0:	ff 00       	.word	0x00ff	; ????
     7f2:	00 00       	nop
     7f4:	00 00       	nop
     7f6:	ff ff       	.word	0xffff	; ????
     7f8:	0f 0f       	add	r16, r31
     7fa:	0f 0f       	add	r16, r31
     7fc:	0f 38       	cpi	r16, 0x8F	; 143
     7fe:	44 44       	sbci	r20, 0x44	; 68
     800:	38 44       	sbci	r19, 0x48	; 72
     802:	7c 2a       	or	r7, r28
     804:	2a 3e       	cpi	r18, 0xEA	; 234
     806:	14 7e       	andi	r17, 0xE4	; 228
     808:	02 02       	muls	r16, r18
     80a:	06 06       	cpc	r0, r22
     80c:	02 7e       	andi	r16, 0xE2	; 226
     80e:	02 7e       	andi	r16, 0xE2	; 226
     810:	02 63       	ori	r16, 0x32	; 50
     812:	55 49       	sbci	r21, 0x95	; 149
     814:	41 63       	ori	r20, 0x31	; 49
     816:	38 44       	sbci	r19, 0x48	; 72
     818:	44 3c       	cpi	r20, 0xC4	; 196
     81a:	04 40       	sbci	r16, 0x04	; 4
     81c:	7e 20       	and	r7, r14
     81e:	1e 20       	and	r1, r14
     820:	06 02       	muls	r16, r22
     822:	7e 02       	muls	r23, r30
     824:	02 99       	sbic	0x00, 2	; 0
     826:	a5 e7       	ldi	r26, 0x75	; 117
     828:	a5 99       	sbic	0x14, 5	; 20
     82a:	1c 2a       	or	r1, r28
     82c:	49 2a       	or	r4, r25
     82e:	1c 4c       	sbci	r17, 0xCC	; 204
     830:	72 01       	movw	r14, r4
     832:	72 4c       	sbci	r23, 0xC2	; 194
     834:	30 4a       	sbci	r19, 0xA0	; 160
     836:	4d 4d       	sbci	r20, 0xDD	; 221
     838:	30 30       	cpi	r19, 0x00	; 0
     83a:	48 78       	andi	r20, 0x88	; 136
     83c:	48 30       	cpi	r20, 0x08	; 8
     83e:	bc 62       	ori	r27, 0x2C	; 44
     840:	5a 46       	sbci	r21, 0x6A	; 106
     842:	3d 3e       	cpi	r19, 0xED	; 237
     844:	49 49       	sbci	r20, 0x99	; 153
     846:	49 00       	.word	0x0049	; ????
     848:	7e 01       	movw	r14, r28
     84a:	01 01       	movw	r0, r2
     84c:	7e 2a       	or	r7, r30
     84e:	2a 2a       	or	r2, r26
     850:	2a 2a       	or	r2, r26
     852:	44 44       	sbci	r20, 0x44	; 68
     854:	5f 44       	sbci	r21, 0x4F	; 79
     856:	44 40       	sbci	r20, 0x04	; 4
     858:	51 4a       	sbci	r21, 0xA1	; 161
     85a:	44 40       	sbci	r20, 0x04	; 4
     85c:	40 44       	sbci	r20, 0x40	; 64
     85e:	4a 51       	subi	r20, 0x1A	; 26
     860:	40 00       	.word	0x0040	; ????
     862:	00 ff       	sbrs	r16, 0
     864:	01 03       	mulsu	r16, r17
     866:	e0 80       	ld	r14, Z
     868:	ff 00       	.word	0x00ff	; ????
     86a:	00 08       	sbc	r0, r0
     86c:	08 6b       	ori	r16, 0xB8	; 184
     86e:	6b 08       	sbc	r6, r11
     870:	36 12       	cpse	r3, r22
     872:	36 24       	eor	r3, r6
     874:	36 06       	cpc	r3, r22
     876:	0f 09       	sbc	r16, r15
     878:	0f 06       	cpc	r0, r31
     87a:	00 00       	nop
     87c:	18 18       	sub	r1, r8
     87e:	00 00       	nop
     880:	00 10       	cpse	r0, r0
     882:	10 00       	.word	0x0010	; ????
     884:	30 40       	sbci	r19, 0x00	; 0
     886:	ff 01       	movw	r30, r30
     888:	01 00       	.word	0x0001	; ????
     88a:	1f 01       	movw	r2, r30
     88c:	01 1e       	adc	r0, r17
     88e:	00 19       	sub	r16, r0
     890:	1d 17       	cp	r17, r29
     892:	12 00       	.word	0x0012	; ????
     894:	3c 3c       	cpi	r19, 0xCC	; 204
     896:	3c 3c       	cpi	r19, 0xCC	; 204
     898:	00 00       	nop
     89a:	00 00       	nop
	...

0000089d <_ZL4Gcmd>:
     89d:	13 01 80 32 11 80 64 26 01 04 b1 02 0b 14 c0 02     ...2..d&........
     8ad:	08 00 c1 01 05 c5 02 41 30 c7 01 c1 ec 01 1b 3a     .......A0......:
     8bd:	81 55 64 2a 04 00 00 00 7f 2b 04 00 00 00 9f 36     .Ud*.....+.....6
     8cd:	01 c8 b7 01 00 f2 01 00 e0 8f 28 24 22 31 2b 0e     ..........($"1+.
     8dd:	53 a5 42 16 18 12 1a 14 03 32 e1 8f 17 1b 1d 0e     S.B......2......
     8ed:	14 11 2c a5 3d 09 27 2d 25 2b 3c 32 13 80 0a 29     ..,.=.'-%+<2...)
     8fd:	80 ff                                               ..

000008ff <_ZL5drums>:
     8ff:	01 02 03 04 08 09 0a 0b 0c 0d 0e 0f 11 12 17 18     ................
     90f:	19 1a 1b 1c 1d 1e 1f 21 22 23 24 29 2a 2b 2c 2d     .......!"#$)*+,-
     91f:	31 32 33 34 35 36 37 38 3a 3b 3c 3d 3e 3f 40        12345678:;<=>?@

0000092e <_ZL8bass_sfx>:
     92e:	00 20 00 21 00 22 00 23 00 24 00 26 01 23 01 20     . .!.".#.$.&.#. 
     93e:	01 56 01 27 0a 20 0a 21 0a 22 01 25 01 26 00 25     .V.'. .!.".%.&.%
     94e:	00 27 01 21 01 22 01 24 01 54 01 55 01 57 0a 23     .'.!.".$.T.U.W.#
     95e:	0a 24 0a 25 0a 26 0a 27 0b 29 0b 2a 0b 4e 0b 54     .$.%.&.'.).*.N.T
     96e:	0b 72 01 78 01 79 01 7a 01 7b 01 7c 01 7d 01 7e     .r.x.y.z.{.|.}.~
     97e:	01 7f 00 7a 00 7b 00 7c 00 7d 00 7e 00 7f 0a 78     ...z.{.|.}.~...x
     98e:	0a 79 0a 7a 0a 7b 0a 7c 0a 7d 0a 7e 0a 7f 00 78     .y.z.{.|.}.~...x
     99e:	00 79                                               .y

000009a0 <_ZL6ethnic>:
     9a0:	00 6a 00 6f 00 6e 0a 6c 00 69 01 6a 0a 6d 00 6c     .j.o.n.l.i.j.m.l
     9b0:	00 73 0a 6b 0a 6a 0a 6e 00 6d 00 6b 00 70 0a 6f     .s.k.j.n.m.k.p.o
     9c0:	00 10 0a 69 0a 70 0b 4a 0b 69 0b 6a 0b 6c 0b 6d     ...i.p.J.i.j.l.m
     9d0:	0b 4b 00 72 00 74 00 75 00 76 00 77 0a 71 0a 72     .K.r.t.u.v.w.q.r
     9e0:	0a 73 0a 74 0a 75 0a 6a 0a 6f 0a 6e 00 6c           .s.t.u.j.o.n.l

000009ee <_ZL5synth>:
     9ee:	01 53 01 71 01 72 01 73 01 75 01 76 01 77 0a 51     .S.q.r.s.u.v.w.Q
     9fe:	01 50 01 51 01 52 01 74 01 78 01 54 0a 52 00 55     .P.Q.R.t.x.T.R.U
     a0e:	0a 54 0a 55 0a 56 0b 54 00 51 00 52 00 53 00 54     .T.U.V.T.Q.R.S.T
     a1e:	0a 53 00 56 00 57 00 58 0a 57 0a 58 0b 51 0b 52     .S.V.W.X.W.X.Q.R
     a2e:	0b 53 0b 58 0b 80                                   .S.X..

00000a34 <_ZL3pad>:
     a34:	00 59 00 5a 00 5b 00 5c 00 5d 00 5e 00 5f 00 60     .Y.Z.[.\.].^._.`
     a44:	00 61 00 62 00 63 00 64 00 65 00 66 00 67 00 68     .a.b.c.d.e.f.g.h
     a54:	01 4d 01 4e 01 4f 0a 59 0a 5a 0a 5b 0a 5c 0a 5d     .M.N.O.Y.Z.[.\.]
     a64:	0a 5e 0a 5f 0a 60 0a 61 0a 62 0a 63 0a 64 0a 65     .^._.`.a.b.c.d.e
     a74:	0a 67 0a 68 0b 50 0b 59 0b 5a 0b 5b 0b 5c 0b 5d     .g.h.P.Y.Z.[.\.]
     a84:	0b 5e 0b 5f 0b 60 0b 61 0b 62 0b 63 0b 64 0b 66     .^._.`.a.b.c.d.f
     a94:	0b 67 0b 65 0a 66 0b 32                             .g.e.f.2

00000a9c <_ZL9sax_flute>:
     a9c:	01 43 00 42 00 44 00 41 0a 42 00 48 00 4a 00 4c     .C.B.D.A.B.H.J.L
     aac:	01 4c 00 4f 01 49 01 4a 00 43 00 45 0a 41 01 41     .L.O.I.J.C.E.A.A
     abc:	01 42 01 44 01 4b 0a 4a 00 49 00 4b 00 4d 00 4e     .B.D.K.J.I.K.M.N
     acc:	00 46 00 47 0a 43 0a 44 0b 3d 0b 3e 00 50 0a 4b     .F.G.C.D.=.>.P.K
     adc:	0a 4c 0a 4d 0a 4e 0a 4f 0b 3f 0b 40 0b 41 0b 42     .L.M.N.O.?.@.A.B
     aec:	0b 43 0b 44 0a 50 0b 49 0b 45 0b 46 0b 47 0b 48     .C.D.P.I.E.F.G.H

00000afc <_ZL5brass>:
     afc:	00 3e 00 39 00 3a 00 3c 00 3f 01 3e 01 39 0a 3c     .>.9.:.<.?.>.9.<
     b0c:	01 3c 0a 3b 01 3d 01 46 01 47 01 48 00 40 01 3f     .<.;.=.F.G.H.@.?
     b1c:	01 3b 0a 3d 0a 46 0a 3f 00 3b 00 3d 01 3a 01 40     .;.=.F.?.;.=.:.@
     b2c:	01 45 0a 39 0a 3a 0a 3e 0a 40 0a 45 0a 47 0a 48     .E.9.:.>.@.E.G.H
     b3c:	0a 49 0b 3b 0b 3c 0b 68                             .I.;.<.h

00000b44 <_ZL13strings_choir>:
     b44:	00 31 01 31 00 29 00 2a 00 2f 01 2f 00 35 00 36     .1.1.).*././.5.6
     b54:	00 37 01 35 01 37 01 33 00 2e 00 2b 00 32 0a 29     .7.5.7.3...+.2.)
     b64:	00 2c 00 33 01 36 01 34 01 38 0a 35 0a 36 0a 37     .,.3.6.4.8.5.6.7
     b74:	00 34 00 2d 00 30 01 29 01 2a 01 2b 0a 38 0b 33     .4.-.0.).*.+.8.3
     b84:	0b 34 0b 35 0b 36 0b 37 01 2c 01 2d 01 2e 01 30     .4.5.6.7.,.-...0
     b94:	01 32 0a 2a 0b 38 0b 39 0b 2c 0b 2d 0b 2e 0b 2f     .2.*.8.9.,.-.../
     ba4:	0a 2b 0a 2c 0a 2d 0a 2e 0a 2f 0a 30 0a 31 0a 32     .+.,.-.../.0.1.2
     bb4:	0a 33 0a 34 0b 31 0b 30 0b 6b 0b 3a 0b 56 00 38     .3.4.1.0.k.:.V.8

00000bc4 <_ZL6guitar>:
     bc4:	00 19 00 1a 00 1b 00 1c 00 1e 01 1b 01 1a 01 63     ...............c
     bd4:	01 1e 01 20 01 19 0a 1d 01 69 01 6b 00 1f 0b 1a     ... .....i.k....
     be4:	0b 1e 01 6e 01 66 00 1d 01 1c 01 1d 01 1f 01 61     ...n.f.........a
     bf4:	01 62 01 64 01 65 01 67 01 68 01 6c 01 6d 0a 19     .b.d.e.g.h.l.m..
     c04:	0a 1a 0a 1b 0a 1c 0a 1e 0a 1f 0a 20 0b 19 0b 1b     ........... ....
     c14:	0b 1c 0b 1d 0b 1f 0b 20 0b 21 0b 22 0b 23 0b 24     ....... .!.".#.$
     c24:	0b 25 0b 26 0b 27 0b 28 0b 29 0b 72 0b 74 0b 75     .%.&.'.(.).r.t.u
     c34:	0b 76 0b 77 0b 78 00 20 0b 6e 0b 7c 0b 7d 0b 7e     .v.w.x. .n.|.}.~
     c44:	0b 7f 0b 4d 0b 4e 0b 4c                             ...M.N.L

00000c4c <_ZL9accordion>:
     c4c:	00 16 00 17 00 18 01 15 01 16 01 17 01 18 0a 16     ................
     c5c:	0a 17 0a 18 0b 16 0b 17 0b 18 0b 6f 0b 70 0b 71     ...........o.p.q
     c6c:	01 6f 01 70                                         .o.p

00000c70 <_ZL5organ>:
     c70:	0a 13 00 12 00 13 00 15 01 14 01 5b 01 60 01 13     ...........[.`..
     c80:	01 11 00 14 01 5c 01 5d 01 5e 01 12 0a 11 0a 12     .....\.].^......
     c90:	00 11 0a 14 0a 15 0b 0b 0b 0c 0b 0d 0b 0e 0b 0f     ................
     ca0:	0b 10 0b 11 0b 12 0b 13 0b 14 0b 15 01 5f 01 59     ............._.Y
     cb0:	01 5a 0b 57 0b 7b                                   .Z.W.{

00000cb6 <_ZL9chromatic>:
     cb6:	00 0c 00 0d 00 0e 00 09 00 0a 00 0b 00 0f 01 0d     ................
     cc6:	01 09 00 71 01 0a 01 0b 01 0c 01 0e 01 0f 01 10     ...q............
     cd6:	0a 0a 0a 0b 0a 0c 0a 0d 0a 0e 0a 0f 0a 10 0b 09     ................
     ce6:	0b 0a                                               ..

00000ce8 <_ZL5piano>:
     ce8:	00 01 00 03 01 02 00 04 0a 05 00 05 00 06 01 06     ................
     cf8:	01 05 00 08 00 02 0a 03 01 01 0a 01 01 03 01 04     ................
     d08:	01 07 01 08 0a 04 00 07 0a 02 0b 01 0b 02 0a 06     ................
     d18:	0a 07 0a 08 0b 03 0b 04 0b 05 0b 06 0b 07 0a 09     ................
     d28:	0b 08 0b 79 0b 7a                                   ...y.z

00000d2e <_ZL8drumsets>:
     d2e:	53 74 61 6e 64 61 72 64 31 28 53 44 29 00 00 00     Standard1(SD)...
     d3e:	53 74 61 6e 64 61 72 64 32 28 53 44 29 00 00 00     Standard2(SD)...
     d4e:	53 74 61 6e 64 61 72 64 31 00 00 00 00 00 00 00     Standard1.......
     d5e:	53 74 61 6e 64 61 72 64 32 00 00 00 00 00 00 00     Standard2.......
     d6e:	52 6f 6f 6d 00 00 00 00 00 00 00 00 00 00 00 00     Room............
     d7e:	46 6f 6c 6b 53 44 2a 00 00 00 00 00 00 00 00 00     FolkSD*.........
     d8e:	41 63 6f 75 73 74 69 63 2a 00 00 00 00 00 00 00     Acoustic*.......
     d9e:	4a 61 7a 7a 2a 00 00 00 00 00 00 00 00 00 00 00     Jazz*...........
     dae:	53 74 75 64 69 6f 00 00 00 00 00 00 00 00 00 00     Studio..........
     dbe:	46 6f 6c 6b 00 00 00 00 00 00 00 00 00 00 00 00     Folk............
     dce:	41 63 6f 75 73 74 69 63 00 00 00 00 00 00 00 00     Acoustic........
     dde:	4a 61 7a 7a 00 00 00 00 00 00 00 00 00 00 00 00     Jazz............
     dee:	52 6f 63 6b 31 00 00 00 00 00 00 00 00 00 00 00     Rock1...........
     dfe:	52 6f 63 6b 32 00 00 00 00 00 00 00 00 00 00 00     Rock2...........
     e0e:	44 69 73 63 6f 31 00 00 00 00 00 00 00 00 00 00     Disco1..........
     e1e:	44 69 73 63 6f 32 00 00 00 00 00 00 00 00 00 00     Disco2..........
     e2e:	48 6f 75 73 65 2a 00 00 00 00 00 00 00 00 00 00     House*..........
     e3e:	54 65 63 68 6e 6f 2a 00 00 00 00 00 00 00 00 00     Techno*.........
     e4e:	54 65 63 68 6e 6f 00 00 00 00 00 00 00 00 00 00     Techno..........
     e5e:	48 6f 75 73 65 31 00 00 00 00 00 00 00 00 00 00     House1..........
     e6e:	48 6f 75 73 65 32 00 00 00 00 00 00 00 00 00 00     House2..........
     e7e:	52 61 70 2a 00 00 00 00 00 00 00 00 00 00 00 00     Rap*............
     e8e:	48 69 70 48 6f 70 31 00 00 00 00 00 00 00 00 00     HipHop1.........
     e9e:	48 65 61 76 79 5f 50 6f 70 2a 00 00 00 00 00 00     Heavy_Pop*......
     eae:	48 65 61 76 79 5f 50 6f 70 00 00 00 00 00 00 00     Heavy_Pop.......
     ebe:	45 6c 65 63 74 72 6f 00 00 00 00 00 00 00 00 00     Electro.........
     ece:	48 69 70 48 6f 70 32 00 00 00 00 00 00 00 00 00     HipHop2.........
     ede:	53 77 69 6e 67 2a 00 00 00 00 00 00 00 00 00 00     Swing*..........
     eee:	42 72 75 73 68 31 2a 00 00 00 00 00 00 00 00 00     Brush1*.........
     efe:	42 72 75 73 68 32 00 00 00 00 00 00 00 00 00 00     Brush2..........
     f0e:	53 77 69 6e 67 00 00 00 00 00 00 00 00 00 00 00     Swing...........
     f1e:	42 72 75 73 68 31 00 00 00 00 00 00 00 00 00 00     Brush1..........
     f2e:	4f 72 63 68 65 73 74 72 61 00 00 00 00 00 00 00     Orchestra.......
     f3e:	4c 61 74 69 6e 2a 00 00 00 00 00 00 00 00 00 00     Latin*..........
     f4e:	4c 69 67 68 74 50 6f 70 00 00 00 00 00 00 00 00     LightPop........
     f5e:	49 6e 64 75 73 74 72 69 61 6c 00 00 00 00 00 00     Industrial......
     f6e:	44 61 6e 63 65 31 00 00 00 00 00 00 00 00 00 00     Dance1..........
     f7e:	44 61 6e 63 65 32 00 00 00 00 00 00 00 00 00 00     Dance2..........
     f8e:	53 74 72 65 65 74 00 00 00 00 00 00 00 00 00 00     Street..........
     f9e:	52 26 42 00 00 00 00 00 00 00 00 00 00 00 00 00     R&B.............
     fae:	43 6f 6e 74 65 6d 70 6f 72 61 72 79 00 00 00 00     Contemporary....
     fbe:	41 6e 61 6c 6f 67 31 00 00 00 00 00 00 00 00 00     Analog1.........
     fce:	41 6e 61 6c 6f 67 32 00 00 00 00 00 00 00 00 00     Analog2.........
     fde:	4e 65 77 53 6f 75 6c 00 00 00 00 00 00 00 00 00     NewSoul.........
     fee:	47 61 72 61 67 65 00 00 00 00 00 00 00 00 00 00     Garage..........
     ffe:	56 6f 63 61 6c 31 00 00 00 00 00 00 00 00 00 00     Vocal1..........
    100e:	56 6f 63 61 6c 32 00 00 00 00 00 00 00 00 00 00     Vocal2..........

0000101e <_ZL6bank_d>:
    101e:	4c 61 79 65 72 65 64 50 69 61 6e 6f 00 00 00 00     LayeredPiano....
    102e:	4c 61 74 69 6e 50 69 61 6e 6f 00 00 00 00 00 00     LatinPiano......
    103e:	46 6d 54 68 69 6e 00 00 00 00 00 00 00 00 00 00     FmThin..........
    104e:	52 64 78 4f 70 65 72 61 74 6f 72 00 00 00 00 00     RdxOperator.....
    105e:	54 77 69 6e 45 6c 65 63 74 72 6f 00 00 00 00 00     TwinElectro.....
    106e:	53 74 61 67 65 4d 69 78 00 00 00 00 00 00 00 00     StageMix........
    107e:	48 75 67 65 46 4d 00 00 00 00 00 00 00 00 00 00     HugeFM..........
    108e:	44 69 67 69 74 69 6e 65 00 00 00 00 00 00 00 00     Digitine........
    109e:	47 6c 61 73 73 68 6f 75 73 65 00 00 00 00 00 00     Glasshouse......
    10ae:	46 61 6e 74 61 73 79 6c 61 6e 64 00 00 00 00 00     Fantasyland.....
    10be:	49 74 61 6c 69 61 6e 50 6f 73 69 74 69 76 65 00     ItalianPositive.
    10ce:	50 72 69 6e 63 69 70 61 6c 26 4f 63 74 76 00 00     Principal&Octv..
    10de:	46 75 6c 6c 4f 72 67 61 6e 00 00 00 00 00 00 00     FullOrgan.......
    10ee:	43 68 6f 72 75 73 42 33 00 00 00 00 00 00 00 00     ChorusB3........
    10fe:	48 6f 74 4f 72 67 61 6e 00 00 00 00 00 00 00 00     HotOrgan........
    110e:	31 36 2d 38 2d 35 00 00 00 00 00 00 00 00 00 00     16-8-5..........
    111e:	50 69 70 65 4f 63 74 61 76 65 00 00 00 00 00 00     PipeOctave......
    112e:	54 6f 6e 65 77 68 65 65 6c 00 00 00 00 00 00 00     Tonewheel.......
    113e:	4d 6f 76 69 65 4f 72 67 61 6e 00 00 00 00 00 00     MovieOrgan......
    114e:	46 61 73 74 44 72 61 77 62 61 72 73 00 00 00 00     FastDrawbars....
    115e:	43 61 72 6f 75 73 65 6c 4f 72 67 00 00 00 00 00     CarouselOrg.....
    116e:	44 69 61 74 6f 6e 69 63 00 00 00 00 00 00 00 00     Diatonic........
    117e:	42 6c 75 65 73 48 61 72 70 00 00 00 00 00 00 00     BluesHarp.......
    118e:	43 6f 6e 73 65 72 76 61 74 6f 72 79 00 00 00 00     Conservatory....
    119e:	43 6c 61 73 73 69 63 42 72 69 67 68 74 00 00 00     ClassicBright...
    11ae:	54 68 69 6e 46 6f 6c 6b 00 00 00 00 00 00 00 00     ThinFolk........
    11be:	4a 61 7a 7a 4f 63 74 61 76 65 00 00 00 00 00 00     JazzOctave......
    11ce:	4d 75 74 65 64 57 68 61 00 00 00 00 00 00 00 00     MutedWha........
    11de:	52 6f 63 6b 53 74 72 61 74 00 00 00 00 00 00 00     RockStrat.......
    11ee:	53 74 72 50 6f 77 65 72 00 00 00 00 00 00 00 00     StrPower........
    11fe:	56 61 6c 76 65 4c 65 61 64 00 00 00 00 00 00 00     ValveLead.......
    120e:	53 6d 6f 6f 74 68 45 6c 65 63 74 72 6f 00 00 00     SmoothElectro...
    121e:	53 74 72 61 74 26 46 6f 6c 6b 00 00 00 00 00 00     Strat&Folk......
    122e:	4f 70 65 6e 43 6f 75 6e 74 72 79 00 00 00 00 00     OpenCountry.....
    123e:	47 6f 6c 64 65 6e 53 74 65 65 6c 00 00 00 00 00     GoldenSteel.....
    124e:	43 6e 74 72 79 44 65 74 75 6e 65 00 00 00 00 00     CntryDetune.....
    125e:	41 63 6f 75 73 74 2e 50 69 63 6b 69 6e 67 00 00     Acoust.Picking..
    126e:	54 77 69 6e 46 6f 6c 6b 00 00 00 00 00 00 00 00     TwinFolk........
    127e:	47 69 70 73 79 00 00 00 00 00 00 00 00 00 00 00     Gipsy...........
    128e:	42 72 61 7a 69 6c 69 61 6e 00 00 00 00 00 00 00     Brazilian.......
    129e:	52 6f 63 6b 61 62 69 6c 6c 79 00 00 00 00 00 00     Rockabilly......
    12ae:	46 75 6e 6b 42 61 73 73 00 00 00 00 00 00 00 00     FunkBass........
    12be:	4d 61 78 69 70 69 63 6b 00 00 00 00 00 00 00 00     Maxipick........
    12ce:	4f 6f 68 4d 69 78 00 00 00 00 00 00 00 00 00 00     OohMix..........
    12de:	44 75 68 47 72 6f 75 70 00 00 00 00 00 00 00 00     DuhGroup........
    12ee:	44 61 68 51 75 61 72 74 65 74 00 00 00 00 00 00     DahQuartet......
    12fe:	4c 61 68 54 72 69 6f 00 00 00 00 00 00 00 00 00     LahTrio.........
    130e:	56 6f 63 61 6c 5f 50 72 61 69 73 65 00 00 00 00     Vocal_Praise....
    131e:	43 69 6e 65 6d 61 53 74 72 69 6e 67 73 00 00 00     CinemaStrings...
    132e:	53 63 6f 72 65 00 00 00 00 00 00 00 00 00 00 00     Score...........
    133e:	41 61 68 4d 69 78 00 00 00 00 00 00 00 00 00 00     AahMix..........
    134e:	48 75 6d 6d 69 6e 67 00 00 00 00 00 00 00 00 00     Humming.........
    135e:	4c 61 68 43 68 6f 69 72 00 00 00 00 00 00 00 00     LahChoir........
    136e:	4c 61 68 4d 65 6c 6c 6f 43 68 6f 69 72 00 00 00     LahMelloChoir...
    137e:	43 68 75 72 63 68 43 68 6f 69 72 00 00 00 00 00     ChurchChoir.....
    138e:	4e 69 67 68 74 56 6f 63 61 6c 73 00 00 00 00 00     NightVocals.....
    139e:	4d 6d 68 00 00 00 00 00 00 00 00 00 00 00 00 00     Mmh.............
    13ae:	42 6f 6f 6d 26 55 61 70 00 00 00 00 00 00 00 00     Boom&Uap........
    13be:	48 6f 72 6e 43 72 65 73 63 65 6e 64 6f 00 00 00     HornCrescendo...
    13ce:	45 6d 70 65 72 6f 72 42 72 61 73 73 00 00 00 00     EmperorBrass....
    13de:	44 72 79 54 65 6e 6f 72 00 00 00 00 00 00 00 00     DryTenor........
    13ee:	53 61 78 43 6c 75 62 00 00 00 00 00 00 00 00 00     SaxClub.........
    13fe:	53 77 69 6e 67 54 65 6e 6f 72 00 00 00 00 00 00     SwingTenor......
    140e:	42 61 72 69 74 6f 6e 65 00 00 00 00 00 00 00 00     Baritone........
    141e:	47 6c 65 6e 6e 53 61 78 00 00 00 00 00 00 00 00     GlennSax........
    142e:	42 6f 6f 67 69 65 53 61 78 00 00 00 00 00 00 00     BoogieSax.......
    143e:	4f 63 74 61 73 61 78 00 00 00 00 00 00 00 00 00     Octasax.........
    144e:	43 6f 75 6e 74 69 65 53 61 78 00 00 00 00 00 00     CountieSax......
    145e:	53 61 78 53 65 63 74 69 6f 6e 00 00 00 00 00 00     SaxSection......
    146e:	53 61 78 65 73 00 00 00 00 00 00 00 00 00 00 00     Saxes...........
    147e:	42 69 6c 6c 79 53 61 78 00 00 00 00 00 00 00 00     BillySax........
    148e:	50 6f 70 53 61 78 00 00 00 00 00 00 00 00 00 00     PopSax..........
    149e:	4c 75 74 65 00 00 00 00 00 00 00 00 00 00 00 00     Lute............
    14ae:	4d 61 6e 64 6f 6c 61 00 00 00 00 00 00 00 00 00     Mandola.........
    14be:	4c 61 74 69 6e 48 61 72 70 00 00 00 00 00 00 00     LatinHarp.......
    14ce:	50 6f 72 74 75 67 75 65 73 65 00 00 00 00 00 00     Portuguese......
    14de:	46 69 6e 67 65 72 65 64 26 53 6c 69 64 65 00 00     Fingered&Slide..
    14ee:	46 69 6e 67 65 72 65 64 47 74 72 00 00 00 00 00     FingeredGtr.....
    14fe:	46 69 6e 67 65 72 53 6c 61 70 00 00 00 00 00 00     FingerSlap......
    150e:	50 6c 61 6e 65 74 00 00 00 00 00 00 00 00 00 00     Planet..........
    151e:	52 6f 63 6b 53 79 6e 74 68 00 00 00 00 00 00 00     RockSynth.......
    152e:	43 68 75 63 6b 00 00 00 00 00 00 00 00 00 00 00     Chuck...........
    153e:	53 6d 6f 6f 74 68 4c 65 61 64 00 00 00 00 00 00     SmoothLead......
    154e:	53 79 6e 74 68 50 6c 75 67 00 00 00 00 00 00 00     SynthPlug.......
    155e:	53 75 62 62 61 73 73 00 00 00 00 00 00 00 00 00     Subbass.........
    156e:	53 79 6e 76 6f 69 63 65 00 00 00 00 00 00 00 00     Synvoice........
    157e:	44 65 65 70 4a 61 7a 7a 00 00 00 00 00 00 00 00     DeepJazz........
    158e:	4d 65 6d 6f 72 79 53 79 6e 74 68 00 00 00 00 00     MemorySynth.....
    159e:	45 76 6f 6c 75 74 69 6f 6e 00 00 00 00 00 00 00     Evolution.......
    15ae:	53 69 64 65 72 61 6c 00 00 00 00 00 00 00 00 00     Sideral.........
    15be:	4e 6f 72 74 68 57 69 72 65 00 00 00 00 00 00 00     NorthWire.......
    15ce:	42 6c 6f 77 69 6e 67 00 00 00 00 00 00 00 00 00     Blowing.........
    15de:	41 75 72 61 6c 00 00 00 00 00 00 00 00 00 00 00     Aural...........
    15ee:	56 65 6c 76 65 74 00 00 00 00 00 00 00 00 00 00     Velvet..........
    15fe:	45 74 6e 6f 76 6f 78 00 00 00 00 00 00 00 00 00     Etnovox.........
    160e:	57 68 69 73 70 65 72 00 00 00 00 00 00 00 00 00     Whisper.........
    161e:	45 76 6f 70 61 64 00 00 00 00 00 00 00 00 00 00     Evopad..........
    162e:	50 6c 75 63 6b 69 6e 67 00 00 00 00 00 00 00 00     Plucking........
    163e:	4d 61 6c 6c 65 74 41 72 65 61 00 00 00 00 00 00     MalletArea......
    164e:	38 30 92 73 50 61 64 00 00 00 00 00 00 00 00 00     80.sPad.........
    165e:	46 6c 75 74 79 50 61 64 00 00 00 00 00 00 00 00     FlutyPad........
    166e:	4e 79 6c 6f 6e 54 68 65 6d 65 00 00 00 00 00 00     NylonTheme......
    167e:	42 6f 74 74 6c 65 64 43 68 6f 69 72 00 00 00 00     BottledChoir....
    168e:	42 72 61 73 73 48 69 74 73 00 00 00 00 00 00 00     BrassHits.......
    169e:	53 6f 75 74 68 65 72 6e 48 61 72 70 00 00 00 00     SouthernHarp....
    16ae:	55 6e 67 61 72 69 61 6e 5a 69 74 68 65 72 00 00     UngarianZither..
    16be:	41 6c 70 65 6e 43 68 6f 69 72 00 00 00 00 00 00     AlpenChoir......
    16ce:	4d 61 6c 6c 65 74 57 6f 72 6c 64 00 00 00 00 00     MalletWorld.....
    16de:	43 6f 75 6e 74 72 79 26 57 65 73 74 65 72 6e 00     Country&Western.
    16ee:	53 74 65 72 65 6f 46 6f 6c 6b 00 00 00 00 00 00     StereoFolk......
    16fe:	41 6c 70 65 6e 4d 75 73 65 74 74 65 00 00 00 00     AlpenMusette....
    170e:	4a 61 7a 7a 41 63 63 6f 72 64 69 6f 6e 00 00 00     JazzAccordion...
    171e:	42 72 69 67 68 74 4d 75 73 65 74 74 65 00 00 00     BrightMusette...
    172e:	33 33 35 4a 61 7a 7a 00 00 00 00 00 00 00 00 00     335Jazz.........
    173e:	53 6d 6f 6f 74 68 5f 42 61 73 73 00 00 00 00 00     Smooth_Bass.....
    174e:	46 75 6e 6b 79 4d 75 74 65 64 00 00 00 00 00 00     FunkyMuted......
    175e:	43 6f 75 6e 74 72 79 47 74 72 00 00 00 00 00 00     CountryGtr......
    176e:	4e 79 6c 6f 6e 5f 73 6c 69 64 65 00 00 00 00 00     Nylon_slide.....
    177e:	50 6f 77 65 72 47 75 69 74 00 00 00 00 00 00 00     PowerGuit.......
    178e:	43 6c 65 61 6e 43 68 6f 72 75 73 00 00 00 00 00     CleanChorus.....
    179e:	54 72 65 6d 6f 6c 6f 4d 61 72 6b 00 00 00 00 00     TremoloMark.....
    17ae:	50 68 61 73 65 45 6c 65 63 74 72 6f 00 00 00 00     PhaseElectro....
    17be:	4f 72 67 61 6e 4f 76 65 72 64 72 69 76 65 00 00     OrganOverdrive..
    17ce:	4d 65 74 61 6c 00 00 00 00 00 00 00 00 00 00 00     Metal...........
    17de:	44 69 73 74 6f 72 74 65 64 00 00 00 00 00 00 00     Distorted.......
    17ee:	43 72 75 6e 63 68 00 00 00 00 00 00 00 00 00 00     Crunch..........
    17fe:	4a 61 7a 7a 43 6f 6d 62 6f 00 00 00 00 00 00 00     JazzCombo.......
    180e:	45 63 68 6f 6c 65 61 64 00 00 00 00 00 00 00 00     Echolead........

0000181e <_ZL6bank_c>:
    181e:	50 69 61 6e 6f 26 53 74 72 69 6e 67 73 00 00 00     Piano&Strings...
    182e:	47 72 61 6e 64 26 50 61 64 00 00 00 00 00 00 00     Grand&Pad.......
    183e:	4f 63 74 61 70 69 61 6e 6f 00 00 00 00 00 00 00     Octapiano.......
    184e:	45 6c 65 63 74 72 6f 70 61 64 00 00 00 00 00 00     Electropad......
    185e:	4d 73 6b 00 00 00 00 00 00 00 00 00 00 00 00 00     Msk.............
    186e:	53 74 61 67 65 50 6e 6f 00 00 00 00 00 00 00 00     StagePno........
    187e:	52 6f 64 65 73 00 00 00 00 00 00 00 00 00 00 00     Rodes...........
    188e:	45 6c 6f 70 69 61 6e 6f 00 00 00 00 00 00 00 00     Elopiano........
    189e:	46 4d 4c 61 79 65 72 00 00 00 00 00 00 00 00 00     FMLayer.........
    18ae:	43 68 69 6e 65 73 65 42 65 6c 6c 00 00 00 00 00     ChineseBell.....
    18be:	53 74 65 72 65 6f 63 68 72 6f 6d 00 00 00 00 00     Stereochrom.....
    18ce:	42 72 69 67 68 74 56 69 62 65 73 00 00 00 00 00     BrightVibes.....
    18de:	54 6f 79 42 6f 78 00 00 00 00 00 00 00 00 00 00     ToyBox..........
    18ee:	4d 62 69 72 61 00 00 00 00 00 00 00 00 00 00 00     Mbira...........
    18fe:	58 4d 61 73 42 65 6c 6c 00 00 00 00 00 00 00 00     XMasBell........
    190e:	46 4d 4d 61 72 69 6d 62 61 00 00 00 00 00 00 00     FMMarimba.......
    191e:	50 6f 70 4f 72 67 61 6e 00 00 00 00 00 00 00 00     PopOrgan........
    192e:	47 6f 73 70 65 6c 00 00 00 00 00 00 00 00 00 00     Gospel..........
    193e:	50 6f 77 65 72 53 6c 6f 77 00 00 00 00 00 00 00     PowerSlow.......
    194e:	50 72 69 6e 63 69 70 61 6c 65 00 00 00 00 00 00     Principale......
    195e:	44 72 79 4f 72 67 61 6e 00 00 00 00 00 00 00 00     DryOrgan........
    196e:	41 6c 70 65 6e 00 00 00 00 00 00 00 00 00 00 00     Alpen...........
    197e:	42 65 6c 6c 6f 77 00 00 00 00 00 00 00 00 00 00     Bellow..........
    198e:	53 74 65 69 72 69 73 63 68 00 00 00 00 00 00 00     Steirisch.......
    199e:	44 79 6e 61 46 6f 6c 6b 00 00 00 00 00 00 00 00     DynaFolk........
    19ae:	43 6f 75 6e 74 72 79 46 78 00 00 00 00 00 00 00     CountryFx.......
    19be:	48 75 6d 62 75 63 6b 00 00 00 00 00 00 00 00 00     Humbuck.........
    19ce:	53 74 72 61 74 6f 46 78 00 00 00 00 00 00 00 00     StratoFx........
    19de:	41 63 2e 53 74 65 72 65 6f 00 00 00 00 00 00 00     Ac.Stereo.......
    19ee:	41 63 69 64 00 00 00 00 00 00 00 00 00 00 00 00     Acid............
    19fe:	50 6c 75 63 6b 65 64 00 00 00 00 00 00 00 00 00     Plucked.........
    1a0e:	46 6c 61 6d 65 6e 63 6f 00 00 00 00 00 00 00 00     Flamenco........
    1a1e:	41 63 6f 75 73 74 69 63 42 61 73 73 00 00 00 00     AcousticBass....
    1a2e:	42 61 73 73 26 47 75 69 74 31 00 00 00 00 00 00     Bass&Guit1......
    1a3e:	4f 62 65 72 62 61 73 31 00 00 00 00 00 00 00 00     Oberbas1........
    1a4e:	52 65 74 72 6f 42 61 73 73 00 00 00 00 00 00 00     RetroBass.......
    1a5e:	46 75 73 69 6f 6e 00 00 00 00 00 00 00 00 00 00     Fusion..........
    1a6e:	4f 62 65 72 62 61 73 32 00 00 00 00 00 00 00 00     Oberbas2........
    1a7e:	50 65 64 61 6c 62 61 73 73 00 00 00 00 00 00 00     Pedalbass.......
    1a8e:	42 61 73 73 26 47 75 69 74 32 00 00 00 00 00 00     Bass&Guit2......
    1a9e:	53 6c 6f 77 56 69 6f 6c 69 6e 00 00 00 00 00 00     SlowViolin......
    1aae:	45 6c 65 63 74 72 69 63 56 69 6f 6c 69 6e 00 00     ElectricViolin..
    1abe:	43 68 61 6d 62 65 72 00 00 00 00 00 00 00 00 00     Chamber.........
    1ace:	54 7a 69 76 61 67 6f 00 00 00 00 00 00 00 00 00     Tzivago.........
    1ade:	53 74 61 63 63 61 74 6f 00 00 00 00 00 00 00 00     Staccato........
    1aee:	53 74 72 69 6e 67 46 61 6c 6c 00 00 00 00 00 00     StringFall......
    1afe:	48 61 72 70 26 4f 72 63 68 65 73 74 72 61 00 00     Harp&Orchestra..
    1b0e:	53 79 6d 70 68 6f 6e 79 00 00 00 00 00 00 00 00     Symphony........
    1b1e:	46 75 6c 6c 45 6e 73 65 6d 62 6c 65 00 00 00 00     FullEnsemble....
    1b2e:	44 69 67 69 73 74 72 69 6e 67 00 00 00 00 00 00     Digistring......
    1b3e:	44 69 73 63 6f 53 74 72 69 6e 67 73 00 00 00 00     DiscoStrings....
    1b4e:	43 6f 75 6e 74 72 79 56 69 6f 6c 69 6e 00 00 00     CountryViolin...
    1b5e:	54 75 75 68 00 00 00 00 00 00 00 00 00 00 00 00     Tuuh............
    1b6e:	4f 6f 68 47 69 72 6c 73 00 00 00 00 00 00 00 00     OohGirls........
    1b7e:	41 61 68 47 69 72 6c 73 00 00 00 00 00 00 00 00     AahGirls........
    1b8e:	43 68 6f 69 72 00 00 00 00 00 00 00 00 00 00 00     Choir...........
    1b9e:	54 62 6f 6e 65 73 26 43 6f 72 6e 65 74 00 00 00     Tbones&Cornet...
    1bae:	53 6c 69 64 65 54 72 6f 6d 62 6f 6e 65 00 00 00     SlideTrombone...
    1bbe:	44 69 78 69 65 54 70 74 00 00 00 00 00 00 00 00     DixieTpt........
    1bce:	4f 70 65 6e 48 6f 72 6e 00 00 00 00 00 00 00 00     OpenHorn........
    1bde:	42 72 61 73 73 46 61 6c 6c 4f 66 66 00 00 00 00     BrassFallOff....
    1bee:	48 6f 72 6e 50 61 64 00 00 00 00 00 00 00 00 00     HornPad.........
    1bfe:	4d 75 6c 74 69 42 72 61 73 73 00 00 00 00 00 00     MultiBrass......
    1c0e:	42 72 61 73 73 43 6f 6f 6c 00 00 00 00 00 00 00     BrassCool.......
    1c1e:	41 6c 74 6f 73 61 78 00 00 00 00 00 00 00 00 00     Altosax.........
    1c2e:	4a 61 7a 7a 41 6c 74 6f 00 00 00 00 00 00 00 00     JazzAlto........
    1c3e:	41 6c 74 6f 53 74 72 61 69 67 68 74 00 00 00 00     AltoStraight....
    1c4e:	52 6f 63 6b 53 61 78 00 00 00 00 00 00 00 00 00     RockSax.........
    1c5e:	53 75 70 65 72 68 6f 72 6e 00 00 00 00 00 00 00     Superhorn.......
    1c6e:	54 70 74 53 6c 69 64 65 55 70 00 00 00 00 00 00     TptSlideUp......
    1c7e:	44 72 79 54 72 75 6d 70 65 74 00 00 00 00 00 00     DryTrumpet......
    1c8e:	54 72 75 6d 70 65 74 53 65 63 74 69 6f 6e 00 00     TrumpetSection..
    1c9e:	4f 70 65 6e 54 72 6f 6d 62 6f 6e 65 73 00 00 00     OpenTrombones...
    1cae:	49 72 69 73 68 46 6c 75 74 65 00 00 00 00 00 00     IrishFlute......
    1cbe:	53 74 61 63 63 61 74 6f 46 6c 75 74 65 00 00 00     StaccatoFlute...
    1cce:	41 73 69 61 6e 46 6c 75 74 65 00 00 00 00 00 00     AsianFlute......
    1cde:	46 69 66 65 00 00 00 00 00 00 00 00 00 00 00 00     Fife............
    1cee:	45 74 68 6e 69 63 46 6c 75 74 65 00 00 00 00 00     EthnicFlute.....
    1cfe:	53 74 61 63 63 61 74 6f 57 68 69 73 74 6c 65 00     StaccatoWhistle.
    1d0e:	50 69 70 65 00 00 00 00 00 00 00 00 00 00 00 00     Pipe............
    1d1e:	53 6f 6c 6f 44 61 6e 63 65 00 00 00 00 00 00 00     SoloDance.......
    1d2e:	4a 75 69 63 79 00 00 00 00 00 00 00 00 00 00 00     Juicy...........
    1d3e:	44 72 61 6d 61 00 00 00 00 00 00 00 00 00 00 00     Drama...........
    1d4e:	4f 64 69 73 73 65 79 00 00 00 00 00 00 00 00 00     Odissey.........
    1d5e:	4d 69 6e 69 6d 75 67 00 00 00 00 00 00 00 00 00     Minimug.........
    1d6e:	41 74 74 61 63 6b 00 00 00 00 00 00 00 00 00 00     Attack..........
    1d7e:	50 68 61 6e 74 6f 6d 00 00 00 00 00 00 00 00 00     Phantom.........
    1d8e:	53 6f 6c 6f 69 73 74 00 00 00 00 00 00 00 00 00     Soloist.........
    1d9e:	57 61 72 6d 6e 65 73 73 00 00 00 00 00 00 00 00     Warmness........
    1dae:	45 78 70 6c 6f 72 65 72 00 00 00 00 00 00 00 00     Explorer........
    1dbe:	43 68 6f 72 61 6c 00 00 00 00 00 00 00 00 00 00     Choral..........
    1dce:	43 79 62 65 72 00 00 00 00 00 00 00 00 00 00 00     Cyber...........
    1dde:	4d 61 67 69 63 00 00 00 00 00 00 00 00 00 00 00     Magic...........
    1dee:	47 6c 6f 63 6b 70 61 64 00 00 00 00 00 00 00 00     Glockpad........
    1dfe:	53 74 72 65 61 6d 00 00 00 00 00 00 00 00 00 00     Stream..........
    1e0e:	44 69 67 69 50 72 6f 00 00 00 00 00 00 00 00 00     DigiPro.........
    1e1e:	55 73 50 61 64 00 00 00 00 00 00 00 00 00 00 00     UsPad...........
    1e2e:	42 6f 74 74 6c 65 64 41 69 72 00 00 00 00 00 00     BottledAir......
    1e3e:	42 65 6c 6c 76 6f 78 00 00 00 00 00 00 00 00 00     Bellvox.........
    1e4e:	44 69 67 69 50 61 64 00 00 00 00 00 00 00 00 00     DigiPad.........
    1e5e:	53 79 6e 74 61 78 00 00 00 00 00 00 00 00 00 00     Syntax..........
    1e6e:	42 72 69 67 68 74 41 6e 61 6c 6f 67 00 00 00 00     BrightAnalog....
    1e7e:	41 75 72 61 50 61 64 00 00 00 00 00 00 00 00 00     AuraPad.........
    1e8e:	41 63 6f 75 73 74 69 63 44 72 65 61 6d 00 00 00     AcousticDream...
    1e9e:	54 72 65 73 00 00 00 00 00 00 00 00 00 00 00 00     Tres............
    1eae:	42 61 6e 6a 6f 35 53 74 72 69 6e 67 00 00 00 00     Banjo5String....
    1ebe:	46 75 74 6f 7a 61 6f 00 00 00 00 00 00 00 00 00     Futozao.........
    1ece:	48 61 63 6b 62 72 65 74 74 00 00 00 00 00 00 00     Hackbrett.......
    1ede:	50 61 72 61 67 75 61 79 61 6e 48 61 72 70 00 00     ParaguayanHarp..
    1eee:	53 68 6f 72 74 4d 61 6e 64 6f 6c 69 6e 00 00 00     ShortMandolin...
    1efe:	48 61 72 70 47 6c 69 73 73 61 6e 64 6f 00 00 00     HarpGlissando...
    1f0e:	42 6f 75 7a 75 6b 69 00 00 00 00 00 00 00 00 00     Bouzuki.........
    1f1e:	54 69 6e 6b 6c 65 73 00 00 00 00 00 00 00 00 00     Tinkles.........
    1f2e:	54 72 69 61 6e 67 6c 65 00 00 00 00 00 00 00 00     Triangle........
    1f3e:	54 61 6d 62 6f 72 61 00 00 00 00 00 00 00 00 00     Tambora.........
    1f4e:	43 6c 61 76 65 73 00 00 00 00 00 00 00 00 00 00     Claves..........
    1f5e:	41 63 2e 54 6f 6d 00 00 00 00 00 00 00 00 00 00     Ac.Tom..........
    1f6e:	42 72 75 73 68 74 6f 6d 00 00 00 00 00 00 00 00     Brushtom........
    1f7e:	53 6e 61 72 65 00 00 00 00 00 00 00 00 00 00 00     Snare...........
    1f8e:	43 72 61 73 68 00 00 00 00 00 00 00 00 00 00 00     Crash...........
    1f9e:	53 63 72 61 74 63 68 31 00 00 00 00 00 00 00 00     Scratch1........
    1fae:	53 63 72 61 74 63 68 32 00 00 00 00 00 00 00 00     Scratch2........
    1fbe:	53 63 72 61 74 63 68 33 00 00 00 00 00 00 00 00     Scratch3........
    1fce:	53 63 72 61 74 63 68 34 00 00 00 00 00 00 00 00     Scratch4........
    1fde:	53 63 72 61 74 63 68 35 00 00 00 00 00 00 00 00     Scratch5........
    1fee:	46 78 53 6c 61 70 00 00 00 00 00 00 00 00 00 00     FxSlap..........
    1ffe:	4c 61 73 65 72 00 00 00 00 00 00 00 00 00 00 00     Laser...........
    200e:	57 69 6e 64 00 00 00 00 00 00 00 00 00 00 00 00     Wind............

0000201e <_ZL6bank_b>:
    201e:	4a 69 6e 67 6c 65 00 00 00 00 00 00 00 00 00 00     Jingle..........
    202e:	44 61 72 6b 47 72 61 6e 64 00 00 00 00 00 00 00     DarkGrand.......
    203e:	48 6f 75 73 65 00 00 00 00 00 00 00 00 00 00 00     House...........
    204e:	53 75 69 74 63 61 73 65 00 00 00 00 00 00 00 00     Suitcase........
    205e:	4d 61 72 6b 00 00 00 00 00 00 00 00 00 00 00 00     Mark............
    206e:	46 75 6e 6b 44 78 00 00 00 00 00 00 00 00 00 00     FunkDx..........
    207e:	46 6d 54 69 6e 65 00 00 00 00 00 00 00 00 00 00     FmTine..........
    208e:	44 58 50 69 61 6e 6f 00 00 00 00 00 00 00 00 00     DXPiano.........
    209e:	54 6f 79 50 61 64 00 00 00 00 00 00 00 00 00 00     ToyPad..........
    20ae:	4f 72 63 68 2e 42 65 6c 6c 00 00 00 00 00 00 00     Orch.Bell.......
    20be:	4d 61 6c 6c 65 74 00 00 00 00 00 00 00 00 00 00     Mallet..........
    20ce:	53 68 6f 72 74 56 69 62 65 00 00 00 00 00 00 00     ShortVibe.......
    20de:	4b 61 72 69 6d 62 61 00 00 00 00 00 00 00 00 00     Karimba.........
    20ee:	45 74 6e 6f 77 6f 6f 64 00 00 00 00 00 00 00 00     Etnowood........
    20fe:	4d 65 74 61 6c 6c 6f 70 68 6f 6e 65 00 00 00 00     Metallophone....
    210e:	57 69 6e 64 63 68 69 6d 65 73 00 00 00 00 00 00     Windchimes......
    211e:	52 6f 74 6f 72 46 61 00 00 00 00 00 00 00 00 00     RotorFa.........
    212e:	4a 61 7a 7a 4f 72 67 61 6e 00 00 00 00 00 00 00     JazzOrgan.......
    213e:	44 72 61 77 62 61 72 00 00 00 00 00 00 00 00 00     Drawbar.........
    214e:	50 6f 73 69 74 69 76 65 00 00 00 00 00 00 00 00     Positive........
    215e:	46 72 65 6e 63 68 4d 75 73 65 74 74 65 00 00 00     FrenchMusette...
    216e:	46 72 61 6e 63 61 69 73 65 00 00 00 00 00 00 00     Francaise.......
    217e:	43 61 73 73 6f 74 74 6f 00 00 00 00 00 00 00 00     Cassotto........
    218e:	54 61 6e 67 6f 00 00 00 00 00 00 00 00 00 00 00     Tango...........
    219e:	43 6c 61 73 73 69 63 00 00 00 00 00 00 00 00 00     Classic.........
    21ae:	46 6f 6c 6b 00 00 00 00 00 00 00 00 00 00 00 00     Folk............
    21be:	46 75 6e 6b 53 74 72 61 74 00 00 00 00 00 00 00     FunkStrat.......
    21ce:	36 30 27 53 74 6f 70 70 65 64 00 00 00 00 00 00     60'Stopped......
    21de:	4d 75 74 65 64 76 65 6c 6f 00 00 00 00 00 00 00     Mutedvelo.......
    21ee:	56 69 6e 74 61 67 65 00 00 00 00 00 00 00 00 00     Vintage.........
    21fe:	31 32 53 74 72 69 6e 67 73 00 00 00 00 00 00 00     12Strings.......
    220e:	53 6f 6c 69 64 62 6f 64 79 00 00 00 00 00 00 00     Solidbody.......
    221e:	57 61 72 6d 42 61 73 73 00 00 00 00 00 00 00 00     WarmBass........
    222e:	46 6f 6c 6b 42 61 73 73 00 00 00 00 00 00 00 00     FolkBass........
    223e:	4d 75 74 65 42 61 73 73 00 00 00 00 00 00 00 00     MuteBass........
    224e:	44 65 65 70 42 61 73 73 00 00 00 00 00 00 00 00     DeepBass........
    225e:	50 72 65 63 69 73 69 6f 6e 00 00 00 00 00 00 00     Precision.......
    226e:	52 65 73 6f 42 61 73 73 00 00 00 00 00 00 00 00     ResoBass........
    227e:	53 61 77 42 61 73 73 00 00 00 00 00 00 00 00 00     SawBass.........
    228e:	48 6f 75 73 65 42 61 73 73 00 00 00 00 00 00 00     HouseBass.......
    229e:	50 68 69 6c 61 72 6d 6f 6e 69 63 00 00 00 00 00     Philarmonic.....
    22ae:	51 75 61 72 74 65 74 00 00 00 00 00 00 00 00 00     Quartet.........
    22be:	47 6c 6f 63 6b 53 74 72 69 6e 67 00 00 00 00 00     GlockString.....
    22ce:	4f 63 74 61 53 74 72 69 6e 67 73 31 00 00 00 00     OctaStrings1....
    22de:	4f 63 74 61 53 74 72 69 6e 67 73 32 00 00 00 00     OctaStrings2....
    22ee:	4d 61 72 63 61 74 6f 00 00 00 00 00 00 00 00 00     Marcato.........
    22fe:	53 74 72 69 6e 67 26 46 61 6c 6c 00 00 00 00 00     String&Fall.....
    230e:	53 6c 6f 77 41 72 63 6f 73 00 00 00 00 00 00 00     SlowArcos.......
    231e:	42 6f 77 65 64 53 74 72 69 6e 67 73 00 00 00 00     BowedStrings....
    232e:	44 61 72 6b 53 74 72 69 6e 67 73 00 00 00 00 00     DarkStrings.....
    233e:	44 61 68 00 00 00 00 00 00 00 00 00 00 00 00 00     Dah.............
    234e:	43 6c 61 73 73 69 63 43 68 6f 69 72 00 00 00 00     ClassicChoir....
    235e:	4d 65 6e 5f 44 6f 6f 00 00 00 00 00 00 00 00 00     Men_Doo.........
    236e:	47 69 72 6c 5f 44 6f 6f 00 00 00 00 00 00 00 00     Girl_Doo........
    237e:	4c 61 61 68 00 00 00 00 00 00 00 00 00 00 00 00     Laah............
    238e:	56 6f 69 63 65 73 00 00 00 00 00 00 00 00 00 00     Voices..........
    239e:	53 77 69 6e 67 54 70 74 00 00 00 00 00 00 00 00     SwingTpt........
    23ae:	43 6f 72 6e 65 74 00 00 00 00 00 00 00 00 00 00     Cornet..........
    23be:	45 75 70 68 6f 6e 69 75 6d 00 00 00 00 00 00 00     Euphonium.......
    23ce:	4d 69 6c 65 73 54 70 74 00 00 00 00 00 00 00 00     MilesTpt........
    23de:	46 6c 75 67 68 6f 72 6e 00 00 00 00 00 00 00 00     Flughorn........
    23ee:	53 74 65 72 65 6f 42 72 61 73 73 00 00 00 00 00     StereoBrass.....
    23fe:	47 72 6f 77 42 72 61 73 00 00 00 00 00 00 00 00     GrowBras........
    240e:	4f 63 74 61 62 72 61 73 73 00 00 00 00 00 00 00     Octabrass.......
    241e:	53 6f 70 72 61 6e 6f 00 00 00 00 00 00 00 00 00     Soprano.........
    242e:	43 69 72 63 75 73 53 61 78 00 00 00 00 00 00 00     CircusSax.......
    243e:	4c 6f 75 6e 67 65 54 65 6e 6f 72 00 00 00 00 00     LoungeTenor.....
    244e:	47 72 6f 77 6c 53 61 78 00 00 00 00 00 00 00 00     GrowlSax........
    245e:	4d 65 6c 6f 54 72 75 6d 70 65 74 00 00 00 00 00     MeloTrumpet.....
    246e:	48 6f 72 6e 53 77 65 6c 6c 00 00 00 00 00 00 00     HornSwell.......
    247e:	54 72 75 6d 70 65 74 73 00 00 00 00 00 00 00 00     Trumpets........
    248e:	53 6f 66 74 54 72 6f 6d 62 6f 6e 65 73 00 00 00     SoftTrombones...
    249e:	4c 61 74 69 6e 46 6c 75 74 65 00 00 00 00 00 00     LatinFlute......
    24ae:	50 6f 70 46 6c 75 74 65 00 00 00 00 00 00 00 00     PopFlute........
    24be:	41 6e 64 65 73 00 00 00 00 00 00 00 00 00 00 00     Andes...........
    24ce:	56 6f 69 63 65 46 6c 75 74 65 00 00 00 00 00 00     VoiceFlute......
    24de:	41 6e 61 6c 6f 67 73 00 00 00 00 00 00 00 00 00     Analogs.........
    24ee:	46 6c 61 6e 67 65 72 00 00 00 00 00 00 00 00 00     Flanger.........
    24fe:	42 72 69 67 68 74 70 61 64 00 00 00 00 00 00 00     Brightpad.......
    250e:	57 69 72 69 6e 67 00 00 00 00 00 00 00 00 00 00     Wiring..........
    251e:	57 6f 77 00 00 00 00 00 00 00 00 00 00 00 00 00     Wow.............
    252e:	50 6f 6c 79 73 79 6e 74 68 00 00 00 00 00 00 00     Polysynth.......
    253e:	54 72 61 6e 63 65 00 00 00 00 00 00 00 00 00 00     Trance..........
    254e:	57 61 76 65 00 00 00 00 00 00 00 00 00 00 00 00     Wave............
    255e:	52 61 76 65 42 61 73 73 00 00 00 00 00 00 00 00     RaveBass........
    256e:	4d 6f 64 75 6c 61 72 42 61 73 73 00 00 00 00 00     ModularBass.....
    257e:	50 65 72 63 75 73 73 69 76 65 42 61 73 73 00 00     PercussiveBass..
    258e:	57 69 6c 64 42 61 73 73 00 00 00 00 00 00 00 00     WildBass........
    259e:	32 6e 64 50 65 72 63 00 00 00 00 00 00 00 00 00     2ndPerc.........
    25ae:	33 74 68 50 65 72 63 00 00 00 00 00 00 00 00 00     3thPerc.........
    25be:	50 6f 77 65 72 46 61 00 00 00 00 00 00 00 00 00     PowerFa.........
    25ce:	54 6f 6e 65 62 61 72 00 00 00 00 00 00 00 00 00     Tonebar.........
    25de:	44 61 72 6b 42 33 00 00 00 00 00 00 00 00 00 00     DarkB3..........
    25ee:	4a 69 6d 6d 79 4f 72 67 2e 00 00 00 00 00 00 00     JimmyOrg........
    25fe:	4c 6f 77 65 72 38 2d 34 00 00 00 00 00 00 00 00     Lower8-4........
    260e:	4a 61 7a 7a 79 00 00 00 00 00 00 00 00 00 00 00     Jazzy...........
    261e:	50 6f 70 53 74 72 61 74 00 00 00 00 00 00 00 00     PopStrat........
    262e:	54 65 6c 65 63 61 00 00 00 00 00 00 00 00 00 00     Teleca..........
    263e:	53 74 72 61 74 6f 00 00 00 00 00 00 00 00 00 00     Strato..........
    264e:	54 65 78 61 73 00 00 00 00 00 00 00 00 00 00 00     Texas...........
    265e:	57 65 73 74 65 72 6e 00 00 00 00 00 00 00 00 00     Western.........
    266e:	46 69 6e 67 65 72 70 69 63 6b 00 00 00 00 00 00     Fingerpick......
    267e:	35 74 68 53 74 6f 70 73 00 00 00 00 00 00 00 00     5thStops........
    268e:	57 68 61 67 75 69 74 61 72 00 00 00 00 00 00 00     Whaguitar.......
    269e:	48 61 77 61 69 61 6e 00 00 00 00 00 00 00 00 00     Hawaian.........
    26ae:	4d 61 6e 64 6f 6c 69 6e 00 00 00 00 00 00 00 00     Mandolin........
    26be:	44 6a 61 6e 67 6f 00 00 00 00 00 00 00 00 00 00     Django..........
    26ce:	43 6c 61 73 73 69 63 46 78 00 00 00 00 00 00 00     ClassicFx.......
    26de:	50 65 64 61 6c 73 74 65 65 6c 00 00 00 00 00 00     Pedalsteel......
    26ee:	52 6f 63 6b 26 52 6f 6c 6c 00 00 00 00 00 00 00     Rock&Roll.......
    26fe:	52 65 65 64 38 00 00 00 00 00 00 00 00 00 00 00     Reed8...........
    270e:	46 69 73 61 38 00 00 00 00 00 00 00 00 00 00 00     Fisa8...........
    271e:	47 61 74 65 67 72 6f 75 70 00 00 00 00 00 00 00     Gategroup.......
    272e:	41 6d 61 7a 69 6e 67 00 00 00 00 00 00 00 00 00     Amazing.........
    273e:	48 6f 75 73 65 73 79 6e 74 68 00 00 00 00 00 00     Housesynth......
    274e:	52 65 73 6f 6e 61 6e 63 65 00 00 00 00 00 00 00     Resonance.......
    275e:	4b 65 79 4c 65 61 64 00 00 00 00 00 00 00 00 00     KeyLead.........
    276e:	4a 75 6e 6f 53 79 6e 74 68 00 00 00 00 00 00 00     JunoSynth.......
    277e:	4f 62 78 50 6f 6c 79 00 00 00 00 00 00 00 00 00     ObxPoly.........
    278e:	4a 58 42 72 61 73 73 00 00 00 00 00 00 00 00 00     JXBrass.........
    279e:	41 6c 61 72 6d 26 53 69 72 65 6e 65 00 00 00 00     Alarm&Sirene....
    27ae:	4a 65 74 00 00 00 00 00 00 00 00 00 00 00 00 00     Jet.............
    27be:	50 66 69 66 26 4a 65 77 5f 48 61 72 70 00 00 00     Pfif&Jew_Harp...
    27ce:	52 61 69 6e 00 00 00 00 00 00 00 00 00 00 00 00     Rain............
    27de:	56 6f 63 61 6c 73 00 00 00 00 00 00 00 00 00 00     Vocals..........
    27ee:	54 68 75 6e 64 65 72 00 00 00 00 00 00 00 00 00     Thunder.........
    27fe:	54 72 61 69 6e 00 00 00 00 00 00 00 00 00 00 00     Train...........
    280e:	53 77 65 65 70 00 00 00 00 00 00 00 00 00 00 00     Sweep...........

0000281e <_ZL6bank_a>:
    281e:	47 72 61 6e 64 50 69 61 6e 6f 00 00 00 00 00 00     GrandPiano......
    282e:	52 6f 63 6b 50 69 61 6e 6f 00 00 00 00 00 00 00     RockPiano.......
    283e:	45 6c 65 63 74 72 69 63 00 00 00 00 00 00 00 00     Electric........
    284e:	48 6f 6e 6b 79 2d 74 6f 6e 6b 00 00 00 00 00 00     Honky-tonk......
    285e:	45 6c 2e 50 69 61 6e 6f 31 00 00 00 00 00 00 00     El.Piano1.......
    286e:	45 6c 2e 50 69 61 6e 6f 32 00 00 00 00 00 00 00     El.Piano2.......
    287e:	48 61 72 70 73 69 63 68 6f 72 64 00 00 00 00 00     Harpsichord.....
    288e:	43 6c 61 76 69 00 00 00 00 00 00 00 00 00 00 00     Clavi...........
    289e:	43 65 6c 65 73 74 61 00 00 00 00 00 00 00 00 00     Celesta.........
    28ae:	47 6c 6f 63 6b 65 6e 73 70 69 65 6c 00 00 00 00     Glockenspiel....
    28be:	4d 75 73 69 63 42 6f 78 00 00 00 00 00 00 00 00     MusicBox........
    28ce:	56 69 62 72 61 70 68 6f 6e 65 00 00 00 00 00 00     Vibraphone......
    28de:	4d 61 72 69 6d 62 61 00 00 00 00 00 00 00 00 00     Marimba.........
    28ee:	58 79 6c 6f 70 68 6f 6e 65 00 00 00 00 00 00 00     Xylophone.......
    28fe:	54 75 62 75 6c 61 72 62 65 6c 6c 73 00 00 00 00     Tubularbells....
    290e:	44 75 6c 63 69 6d 65 72 00 00 00 00 00 00 00 00     Dulcimer........
    291e:	52 6f 74 61 72 79 00 00 00 00 00 00 00 00 00 00     Rotary..........
    292e:	50 65 72 63 75 73 73 69 76 65 00 00 00 00 00 00     Percussive......
    293e:	52 6f 63 6b 4f 72 67 61 6e 00 00 00 00 00 00 00     RockOrgan.......
    294e:	43 68 75 72 63 68 00 00 00 00 00 00 00 00 00 00     Church..........
    295e:	54 68 65 61 74 72 65 00 00 00 00 00 00 00 00 00     Theatre.........
    296e:	4d 75 73 65 74 74 65 00 00 00 00 00 00 00 00 00     Musette.........
    297e:	48 61 72 6d 6f 6e 69 63 61 00 00 00 00 00 00 00     Harmonica.......
    298e:	42 61 6e 64 6f 6e 65 6f 6e 00 00 00 00 00 00 00     Bandoneon.......
    299e:	4e 79 6c 6f 6e 00 00 00 00 00 00 00 00 00 00 00     Nylon...........
    29ae:	53 74 65 65 6c 00 00 00 00 00 00 00 00 00 00 00     Steel...........
    29be:	4a 61 7a 7a 00 00 00 00 00 00 00 00 00 00 00 00     Jazz............
    29ce:	43 6c 65 61 6e 00 00 00 00 00 00 00 00 00 00 00     Clean...........
    29de:	4d 75 74 65 64 00 00 00 00 00 00 00 00 00 00 00     Muted...........
    29ee:	4f 76 65 72 64 72 69 76 65 00 00 00 00 00 00 00     Overdrive.......
    29fe:	44 69 73 74 6f 72 74 65 64 00 00 00 00 00 00 00     Distorted.......
    2a0e:	48 61 72 6d 6f 6e 69 63 73 00 00 00 00 00 00 00     Harmonics.......
    2a1e:	41 63 6f 75 73 74 69 63 00 00 00 00 00 00 00 00     Acoustic........
    2a2e:	46 69 6e 67 65 72 00 00 00 00 00 00 00 00 00 00     Finger..........
    2a3e:	50 69 63 6b 65 64 00 00 00 00 00 00 00 00 00 00     Picked..........
    2a4e:	46 72 65 74 6c 65 73 73 00 00 00 00 00 00 00 00     Fretless........
    2a5e:	53 6c 61 70 42 61 73 73 00 00 00 00 00 00 00 00     SlapBass........
    2a6e:	53 6c 61 70 42 61 73 73 00 00 00 00 00 00 00 00     SlapBass........
    2a7e:	53 79 6e 62 61 73 00 00 00 00 00 00 00 00 00 00     Synbas..........
    2a8e:	53 79 6e 62 61 73 00 00 00 00 00 00 00 00 00 00     Synbas..........
    2a9e:	56 69 6f 6c 69 6e 00 00 00 00 00 00 00 00 00 00     Violin..........
    2aae:	56 69 6f 6c 61 00 00 00 00 00 00 00 00 00 00 00     Viola...........
    2abe:	43 65 6c 6c 6f 00 00 00 00 00 00 00 00 00 00 00     Cello...........
    2ace:	43 6f 6e 74 72 61 62 61 73 73 00 00 00 00 00 00     Contrabass......
    2ade:	54 72 65 6d 6f 6c 6f 00 00 00 00 00 00 00 00 00     Tremolo.........
    2aee:	50 69 7a 7a 69 63 61 74 6f 00 00 00 00 00 00 00     Pizzicato.......
    2afe:	48 61 72 70 00 00 00 00 00 00 00 00 00 00 00 00     Harp............
    2b0e:	54 69 6d 70 61 6e 69 00 00 00 00 00 00 00 00 00     Timpani.........
    2b1e:	53 74 72 69 6e 67 73 45 6e 73 00 00 00 00 00 00     StringsEns......
    2b2e:	53 6c 6f 77 53 74 72 69 6e 67 73 00 00 00 00 00     SlowStrings.....
    2b3e:	53 79 6e 53 74 72 69 6e 67 73 00 00 00 00 00 00     SynStrings......
    2b4e:	53 79 6e 53 74 72 69 6e 67 73 00 00 00 00 00 00     SynStrings......
    2b5e:	43 68 6f 69 72 41 61 68 00 00 00 00 00 00 00 00     ChoirAah........
    2b6e:	56 6f 69 63 65 4f 6f 68 00 00 00 00 00 00 00 00     VoiceOoh........
    2b7e:	53 79 6e 74 68 56 6f 69 63 65 00 00 00 00 00 00     SynthVoice......
    2b8e:	48 69 74 73 00 00 00 00 00 00 00 00 00 00 00 00     Hits............
    2b9e:	54 72 75 6d 70 65 74 00 00 00 00 00 00 00 00 00     Trumpet.........
    2bae:	54 72 6f 6d 62 6f 6e 65 00 00 00 00 00 00 00 00     Trombone........
    2bbe:	54 75 62 61 00 00 00 00 00 00 00 00 00 00 00 00     Tuba............
    2bce:	4d 75 74 65 64 54 70 74 00 00 00 00 00 00 00 00     MutedTpt........
    2bde:	46 72 65 6e 63 68 48 6f 72 6e 00 00 00 00 00 00     FrenchHorn......
    2bee:	42 72 61 73 73 53 65 63 74 2e 00 00 00 00 00 00     BrassSect.......
    2bfe:	53 79 6e 42 72 61 73 73 00 00 00 00 00 00 00 00     SynBrass........
    2c0e:	53 79 6e 42 72 61 73 73 00 00 00 00 00 00 00 00     SynBrass........
    2c1e:	41 6c 74 6f 73 6f 66 74 00 00 00 00 00 00 00 00     Altosoft........
    2c2e:	43 6f 6e 74 72 61 6c 74 6f 00 00 00 00 00 00 00     Contralto.......
    2c3e:	54 65 6e 6f 72 53 61 78 00 00 00 00 00 00 00 00     TenorSax........
    2c4e:	42 61 72 69 74 6f 6e 53 61 78 00 00 00 00 00 00     BaritonSax......
    2c5e:	4f 62 6f 65 00 00 00 00 00 00 00 00 00 00 00 00     Oboe............
    2c6e:	45 6e 67 6c 2e 48 6f 72 6e 00 00 00 00 00 00 00     Engl.Horn.......
    2c7e:	42 61 73 73 6f 6f 6e 00 00 00 00 00 00 00 00 00     Bassoon.........
    2c8e:	43 6c 61 72 69 6e 65 74 00 00 00 00 00 00 00 00     Clarinet........
    2c9e:	50 69 63 63 6f 6c 6f 00 00 00 00 00 00 00 00 00     Piccolo.........
    2cae:	46 6c 75 74 65 00 00 00 00 00 00 00 00 00 00 00     Flute...........
    2cbe:	52 65 63 6f 72 64 65 72 00 00 00 00 00 00 00 00     Recorder........
    2cce:	50 61 6e 46 6c 75 74 65 00 00 00 00 00 00 00 00     PanFlute........
    2cde:	42 6f 74 74 6c 65 00 00 00 00 00 00 00 00 00 00     Bottle..........
    2cee:	53 68 61 6b 75 68 61 73 68 69 00 00 00 00 00 00     Shakuhashi......
    2cfe:	57 68 69 73 74 6c 65 00 00 00 00 00 00 00 00 00     Whistle.........
    2d0e:	4f 63 61 72 69 6e 61 00 00 00 00 00 00 00 00 00     Ocarina.........
    2d1e:	53 71 75 61 72 65 00 00 00 00 00 00 00 00 00 00     Square..........
    2d2e:	53 61 77 74 6f 6f 74 68 00 00 00 00 00 00 00 00     Sawtooth........
    2d3e:	43 61 6c 6c 69 6f 70 65 00 00 00 00 00 00 00 00     Calliope........
    2d4e:	43 68 69 66 66 00 00 00 00 00 00 00 00 00 00 00     Chiff...........
    2d5e:	43 68 61 72 61 6e 67 00 00 00 00 00 00 00 00 00     Charang.........
    2d6e:	56 6f 69 63 65 00 00 00 00 00 00 00 00 00 00 00     Voice...........
    2d7e:	46 69 66 74 68 00 00 00 00 00 00 00 00 00 00 00     Fifth...........
    2d8e:	42 61 73 73 26 4c 65 61 64 00 00 00 00 00 00 00     Bass&Lead.......
    2d9e:	46 61 6e 74 61 73 79 00 00 00 00 00 00 00 00 00     Fantasy.........
    2dae:	57 61 72 6d 00 00 00 00 00 00 00 00 00 00 00 00     Warm............
    2dbe:	4e 65 77 41 67 65 00 00 00 00 00 00 00 00 00 00     NewAge..........
    2dce:	53 70 61 63 65 00 00 00 00 00 00 00 00 00 00 00     Space...........
    2dde:	53 6f 66 74 00 00 00 00 00 00 00 00 00 00 00 00     Soft............
    2dee:	4d 65 74 61 6c 00 00 00 00 00 00 00 00 00 00 00     Metal...........
    2dfe:	48 61 6c 6f 00 00 00 00 00 00 00 00 00 00 00 00     Halo............
    2e0e:	53 77 65 65 70 00 00 00 00 00 00 00 00 00 00 00     Sweep...........
    2e1e:	49 63 65 52 61 69 6e 00 00 00 00 00 00 00 00 00     IceRain.........
    2e2e:	53 6f 75 6e 64 74 72 61 63 6b 00 00 00 00 00 00     Soundtrack......
    2e3e:	43 72 79 73 74 61 6c 00 00 00 00 00 00 00 00 00     Crystal.........
    2e4e:	41 74 6d 6f 73 70 68 65 72 65 00 00 00 00 00 00     Atmosphere......
    2e5e:	42 72 69 67 68 74 6e 65 73 73 00 00 00 00 00 00     Brightness......
    2e6e:	47 6f 62 6c 69 6e 00 00 00 00 00 00 00 00 00 00     Goblin..........
    2e7e:	45 63 68 6f 64 72 6f 70 73 00 00 00 00 00 00 00     Echodrops.......
    2e8e:	53 74 61 72 74 68 65 6d 65 00 00 00 00 00 00 00     Startheme.......
    2e9e:	53 69 74 61 72 00 00 00 00 00 00 00 00 00 00 00     Sitar...........
    2eae:	42 61 6e 6a 6f 00 00 00 00 00 00 00 00 00 00 00     Banjo...........
    2ebe:	53 68 61 6d 69 73 65 6e 00 00 00 00 00 00 00 00     Shamisen........
    2ece:	4b 6f 74 6f 00 00 00 00 00 00 00 00 00 00 00 00     Koto............
    2ede:	4b 61 6c 69 6d 62 61 00 00 00 00 00 00 00 00 00     Kalimba.........
    2eee:	42 61 67 70 69 70 65 00 00 00 00 00 00 00 00 00     Bagpipe.........
    2efe:	46 69 64 64 6c 65 00 00 00 00 00 00 00 00 00 00     Fiddle..........
    2f0e:	53 68 61 6e 61 69 00 00 00 00 00 00 00 00 00 00     Shanai..........
    2f1e:	54 69 6e 6b 6c 65 62 65 6c 6c 00 00 00 00 00 00     Tinklebell......
    2f2e:	41 67 6f 67 6f 00 00 00 00 00 00 00 00 00 00 00     Agogo...........
    2f3e:	53 74 65 65 6c 64 72 75 6d 00 00 00 00 00 00 00     Steeldrum.......
    2f4e:	57 6f 6f 64 62 6c 6f 63 6b 00 00 00 00 00 00 00     Woodblock.......
    2f5e:	54 61 69 6b 6f 00 00 00 00 00 00 00 00 00 00 00     Taiko...........
    2f6e:	4d 65 6c 6f 74 6f 6d 00 00 00 00 00 00 00 00 00     Melotom.........
    2f7e:	53 79 6e 74 6f 6d 00 00 00 00 00 00 00 00 00 00     Syntom..........
    2f8e:	52 65 76 65 72 73 65 00 00 00 00 00 00 00 00 00     Reverse.........
    2f9e:	46 72 65 74 4e 6f 69 73 65 00 00 00 00 00 00 00     FretNoise.......
    2fae:	42 72 65 61 74 68 00 00 00 00 00 00 00 00 00 00     Breath..........
    2fbe:	53 65 61 73 68 6f 72 65 00 00 00 00 00 00 00 00     Seashore........
    2fce:	42 69 72 64 00 00 00 00 00 00 00 00 00 00 00 00     Bird............
    2fde:	54 65 6c 65 70 68 6f 6e 65 00 00 00 00 00 00 00     Telephone.......
    2fee:	48 65 6c 69 63 6f 70 74 65 72 00 00 00 00 00 00     Helicopter......
    2ffe:	41 70 70 6c 61 75 73 65 00 00 00 00 00 00 00 00     Applause........
    300e:	47 75 6e 73 68 6f 74 00 00 00 00 00 00 00 00 00     Gunshot.........

0000301e <digital_pin_to_timer_PGM>:
    301e:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
    302e:	00 00 00 00                                         ....

00003032 <digital_pin_to_bit_mask_PGM>:
    3032:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
    3042:	04 08 10 20                                         ... 

00003046 <digital_pin_to_port_PGM>:
    3046:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
    3056:	03 03 03 03                                         ....

0000305a <port_to_input_PGM>:
    305a:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00003064 <port_to_output_PGM>:
    3064:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000306e <port_to_mode_PGM>:
    306e:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00003078 <__ctors_start>:
    3078:	33 2d       	mov	r19, r3
    307a:	e7 34       	cpi	r30, 0x47	; 71

0000307c <__ctors_end>:
    307c:	8a 2d       	mov	r24, r10

0000307e <__dtors_end>:
    307e:	11 24       	eor	r1, r1
    3080:	1f be       	out	0x3f, r1	; 63
    3082:	cf ef       	ldi	r28, 0xFF	; 255
    3084:	d8 e0       	ldi	r29, 0x08	; 8
    3086:	de bf       	out	0x3e, r29	; 62
    3088:	cd bf       	out	0x3d, r28	; 61

0000308a <__do_copy_data>:
    308a:	13 e0       	ldi	r17, 0x03	; 3
    308c:	a0 e0       	ldi	r26, 0x00	; 0
    308e:	b1 e0       	ldi	r27, 0x01	; 1
    3090:	e0 e5       	ldi	r30, 0x50	; 80
    3092:	ff e6       	ldi	r31, 0x6F	; 111
    3094:	02 c0       	rjmp	.+4      	; 0x309a <__do_copy_data+0x10>
    3096:	05 90       	lpm	r0, Z+
    3098:	0d 92       	st	X+, r0
    309a:	aa 30       	cpi	r26, 0x0A	; 10
    309c:	b1 07       	cpc	r27, r17
    309e:	d9 f7       	brne	.-10     	; 0x3096 <__do_copy_data+0xc>

000030a0 <__do_clear_bss>:
    30a0:	24 e0       	ldi	r18, 0x04	; 4
    30a2:	aa e0       	ldi	r26, 0x0A	; 10
    30a4:	b3 e0       	ldi	r27, 0x03	; 3
    30a6:	01 c0       	rjmp	.+2      	; 0x30aa <.do_clear_bss_start>

000030a8 <.do_clear_bss_loop>:
    30a8:	1d 92       	st	X+, r1

000030aa <.do_clear_bss_start>:
    30aa:	a9 3d       	cpi	r26, 0xD9	; 217
    30ac:	b2 07       	cpc	r27, r18
    30ae:	e1 f7       	brne	.-8      	; 0x30a8 <.do_clear_bss_loop>

000030b0 <__do_global_ctors>:
    30b0:	18 e1       	ldi	r17, 0x18	; 24
    30b2:	ce e3       	ldi	r28, 0x3E	; 62
    30b4:	d8 e1       	ldi	r29, 0x18	; 24
    30b6:	04 c0       	rjmp	.+8      	; 0x30c0 <__do_global_ctors+0x10>
    30b8:	21 97       	sbiw	r28, 0x01	; 1
    30ba:	fe 01       	movw	r30, r28
    30bc:	0e 94 58 37 	call	0x6eb0	; 0x6eb0 <__tablejump2__>
    30c0:	cc 33       	cpi	r28, 0x3C	; 60
    30c2:	d1 07       	cpc	r29, r17
    30c4:	c9 f7       	brne	.-14     	; 0x30b8 <__do_global_ctors+0x8>
    30c6:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <main>
    30ca:	0c 94 9b 37 	jmp	0x6f36	; 0x6f36 <__do_global_dtors>

000030ce <__bad_interrupt>:
    30ce:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000030d2 <_ZN9DataFlashC1Ev>:
    // Invert the SPI2X bit
    clockDiv ^= 0x1;

    // Pack into the SPISettings class
    spcr = _BV(SPE) | _BV(MSTR) | ((bitOrder == LSBFIRST) ? _BV(DORD) : 0) |
      (dataMode & SPI_MODE_MASK) | ((clockDiv >> 1) & SPI_CLOCK_MASK);
    30d2:	20 e5       	ldi	r18, 0x50	; 80
    30d4:	fc 01       	movw	r30, r24
    30d6:	20 87       	std	Z+8, r18	; 0x08
    spsr = clockDiv & SPI_2XCLOCK_MASK;
    30d8:	11 86       	std	Z+9, r1	; 0x09
    30da:	08 95       	ret

000030dc <_ZN9DataFlashD1Ev>:
DataFlash::DataFlash()
{
}

/** Destructor **/
DataFlash::~DataFlash()
    30dc:	08 95       	ret

000030de <_Z10readinputsP11inputStateshh>:
extern inputStates lastdata;
extern inputStates newdata;
extern inputStates newdata;

void readinputs(struct inputStates * data,uint8_t num_fam,uint8_t num_snd)
{
    30de:	5f 92       	push	r5
    30e0:	6f 92       	push	r6
    30e2:	7f 92       	push	r7
    30e4:	8f 92       	push	r8
    30e6:	9f 92       	push	r9
    30e8:	af 92       	push	r10
    30ea:	bf 92       	push	r11
    30ec:	cf 92       	push	r12
    30ee:	df 92       	push	r13
    30f0:	ef 92       	push	r14
    30f2:	ff 92       	push	r15
    30f4:	0f 93       	push	r16
    30f6:	1f 93       	push	r17
    30f8:	cf 93       	push	r28
    30fa:	df 93       	push	r29
    30fc:	5c 01       	movw	r10, r24
	uint8_t index = 0;
	uint8_t val = 0;
	uint8_t step1 = (255 / num_fam);
    30fe:	c6 2f       	mov	r28, r22
    3100:	d0 e0       	ldi	r29, 0x00	; 0
    3102:	2f ef       	ldi	r18, 0xFF	; 255
    3104:	30 e0       	ldi	r19, 0x00	; 0
    3106:	c9 01       	movw	r24, r18
    3108:	be 01       	movw	r22, r28
    310a:	0e 94 22 37 	call	0x6e44	; 0x6e44 <__divmodhi4>
    310e:	6b 01       	movw	r12, r22
    3110:	66 2e       	mov	r6, r22
	uint8_t step0 = (255 / num_snd);
    3112:	84 2e       	mov	r8, r20
    3114:	91 2c       	mov	r9, r1
    3116:	c9 01       	movw	r24, r18
    3118:	b4 01       	movw	r22, r8
    311a:	0e 94 22 37 	call	0x6e44	; 0x6e44 <__divmodhi4>
    311e:	7b 01       	movw	r14, r22
    3120:	76 2e       	mov	r7, r22
	data->button[0] = (digitalRead(PIN_BTN0) == LOW);
    3122:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <PIN_BTN0>
    3126:	0e 94 ec 36 	call	0x6dd8	; 0x6dd8 <digitalRead>
    312a:	21 e0       	ldi	r18, 0x01	; 1
    312c:	89 2b       	or	r24, r25
    312e:	09 f0       	breq	.+2      	; 0x3132 <_Z10readinputsP11inputStateshh+0x54>
    3130:	20 e0       	ldi	r18, 0x00	; 0
    3132:	f5 01       	movw	r30, r10
    3134:	20 83       	st	Z, r18
	data->button[1] = (digitalRead(PIN_BTN1) == LOW);
    3136:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <PIN_BTN1>
    313a:	0e 94 ec 36 	call	0x6dd8	; 0x6dd8 <digitalRead>
    313e:	21 e0       	ldi	r18, 0x01	; 1
    3140:	89 2b       	or	r24, r25
    3142:	09 f0       	breq	.+2      	; 0x3146 <_Z10readinputsP11inputStateshh+0x68>
    3144:	20 e0       	ldi	r18, 0x00	; 0
    3146:	f5 01       	movw	r30, r10
    3148:	21 83       	std	Z+1, r18	; 0x01
	data->button[2] = (digitalRead(PIN_BTN2) == LOW);
    314a:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <PIN_BTN2>
    314e:	0e 94 ec 36 	call	0x6dd8	; 0x6dd8 <digitalRead>
    3152:	21 e0       	ldi	r18, 0x01	; 1
    3154:	89 2b       	or	r24, r25
    3156:	09 f0       	breq	.+2      	; 0x315a <_Z10readinputsP11inputStateshh+0x7c>
    3158:	20 e0       	ldi	r18, 0x00	; 0
    315a:	f5 01       	movw	r30, r10
    315c:	22 83       	std	Z+2, r18	; 0x02
	data->button[3] = (digitalRead(PIN_BTN3) == LOW);
    315e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <PIN_BTN3>
    3162:	0e 94 ec 36 	call	0x6dd8	; 0x6dd8 <digitalRead>
    3166:	21 e0       	ldi	r18, 0x01	; 1
    3168:	89 2b       	or	r24, r25
    316a:	09 f0       	breq	.+2      	; 0x316e <_Z10readinputsP11inputStateshh+0x90>
    316c:	20 e0       	ldi	r18, 0x00	; 0
    316e:	f5 01       	movw	r30, r10
    3170:	23 83       	std	Z+3, r18	; 0x03
    3172:	dd 24       	eor	r13, r13
	
	for(index = 0; index < (num_fam * step1); index += step1){
    3174:	cc 9d       	mul	r28, r12
    3176:	80 01       	movw	r16, r0
    3178:	cd 9d       	mul	r28, r13
    317a:	10 0d       	add	r17, r0
    317c:	dc 9d       	mul	r29, r12
    317e:	10 0d       	add	r17, r0
    3180:	11 24       	eor	r1, r1
    3182:	10 16       	cp	r1, r16
    3184:	11 06       	cpc	r1, r17
    3186:	cc f4       	brge	.+50     	; 0x31ba <_Z10readinputsP11inputStateshh+0xdc>
    3188:	c0 e0       	ldi	r28, 0x00	; 0
    318a:	d0 e0       	ldi	r29, 0x00	; 0
    318c:	51 2c       	mov	r5, r1
		val = analogRead(PIN_POT1) >> 2;
    318e:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <PIN_POT1>
    3192:	0e 94 3b 36 	call	0x6c76	; 0x6c76 <analogRead>
    3196:	95 95       	asr	r25
    3198:	87 95       	ror	r24
    319a:	95 95       	asr	r25
    319c:	87 95       	ror	r24
		if(val >= index && val < (index + step1)){
    319e:	85 15       	cp	r24, r5
    31a0:	d8 f0       	brcs	.+54     	; 0x31d8 <_Z10readinputsP11inputStateshh+0xfa>
    31a2:	99 27       	eor	r25, r25
    31a4:	cc 0d       	add	r28, r12
    31a6:	dd 1d       	adc	r29, r13
    31a8:	8c 17       	cp	r24, r28
    31aa:	9d 07       	cpc	r25, r29
    31ac:	ac f4       	brge	.+42     	; 0x31d8 <_Z10readinputsP11inputStateshh+0xfa>
			data->pot[1] = index / step1;
    31ae:	85 2d       	mov	r24, r5
    31b0:	66 2d       	mov	r22, r6
    31b2:	0e 94 16 37 	call	0x6e2c	; 0x6e2c <__udivmodqi4>
    31b6:	f5 01       	movw	r30, r10
    31b8:	85 83       	std	Z+5, r24	; 0x05
    31ba:	ff 24       	eor	r15, r15
			break;
		}
	}
	for(index = 0; index < (num_snd * step0); index += step0){
    31bc:	8e 9c       	mul	r8, r14
    31be:	80 01       	movw	r16, r0
    31c0:	8f 9c       	mul	r8, r15
    31c2:	10 0d       	add	r17, r0
    31c4:	9e 9c       	mul	r9, r14
    31c6:	10 0d       	add	r17, r0
    31c8:	11 24       	eor	r1, r1
    31ca:	10 16       	cp	r1, r16
    31cc:	11 06       	cpc	r1, r17
    31ce:	44 f5       	brge	.+80     	; 0x3220 <_Z10readinputsP11inputStateshh+0x142>
    31d0:	c1 2c       	mov	r12, r1
    31d2:	d1 2c       	mov	r13, r1
    31d4:	c0 e0       	ldi	r28, 0x00	; 0
    31d6:	07 c0       	rjmp	.+14     	; 0x31e6 <_Z10readinputsP11inputStateshh+0x108>
	data->button[0] = (digitalRead(PIN_BTN0) == LOW);
	data->button[1] = (digitalRead(PIN_BTN1) == LOW);
	data->button[2] = (digitalRead(PIN_BTN2) == LOW);
	data->button[3] = (digitalRead(PIN_BTN3) == LOW);
	
	for(index = 0; index < (num_fam * step1); index += step1){
    31d8:	56 0c       	add	r5, r6
    31da:	c5 2d       	mov	r28, r5
    31dc:	d0 e0       	ldi	r29, 0x00	; 0
    31de:	c0 17       	cp	r28, r16
    31e0:	d1 07       	cpc	r29, r17
    31e2:	ac f2       	brlt	.-86     	; 0x318e <_Z10readinputsP11inputStateshh+0xb0>
    31e4:	ea cf       	rjmp	.-44     	; 0x31ba <_Z10readinputsP11inputStateshh+0xdc>
			data->pot[1] = index / step1;
			break;
		}
	}
	for(index = 0; index < (num_snd * step0); index += step0){
		val = analogRead(PIN_POT0) >> 2;
    31e6:	80 91 22 04 	lds	r24, 0x0422	; 0x800422 <PIN_POT0>
    31ea:	0e 94 3b 36 	call	0x6c76	; 0x6c76 <analogRead>
    31ee:	95 95       	asr	r25
    31f0:	87 95       	ror	r24
    31f2:	95 95       	asr	r25
    31f4:	87 95       	ror	r24
		if(val >= index && val < (index + step0)){
    31f6:	8c 17       	cp	r24, r28
    31f8:	68 f0       	brcs	.+26     	; 0x3214 <_Z10readinputsP11inputStateshh+0x136>
    31fa:	99 27       	eor	r25, r25
    31fc:	ce 0c       	add	r12, r14
    31fe:	df 1c       	adc	r13, r15
    3200:	8c 15       	cp	r24, r12
    3202:	9d 05       	cpc	r25, r13
    3204:	3c f4       	brge	.+14     	; 0x3214 <_Z10readinputsP11inputStateshh+0x136>
			data->pot[0] = index / step0;
    3206:	8c 2f       	mov	r24, r28
    3208:	67 2d       	mov	r22, r7
    320a:	0e 94 16 37 	call	0x6e2c	; 0x6e2c <__udivmodqi4>
    320e:	f5 01       	movw	r30, r10
    3210:	84 83       	std	Z+4, r24	; 0x04
			break;
    3212:	06 c0       	rjmp	.+12     	; 0x3220 <_Z10readinputsP11inputStateshh+0x142>
		if(val >= index && val < (index + step1)){
			data->pot[1] = index / step1;
			break;
		}
	}
	for(index = 0; index < (num_snd * step0); index += step0){
    3214:	c7 0d       	add	r28, r7
    3216:	cc 2e       	mov	r12, r28
    3218:	d1 2c       	mov	r13, r1
    321a:	c0 16       	cp	r12, r16
    321c:	d1 06       	cpc	r13, r17
    321e:	1c f3       	brlt	.-58     	; 0x31e6 <_Z10readinputsP11inputStateshh+0x108>
			data->pot[0] = index / step0;
			break;
		}
	}
	
}
    3220:	df 91       	pop	r29
    3222:	cf 91       	pop	r28
    3224:	1f 91       	pop	r17
    3226:	0f 91       	pop	r16
    3228:	ff 90       	pop	r15
    322a:	ef 90       	pop	r14
    322c:	df 90       	pop	r13
    322e:	cf 90       	pop	r12
    3230:	bf 90       	pop	r11
    3232:	af 90       	pop	r10
    3234:	9f 90       	pop	r9
    3236:	8f 90       	pop	r8
    3238:	7f 90       	pop	r7
    323a:	6f 90       	pop	r6
    323c:	5f 90       	pop	r5
    323e:	08 95       	ret

00003240 <_Z13compareinputsP11inputStatesS0_>:

uint8_t compareinputs(inputStates * old_p, inputStates * new_p)
{
    3240:	fc 01       	movw	r30, r24
    3242:	db 01       	movw	r26, r22
		
	if(old_p->button[0] != new_p->button[0]){
    3244:	8c 91       	ld	r24, X
    3246:	90 81       	ld	r25, Z
    3248:	98 17       	cp	r25, r24
    324a:	21 f0       	breq	.+8      	; 0x3254 <_Z13compareinputsP11inputStatesS0_+0x14>
		old_p->button[0] = new_p->button[0];
    324c:	80 83       	st	Z, r24
		if(new_p->button[0] == HIGH)
    324e:	8c 91       	ld	r24, X
    3250:	81 30       	cpi	r24, 0x01	; 1
    3252:	a9 f1       	breq	.+106    	; 0x32be <_Z13compareinputsP11inputStatesS0_+0x7e>
			return BUTTON0;
	}
	if(old_p->button[1] != new_p->button[1]){
    3254:	11 96       	adiw	r26, 0x01	; 1
    3256:	8c 91       	ld	r24, X
    3258:	11 97       	sbiw	r26, 0x01	; 1
    325a:	91 81       	ldd	r25, Z+1	; 0x01
    325c:	98 17       	cp	r25, r24
    325e:	31 f0       	breq	.+12     	; 0x326c <_Z13compareinputsP11inputStatesS0_+0x2c>
		old_p->button[1] = new_p->button[1];
    3260:	81 83       	std	Z+1, r24	; 0x01
		if(new_p->button[1] == HIGH)
    3262:	11 96       	adiw	r26, 0x01	; 1
    3264:	8c 91       	ld	r24, X
    3266:	11 97       	sbiw	r26, 0x01	; 1
    3268:	81 30       	cpi	r24, 0x01	; 1
    326a:	81 f1       	breq	.+96     	; 0x32cc <_Z13compareinputsP11inputStatesS0_+0x8c>
			return BUTTON1;
	}		
	if(old_p->button[2] != new_p->button[2]){
    326c:	12 96       	adiw	r26, 0x02	; 2
    326e:	8c 91       	ld	r24, X
    3270:	12 97       	sbiw	r26, 0x02	; 2
    3272:	92 81       	ldd	r25, Z+2	; 0x02
    3274:	98 17       	cp	r25, r24
    3276:	31 f0       	breq	.+12     	; 0x3284 <_Z13compareinputsP11inputStatesS0_+0x44>
		old_p->button[2] = new_p->button[2];
    3278:	82 83       	std	Z+2, r24	; 0x02
		if(new_p->button[2] == HIGH)
    327a:	12 96       	adiw	r26, 0x02	; 2
    327c:	8c 91       	ld	r24, X
    327e:	12 97       	sbiw	r26, 0x02	; 2
    3280:	81 30       	cpi	r24, 0x01	; 1
    3282:	f9 f0       	breq	.+62     	; 0x32c2 <_Z13compareinputsP11inputStatesS0_+0x82>
			return BUTTON2;
	}
	if(old_p->button[3] != new_p->button[3]){
    3284:	13 96       	adiw	r26, 0x03	; 3
    3286:	8c 91       	ld	r24, X
    3288:	13 97       	sbiw	r26, 0x03	; 3
    328a:	93 81       	ldd	r25, Z+3	; 0x03
    328c:	98 17       	cp	r25, r24
    328e:	31 f0       	breq	.+12     	; 0x329c <_Z13compareinputsP11inputStatesS0_+0x5c>
		old_p->button[3] = new_p->button[3];
    3290:	83 83       	std	Z+3, r24	; 0x03
		if(new_p->button[3] == HIGH)
    3292:	13 96       	adiw	r26, 0x03	; 3
    3294:	8c 91       	ld	r24, X
    3296:	13 97       	sbiw	r26, 0x03	; 3
    3298:	81 30       	cpi	r24, 0x01	; 1
    329a:	a9 f0       	breq	.+42     	; 0x32c6 <_Z13compareinputsP11inputStatesS0_+0x86>
		return BUTTON3;
	}	
	if(old_p->pot[0] != new_p->pot[0])
    329c:	14 96       	adiw	r26, 0x04	; 4
    329e:	8c 91       	ld	r24, X
    32a0:	14 97       	sbiw	r26, 0x04	; 4
    32a2:	94 81       	ldd	r25, Z+4	; 0x04
    32a4:	98 17       	cp	r25, r24
    32a6:	19 f0       	breq	.+6      	; 0x32ae <_Z13compareinputsP11inputStatesS0_+0x6e>
	{
		old_p->pot[0] = new_p->pot[0];
    32a8:	84 83       	std	Z+4, r24	; 0x04
		return POT0;		
    32aa:	83 e0       	ldi	r24, 0x03	; 3
    32ac:	08 95       	ret
	}
	if(old_p->pot[1] != new_p->pot[1])
    32ae:	15 96       	adiw	r26, 0x05	; 5
    32b0:	8c 91       	ld	r24, X
    32b2:	95 81       	ldd	r25, Z+5	; 0x05
    32b4:	98 17       	cp	r25, r24
    32b6:	49 f0       	breq	.+18     	; 0x32ca <_Z13compareinputsP11inputStatesS0_+0x8a>
	{
		old_p->pot[1] = new_p->pot[1];
    32b8:	85 83       	std	Z+5, r24	; 0x05
		return POT1;
    32ba:	84 e0       	ldi	r24, 0x04	; 4
    32bc:	08 95       	ret
{
		
	if(old_p->button[0] != new_p->button[0]){
		old_p->button[0] = new_p->button[0];
		if(new_p->button[0] == HIGH)
			return BUTTON0;
    32be:	80 e0       	ldi	r24, 0x00	; 0
    32c0:	08 95       	ret
			return BUTTON1;
	}		
	if(old_p->button[2] != new_p->button[2]){
		old_p->button[2] = new_p->button[2];
		if(new_p->button[2] == HIGH)
			return BUTTON2;
    32c2:	82 e0       	ldi	r24, 0x02	; 2
    32c4:	08 95       	ret
	}
	if(old_p->button[3] != new_p->button[3]){
		old_p->button[3] = new_p->button[3];
		if(new_p->button[3] == HIGH)
		return BUTTON3;
    32c6:	85 e0       	ldi	r24, 0x05	; 5
    32c8:	08 95       	ret
	{
		old_p->pot[1] = new_p->pot[1];
		return POT1;
	}
	
	return NONE;
    32ca:	8f ef       	ldi	r24, 0xFF	; 255
	
}
    32cc:	08 95       	ret

000032ce <_ZN4OSFS14writeNBytesChkEjjPKv>:
			workingAddress = workingHeader.nextFile;
		}

		// We will never get here
		return result::UNDEFINED_ERROR;
	}
    32ce:	20 91 96 01 	lds	r18, 0x0196	; 0x800196 <_ZN4OSFS13startOfEEPROME>
    32d2:	30 91 97 01 	lds	r19, 0x0197	; 0x800197 <_ZN4OSFS13startOfEEPROME+0x1>
    32d6:	82 17       	cp	r24, r18
    32d8:	93 07       	cpc	r25, r19
    32da:	a8 f0       	brcs	.+42     	; 0x3306 <_ZN4OSFS14writeNBytesChkEjjPKv+0x38>
    32dc:	e0 91 94 01 	lds	r30, 0x0194	; 0x800194 <_ZN4OSFS11endOfEEPROME>
    32e0:	f0 91 95 01 	lds	r31, 0x0195	; 0x800195 <_ZN4OSFS11endOfEEPROME+0x1>
    32e4:	e8 17       	cp	r30, r24
    32e6:	f9 07       	cpc	r31, r25
    32e8:	88 f0       	brcs	.+34     	; 0x330c <_ZN4OSFS14writeNBytesChkEjjPKv+0x3e>
    32ea:	dc 01       	movw	r26, r24
    32ec:	a6 0f       	add	r26, r22
    32ee:	b7 1f       	adc	r27, r23
    32f0:	a2 17       	cp	r26, r18
    32f2:	b3 07       	cpc	r27, r19
    32f4:	70 f0       	brcs	.+28     	; 0x3312 <_ZN4OSFS14writeNBytesChkEjjPKv+0x44>
    32f6:	ea 17       	cp	r30, r26
    32f8:	fb 07       	cpc	r31, r27
    32fa:	70 f0       	brcs	.+28     	; 0x3318 <_ZN4OSFS14writeNBytesChkEjjPKv+0x4a>
    32fc:	0e 94 34 30 	call	0x6068	; 0x6068 <_ZN4OSFS11writeNBytesEjjPKh>
    3300:	80 e0       	ldi	r24, 0x00	; 0
    3302:	90 e0       	ldi	r25, 0x00	; 0
    3304:	08 95       	ret
    3306:	82 e0       	ldi	r24, 0x02	; 2
    3308:	90 e0       	ldi	r25, 0x00	; 0
    330a:	08 95       	ret
    330c:	82 e0       	ldi	r24, 0x02	; 2
    330e:	90 e0       	ldi	r25, 0x00	; 0
    3310:	08 95       	ret
    3312:	82 e0       	ldi	r24, 0x02	; 2
    3314:	90 e0       	ldi	r25, 0x00	; 0
    3316:	08 95       	ret
    3318:	82 e0       	ldi	r24, 0x02	; 2
    331a:	90 e0       	ldi	r25, 0x00	; 0
    331c:	08 95       	ret

0000331e <_ZN4OSFS13readNBytesChkEjjPv>:
    331e:	20 91 96 01 	lds	r18, 0x0196	; 0x800196 <_ZN4OSFS13startOfEEPROME>
    3322:	30 91 97 01 	lds	r19, 0x0197	; 0x800197 <_ZN4OSFS13startOfEEPROME+0x1>
    3326:	82 17       	cp	r24, r18
    3328:	93 07       	cpc	r25, r19
    332a:	a8 f0       	brcs	.+42     	; 0x3356 <_ZN4OSFS13readNBytesChkEjjPv+0x38>
    332c:	e0 91 94 01 	lds	r30, 0x0194	; 0x800194 <_ZN4OSFS11endOfEEPROME>
    3330:	f0 91 95 01 	lds	r31, 0x0195	; 0x800195 <_ZN4OSFS11endOfEEPROME+0x1>
    3334:	e8 17       	cp	r30, r24
    3336:	f9 07       	cpc	r31, r25
    3338:	88 f0       	brcs	.+34     	; 0x335c <_ZN4OSFS13readNBytesChkEjjPv+0x3e>
    333a:	dc 01       	movw	r26, r24
    333c:	a6 0f       	add	r26, r22
    333e:	b7 1f       	adc	r27, r23
    3340:	a2 17       	cp	r26, r18
    3342:	b3 07       	cpc	r27, r19
    3344:	70 f0       	brcs	.+28     	; 0x3362 <_ZN4OSFS13readNBytesChkEjjPv+0x44>
    3346:	ea 17       	cp	r30, r26
    3348:	fb 07       	cpc	r31, r27
    334a:	70 f0       	brcs	.+28     	; 0x3368 <_ZN4OSFS13readNBytesChkEjjPv+0x4a>
    334c:	0e 94 15 30 	call	0x602a	; 0x602a <_ZN4OSFS10readNBytesEjjPh>
    3350:	80 e0       	ldi	r24, 0x00	; 0
    3352:	90 e0       	ldi	r25, 0x00	; 0
    3354:	08 95       	ret
    3356:	82 e0       	ldi	r24, 0x02	; 2
    3358:	90 e0       	ldi	r25, 0x00	; 0
    335a:	08 95       	ret
    335c:	82 e0       	ldi	r24, 0x02	; 2
    335e:	90 e0       	ldi	r25, 0x00	; 0
    3360:	08 95       	ret
    3362:	82 e0       	ldi	r24, 0x02	; 2
    3364:	90 e0       	ldi	r25, 0x00	; 0
    3366:	08 95       	ret
    3368:	82 e0       	ldi	r24, 0x02	; 2
    336a:	90 e0       	ldi	r25, 0x00	; 0
    336c:	08 95       	ret

0000336e <_ZN4OSFS15checkLibVersionERj>:
    336e:	0f 93       	push	r16
    3370:	1f 93       	push	r17
    3372:	cf 93       	push	r28
    3374:	df 93       	push	r29
    3376:	00 d0       	rcall	.+0      	; 0x3378 <_ZN4OSFS15checkLibVersionERj+0xa>
    3378:	00 d0       	rcall	.+0      	; 0x337a <_ZN4OSFS15checkLibVersionERj+0xc>
    337a:	00 d0       	rcall	.+0      	; 0x337c <_ZN4OSFS15checkLibVersionERj+0xe>
    337c:	cd b7       	in	r28, 0x3d	; 61
    337e:	de b7       	in	r29, 0x3e	; 62
    3380:	8c 01       	movw	r16, r24
    3382:	ae 01       	movw	r20, r28
    3384:	4f 5f       	subi	r20, 0xFF	; 255
    3386:	5f 4f       	sbci	r21, 0xFF	; 255
    3388:	66 e0       	ldi	r22, 0x06	; 6
    338a:	70 e0       	ldi	r23, 0x00	; 0
    338c:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <_ZN4OSFS13startOfEEPROME>
    3390:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <_ZN4OSFS13startOfEEPROME+0x1>
    3394:	0e 94 8f 19 	call	0x331e	; 0x331e <_ZN4OSFS13readNBytesChkEjjPv>
    3398:	44 e0       	ldi	r20, 0x04	; 4
    339a:	50 e0       	ldi	r21, 0x00	; 0
    339c:	69 e9       	ldi	r22, 0x99	; 153
    339e:	71 e0       	ldi	r23, 0x01	; 1
    33a0:	ce 01       	movw	r24, r28
    33a2:	01 96       	adiw	r24, 0x01	; 1
    33a4:	0e 94 77 37 	call	0x6eee	; 0x6eee <strncmp>
    33a8:	89 2b       	or	r24, r25
    33aa:	31 f0       	breq	.+12     	; 0x33b8 <_ZN4OSFS15checkLibVersionERj+0x4a>
    33ac:	f8 01       	movw	r30, r16
    33ae:	11 82       	std	Z+1, r1	; 0x01
    33b0:	10 82       	st	Z, r1
    33b2:	85 e0       	ldi	r24, 0x05	; 5
    33b4:	90 e0       	ldi	r25, 0x00	; 0
    33b6:	0b c0       	rjmp	.+22     	; 0x33ce <_ZN4OSFS15checkLibVersionERj+0x60>
    33b8:	2d 81       	ldd	r18, Y+5	; 0x05
    33ba:	3e 81       	ldd	r19, Y+6	; 0x06
    33bc:	f8 01       	movw	r30, r16
    33be:	31 83       	std	Z+1, r19	; 0x01
    33c0:	20 83       	st	Z, r18
    33c2:	81 e0       	ldi	r24, 0x01	; 1
    33c4:	90 e0       	ldi	r25, 0x00	; 0
    33c6:	22 30       	cpi	r18, 0x02	; 2
    33c8:	31 05       	cpc	r19, r1
    33ca:	09 f4       	brne	.+2      	; 0x33ce <_ZN4OSFS15checkLibVersionERj+0x60>
    33cc:	80 e0       	ldi	r24, 0x00	; 0
    33ce:	26 96       	adiw	r28, 0x06	; 6
    33d0:	0f b6       	in	r0, 0x3f	; 63
    33d2:	f8 94       	cli
    33d4:	de bf       	out	0x3e, r29	; 62
    33d6:	0f be       	out	0x3f, r0	; 63
    33d8:	cd bf       	out	0x3d, r28	; 61
    33da:	df 91       	pop	r29
    33dc:	cf 91       	pop	r28
    33de:	1f 91       	pop	r17
    33e0:	0f 91       	pop	r16
    33e2:	08 95       	ret

000033e4 <_ZN4OSFS11padFilenameEPKcPc>:
    33e4:	dc 01       	movw	r26, r24
    33e6:	fb 01       	movw	r30, r22
    33e8:	65 5f       	subi	r22, 0xF5	; 245
    33ea:	7f 4f       	sbci	r23, 0xFF	; 255
    33ec:	80 e0       	ldi	r24, 0x00	; 0
    33ee:	30 e2       	ldi	r19, 0x20	; 32
    33f0:	21 e0       	ldi	r18, 0x01	; 1
    33f2:	9d 91       	ld	r25, X+
    33f4:	99 23       	and	r25, r25
    33f6:	11 f0       	breq	.+4      	; 0x33fc <_ZN4OSFS11padFilenameEPKcPc+0x18>
    33f8:	88 23       	and	r24, r24
    33fa:	19 f0       	breq	.+6      	; 0x3402 <_ZN4OSFS11padFilenameEPKcPc+0x1e>
    33fc:	30 83       	st	Z, r19
    33fe:	82 2f       	mov	r24, r18
    3400:	01 c0       	rjmp	.+2      	; 0x3404 <_ZN4OSFS11padFilenameEPKcPc+0x20>
    3402:	90 83       	st	Z, r25
    3404:	31 96       	adiw	r30, 0x01	; 1
    3406:	e6 17       	cp	r30, r22
    3408:	f7 07       	cpc	r31, r23
    340a:	99 f7       	brne	.-26     	; 0x33f2 <_ZN4OSFS11padFilenameEPKcPc+0xe>
    340c:	08 95       	ret

0000340e <_ZN4OSFS11getFileInfoEPKcRjS2_>:
    340e:	8f 92       	push	r8
    3410:	9f 92       	push	r9
    3412:	af 92       	push	r10
    3414:	bf 92       	push	r11
    3416:	cf 92       	push	r12
    3418:	df 92       	push	r13
    341a:	ef 92       	push	r14
    341c:	ff 92       	push	r15
    341e:	0f 93       	push	r16
    3420:	1f 93       	push	r17
    3422:	cf 93       	push	r28
    3424:	df 93       	push	r29
    3426:	cd b7       	in	r28, 0x3d	; 61
    3428:	de b7       	in	r29, 0x3e	; 62
    342a:	6d 97       	sbiw	r28, 0x1d	; 29
    342c:	0f b6       	in	r0, 0x3f	; 63
    342e:	f8 94       	cli
    3430:	de bf       	out	0x3e, r29	; 62
    3432:	0f be       	out	0x3f, r0	; 63
    3434:	cd bf       	out	0x3d, r28	; 61
    3436:	4c 01       	movw	r8, r24
    3438:	5b 01       	movw	r10, r22
    343a:	6a 01       	movw	r12, r20
    343c:	ce 01       	movw	r24, r28
    343e:	4c 96       	adiw	r24, 0x1c	; 28
    3440:	0e 94 b7 19 	call	0x336e	; 0x336e <_ZN4OSFS15checkLibVersionERj>
    3444:	7c 01       	movw	r14, r24
    3446:	89 2b       	or	r24, r25
    3448:	d9 f5       	brne	.+118    	; 0x34c0 <_ZN4OSFS11getFileInfoEPKcRjS2_+0xb2>
    344a:	00 91 96 01 	lds	r16, 0x0196	; 0x800196 <_ZN4OSFS13startOfEEPROME>
    344e:	10 91 97 01 	lds	r17, 0x0197	; 0x800197 <_ZN4OSFS13startOfEEPROME+0x1>
    3452:	0a 5f       	subi	r16, 0xFA	; 250
    3454:	1f 4f       	sbci	r17, 0xFF	; 255
    3456:	be 01       	movw	r22, r28
    3458:	6f 5e       	subi	r22, 0xEF	; 239
    345a:	7f 4f       	sbci	r23, 0xFF	; 255
    345c:	c4 01       	movw	r24, r8
    345e:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <_ZN4OSFS11padFilenameEPKcPc>
    3462:	ae 01       	movw	r20, r28
    3464:	4f 5f       	subi	r20, 0xFF	; 255
    3466:	5f 4f       	sbci	r21, 0xFF	; 255
    3468:	60 e1       	ldi	r22, 0x10	; 16
    346a:	70 e0       	ldi	r23, 0x00	; 0
    346c:	c8 01       	movw	r24, r16
    346e:	0e 94 8f 19 	call	0x331e	; 0x331e <_ZN4OSFS13readNBytesChkEjjPv>
    3472:	00 97       	sbiw	r24, 0x00	; 0
    3474:	21 f5       	brne	.+72     	; 0x34be <_ZN4OSFS11getFileInfoEPKcRjS2_+0xb0>
    3476:	4b e0       	ldi	r20, 0x0B	; 11
    3478:	50 e0       	ldi	r21, 0x00	; 0
    347a:	be 01       	movw	r22, r28
    347c:	6f 5e       	subi	r22, 0xEF	; 239
    347e:	7f 4f       	sbci	r23, 0xFF	; 255
    3480:	ce 01       	movw	r24, r28
    3482:	01 96       	adiw	r24, 0x01	; 1
    3484:	0e 94 77 37 	call	0x6eee	; 0x6eee <strncmp>
    3488:	89 2b       	or	r24, r25
    348a:	71 f4       	brne	.+28     	; 0x34a8 <_ZN4OSFS11getFileInfoEPKcRjS2_+0x9a>
    348c:	88 89       	ldd	r24, Y+16	; 0x10
    348e:	81 11       	cpse	r24, r1
    3490:	0b c0       	rjmp	.+22     	; 0x34a8 <_ZN4OSFS11getFileInfoEPKcRjS2_+0x9a>
    3492:	00 5f       	subi	r16, 0xF0	; 240
    3494:	1f 4f       	sbci	r17, 0xFF	; 255
    3496:	f5 01       	movw	r30, r10
    3498:	11 83       	std	Z+1, r17	; 0x01
    349a:	00 83       	st	Z, r16
    349c:	8c 85       	ldd	r24, Y+12	; 0x0c
    349e:	9d 85       	ldd	r25, Y+13	; 0x0d
    34a0:	f6 01       	movw	r30, r12
    34a2:	91 83       	std	Z+1, r25	; 0x01
    34a4:	80 83       	st	Z, r24
    34a6:	0c c0       	rjmp	.+24     	; 0x34c0 <_ZN4OSFS11getFileInfoEPKcRjS2_+0xb2>
    34a8:	0e 85       	ldd	r16, Y+14	; 0x0e
    34aa:	1f 85       	ldd	r17, Y+15	; 0x0f
    34ac:	01 15       	cp	r16, r1
    34ae:	11 05       	cpc	r17, r1
    34b0:	c1 f6       	brne	.-80     	; 0x3462 <_ZN4OSFS11getFileInfoEPKcRjS2_+0x54>
    34b2:	0f 2e       	mov	r0, r31
    34b4:	f3 e0       	ldi	r31, 0x03	; 3
    34b6:	ef 2e       	mov	r14, r31
    34b8:	f1 2c       	mov	r15, r1
    34ba:	f0 2d       	mov	r31, r0
    34bc:	01 c0       	rjmp	.+2      	; 0x34c0 <_ZN4OSFS11getFileInfoEPKcRjS2_+0xb2>
    34be:	7c 01       	movw	r14, r24
    34c0:	c7 01       	movw	r24, r14
    34c2:	6d 96       	adiw	r28, 0x1d	; 29
    34c4:	0f b6       	in	r0, 0x3f	; 63
    34c6:	f8 94       	cli
    34c8:	de bf       	out	0x3e, r29	; 62
    34ca:	0f be       	out	0x3f, r0	; 63
    34cc:	cd bf       	out	0x3d, r28	; 61
    34ce:	df 91       	pop	r29
    34d0:	cf 91       	pop	r28
    34d2:	1f 91       	pop	r17
    34d4:	0f 91       	pop	r16
    34d6:	ff 90       	pop	r15
    34d8:	ef 90       	pop	r14
    34da:	df 90       	pop	r13
    34dc:	cf 90       	pop	r12
    34de:	bf 90       	pop	r11
    34e0:	af 90       	pop	r10
    34e2:	9f 90       	pop	r9
    34e4:	8f 90       	pop	r8
    34e6:	08 95       	ret

000034e8 <_ZN4OSFS7newFileEPKcPvjb>:
    34e8:	af 92       	push	r10
    34ea:	bf 92       	push	r11
    34ec:	cf 92       	push	r12
    34ee:	df 92       	push	r13
    34f0:	ef 92       	push	r14
    34f2:	ff 92       	push	r15
    34f4:	0f 93       	push	r16
    34f6:	1f 93       	push	r17
    34f8:	cf 93       	push	r28
    34fa:	df 93       	push	r29
    34fc:	cd b7       	in	r28, 0x3d	; 61
    34fe:	de b7       	in	r29, 0x3e	; 62
    3500:	a2 97       	sbiw	r28, 0x22	; 34
    3502:	0f b6       	in	r0, 0x3f	; 63
    3504:	f8 94       	cli
    3506:	de bf       	out	0x3e, r29	; 62
    3508:	0f be       	out	0x3f, r0	; 63
    350a:	cd bf       	out	0x3d, r28	; 61
    350c:	7b 01       	movw	r14, r22
    350e:	8a 01       	movw	r16, r20
    3510:	b2 2e       	mov	r11, r18
    3512:	be 01       	movw	r22, r28
    3514:	6f 5f       	subi	r22, 0xFF	; 255
    3516:	7f 4f       	sbci	r23, 0xFF	; 255
    3518:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <_ZN4OSFS11padFilenameEPKcPc>
    351c:	ce 01       	movw	r24, r28
    351e:	81 96       	adiw	r24, 0x21	; 33
    3520:	0e 94 b7 19 	call	0x336e	; 0x336e <_ZN4OSFS15checkLibVersionERj>
    3524:	00 97       	sbiw	r24, 0x00	; 0
    3526:	09 f0       	breq	.+2      	; 0x352a <_ZN4OSFS7newFileEPKcPvjb+0x42>
    3528:	8b c0       	rjmp	.+278    	; 0x3640 <_ZN4OSFS7newFileEPKcPvjb+0x158>
    352a:	c0 90 96 01 	lds	r12, 0x0196	; 0x800196 <_ZN4OSFS13startOfEEPROME>
    352e:	d0 90 97 01 	lds	r13, 0x0197	; 0x800197 <_ZN4OSFS13startOfEEPROME+0x1>
    3532:	86 e0       	ldi	r24, 0x06	; 6
    3534:	c8 0e       	add	r12, r24
    3536:	d1 1c       	adc	r13, r1
    3538:	ae 01       	movw	r20, r28
    353a:	4f 5e       	subi	r20, 0xEF	; 239
    353c:	5f 4f       	sbci	r21, 0xFF	; 255
    353e:	60 e1       	ldi	r22, 0x10	; 16
    3540:	70 e0       	ldi	r23, 0x00	; 0
    3542:	c6 01       	movw	r24, r12
    3544:	0e 94 8f 19 	call	0x331e	; 0x331e <_ZN4OSFS13readNBytesChkEjjPv>
    3548:	00 97       	sbiw	r24, 0x00	; 0
    354a:	09 f0       	breq	.+2      	; 0x354e <_ZN4OSFS7newFileEPKcPvjb+0x66>
    354c:	79 c0       	rjmp	.+242    	; 0x3640 <_ZN4OSFS7newFileEPKcPvjb+0x158>
    354e:	88 a1       	ldd	r24, Y+32	; 0x20
    3550:	81 11       	cpse	r24, r1
    3552:	5f c0       	rjmp	.+190    	; 0x3612 <_ZN4OSFS7newFileEPKcPvjb+0x12a>
    3554:	4b e0       	ldi	r20, 0x0B	; 11
    3556:	50 e0       	ldi	r21, 0x00	; 0
    3558:	be 01       	movw	r22, r28
    355a:	6f 5f       	subi	r22, 0xFF	; 255
    355c:	7f 4f       	sbci	r23, 0xFF	; 255
    355e:	ce 01       	movw	r24, r28
    3560:	41 96       	adiw	r24, 0x11	; 17
    3562:	0e 94 77 37 	call	0x6eee	; 0x6eee <strncmp>
    3566:	89 2b       	or	r24, r25
    3568:	09 f0       	breq	.+2      	; 0x356c <_ZN4OSFS7newFileEPKcPvjb+0x84>
    356a:	53 c0       	rjmp	.+166    	; 0x3612 <_ZN4OSFS7newFileEPKcPvjb+0x12a>
    356c:	4c c0       	rjmp	.+152    	; 0x3606 <_ZN4OSFS7newFileEPKcPvjb+0x11e>
    356e:	b1 10       	cpse	r11, r1
    3570:	0f c0       	rjmp	.+30     	; 0x3590 <_ZN4OSFS7newFileEPKcPvjb+0xa8>
    3572:	87 e0       	ldi	r24, 0x07	; 7
    3574:	90 e0       	ldi	r25, 0x00	; 0
    3576:	64 c0       	rjmp	.+200    	; 0x3640 <_ZN4OSFS7newFileEPKcPvjb+0x158>
    3578:	ac 8c       	ldd	r10, Y+28	; 0x1c
    357a:	bd 8c       	ldd	r11, Y+29	; 0x1d
    357c:	a1 14       	cp	r10, r1
    357e:	b1 04       	cpc	r11, r1
    3580:	09 f4       	brne	.+2      	; 0x3584 <_ZN4OSFS7newFileEPKcPvjb+0x9c>
    3582:	51 c0       	rjmp	.+162    	; 0x3626 <_ZN4OSFS7newFileEPKcPvjb+0x13e>
    3584:	80 e1       	ldi	r24, 0x10	; 16
    3586:	a8 0e       	add	r10, r24
    3588:	b1 1c       	adc	r11, r1
    358a:	ac 0c       	add	r10, r12
    358c:	bd 1c       	adc	r11, r13
    358e:	4c c0       	rjmp	.+152    	; 0x3628 <_ZN4OSFS7newFileEPKcPvjb+0x140>
    3590:	c8 01       	movw	r24, r16
    3592:	0f 96       	adiw	r24, 0x0f	; 15
    3594:	8c 0d       	add	r24, r12
    3596:	9d 1d       	adc	r25, r13
    3598:	20 91 94 01 	lds	r18, 0x0194	; 0x800194 <_ZN4OSFS11endOfEEPROME>
    359c:	30 91 95 01 	lds	r19, 0x0195	; 0x800195 <_ZN4OSFS11endOfEEPROME+0x1>
    35a0:	28 17       	cp	r18, r24
    35a2:	39 07       	cpc	r19, r25
    35a4:	38 f1       	brcs	.+78     	; 0x35f4 <_ZN4OSFS7newFileEPKcPvjb+0x10c>
    35a6:	1d 87       	std	Y+13, r17	; 0x0d
    35a8:	0c 87       	std	Y+12, r16	; 0x0c
    35aa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    35ac:	9f 8d       	ldd	r25, Y+31	; 0x1f
    35ae:	00 97       	sbiw	r24, 0x00	; 0
    35b0:	21 f4       	brne	.+8      	; 0x35ba <_ZN4OSFS7newFileEPKcPvjb+0xd2>
    35b2:	56 01       	movw	r10, r12
    35b4:	1f 86       	std	Y+15, r1	; 0x0f
    35b6:	1e 86       	std	Y+14, r1	; 0x0e
    35b8:	03 c0       	rjmp	.+6      	; 0x35c0 <_ZN4OSFS7newFileEPKcPvjb+0xd8>
    35ba:	9f 87       	std	Y+15, r25	; 0x0f
    35bc:	8e 87       	std	Y+14, r24	; 0x0e
    35be:	56 01       	movw	r10, r12
    35c0:	18 8a       	std	Y+16, r1	; 0x10
    35c2:	bf 8e       	std	Y+31, r11	; 0x1f
    35c4:	ae 8e       	std	Y+30, r10	; 0x1e
    35c6:	ae 01       	movw	r20, r28
    35c8:	4f 5e       	subi	r20, 0xEF	; 239
    35ca:	5f 4f       	sbci	r21, 0xFF	; 255
    35cc:	60 e1       	ldi	r22, 0x10	; 16
    35ce:	70 e0       	ldi	r23, 0x00	; 0
    35d0:	c6 01       	movw	r24, r12
    35d2:	0e 94 67 19 	call	0x32ce	; 0x32ce <_ZN4OSFS14writeNBytesChkEjjPKv>
    35d6:	ae 01       	movw	r20, r28
    35d8:	4f 5f       	subi	r20, 0xFF	; 255
    35da:	5f 4f       	sbci	r21, 0xFF	; 255
    35dc:	60 e1       	ldi	r22, 0x10	; 16
    35de:	70 e0       	ldi	r23, 0x00	; 0
    35e0:	c5 01       	movw	r24, r10
    35e2:	0e 94 67 19 	call	0x32ce	; 0x32ce <_ZN4OSFS14writeNBytesChkEjjPKv>
    35e6:	a7 01       	movw	r20, r14
    35e8:	b8 01       	movw	r22, r16
    35ea:	c5 01       	movw	r24, r10
    35ec:	40 96       	adiw	r24, 0x10	; 16
    35ee:	0e 94 67 19 	call	0x32ce	; 0x32ce <_ZN4OSFS14writeNBytesChkEjjPKv>
    35f2:	26 c0       	rjmp	.+76     	; 0x3640 <_ZN4OSFS7newFileEPKcPvjb+0x158>
    35f4:	84 e0       	ldi	r24, 0x04	; 4
    35f6:	90 e0       	ldi	r25, 0x00	; 0
    35f8:	23 c0       	rjmp	.+70     	; 0x3640 <_ZN4OSFS7newFileEPKcPvjb+0x158>
    35fa:	87 e0       	ldi	r24, 0x07	; 7
    35fc:	90 e0       	ldi	r25, 0x00	; 0
    35fe:	20 c0       	rjmp	.+64     	; 0x3640 <_ZN4OSFS7newFileEPKcPvjb+0x158>
    3600:	84 e0       	ldi	r24, 0x04	; 4
    3602:	90 e0       	ldi	r25, 0x00	; 0
    3604:	1d c0       	rjmp	.+58     	; 0x3640 <_ZN4OSFS7newFileEPKcPvjb+0x158>
    3606:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3608:	9d 8d       	ldd	r25, Y+29	; 0x1d
    360a:	08 17       	cp	r16, r24
    360c:	19 07       	cpc	r17, r25
    360e:	a9 f7       	brne	.-22     	; 0x35fa <_ZN4OSFS7newFileEPKcPvjb+0x112>
    3610:	ae cf       	rjmp	.-164    	; 0x356e <_ZN4OSFS7newFileEPKcPvjb+0x86>
    3612:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3614:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3616:	00 97       	sbiw	r24, 0x00	; 0
    3618:	09 f4       	brne	.+2      	; 0x361c <_ZN4OSFS7newFileEPKcPvjb+0x134>
    361a:	ae cf       	rjmp	.-164    	; 0x3578 <_ZN4OSFS7newFileEPKcPvjb+0x90>
    361c:	6c 01       	movw	r12, r24
    361e:	8c cf       	rjmp	.-232    	; 0x3538 <_ZN4OSFS7newFileEPKcPvjb+0x50>
    3620:	1d 87       	std	Y+13, r17	; 0x0d
    3622:	0c 87       	std	Y+12, r16	; 0x0c
    3624:	c7 cf       	rjmp	.-114    	; 0x35b4 <_ZN4OSFS7newFileEPKcPvjb+0xcc>
    3626:	56 01       	movw	r10, r12
    3628:	c8 01       	movw	r24, r16
    362a:	0f 96       	adiw	r24, 0x0f	; 15
    362c:	8a 0d       	add	r24, r10
    362e:	9b 1d       	adc	r25, r11
    3630:	20 91 94 01 	lds	r18, 0x0194	; 0x800194 <_ZN4OSFS11endOfEEPROME>
    3634:	30 91 95 01 	lds	r19, 0x0195	; 0x800195 <_ZN4OSFS11endOfEEPROME+0x1>
    3638:	28 17       	cp	r18, r24
    363a:	39 07       	cpc	r19, r25
    363c:	08 f3       	brcs	.-62     	; 0x3600 <_ZN4OSFS7newFileEPKcPvjb+0x118>
    363e:	f0 cf       	rjmp	.-32     	; 0x3620 <_ZN4OSFS7newFileEPKcPvjb+0x138>
    3640:	a2 96       	adiw	r28, 0x22	; 34
    3642:	0f b6       	in	r0, 0x3f	; 63
    3644:	f8 94       	cli
    3646:	de bf       	out	0x3e, r29	; 62
    3648:	0f be       	out	0x3f, r0	; 63
    364a:	cd bf       	out	0x3d, r28	; 61
    364c:	df 91       	pop	r29
    364e:	cf 91       	pop	r28
    3650:	1f 91       	pop	r17
    3652:	0f 91       	pop	r16
    3654:	ff 90       	pop	r15
    3656:	ef 90       	pop	r14
    3658:	df 90       	pop	r13
    365a:	cf 90       	pop	r12
    365c:	bf 90       	pop	r11
    365e:	af 90       	pop	r10
    3660:	08 95       	ret

00003662 <_ZN4OSFS6formatEv>:
		}

		return result::NO_ERROR;
	}

	result format() {
    3662:	cf 93       	push	r28
    3664:	df 93       	push	r29
    3666:	cd b7       	in	r28, 0x3d	; 61
    3668:	de b7       	in	r29, 0x3e	; 62
    366a:	66 97       	sbiw	r28, 0x16	; 22
    366c:	0f b6       	in	r0, 0x3f	; 63
    366e:	f8 94       	cli
    3670:	de bf       	out	0x3e, r29	; 62
    3672:	0f be       	out	0x3f, r0	; 63
    3674:	cd bf       	out	0x3d, r28	; 61

		// Create identifying info for this version
		FSInfo thisInfo;

		strncpy(thisInfo.idStr, OSFS_ID_STR, 4);
    3676:	8f e4       	ldi	r24, 0x4F	; 79
    3678:	93 e5       	ldi	r25, 0x53	; 83
    367a:	9a 83       	std	Y+2, r25	; 0x02
    367c:	89 83       	std	Y+1, r24	; 0x01
    367e:	86 e4       	ldi	r24, 0x46	; 70
    3680:	93 e5       	ldi	r25, 0x53	; 83
    3682:	9c 83       	std	Y+4, r25	; 0x04
    3684:	8b 83       	std	Y+3, r24	; 0x03
		thisInfo.version = OSFS_VER;
    3686:	82 e0       	ldi	r24, 0x02	; 2
    3688:	90 e0       	ldi	r25, 0x00	; 0
    368a:	9e 83       	std	Y+6, r25	; 0x06
    368c:	8d 83       	std	Y+5, r24	; 0x05

		// Write this to the FS
		result r = writeNBytesChk(startOfEEPROM, sizeof(FSInfo), &thisInfo);
    368e:	ae 01       	movw	r20, r28
    3690:	4f 5f       	subi	r20, 0xFF	; 255
    3692:	5f 4f       	sbci	r21, 0xFF	; 255
    3694:	66 e0       	ldi	r22, 0x06	; 6
    3696:	70 e0       	ldi	r23, 0x00	; 0
    3698:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <_ZN4OSFS13startOfEEPROME>
    369c:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <_ZN4OSFS13startOfEEPROME+0x1>
    36a0:	0e 94 67 19 	call	0x32ce	; 0x32ce <_ZN4OSFS14writeNBytesChkEjjPKv>
    36a4:	9c 01       	movw	r18, r24

		if (r != result::NO_ERROR)
    36a6:	00 97       	sbiw	r24, 0x00	; 0
    36a8:	c9 f4       	brne	.+50     	; 0x36dc <_ZN4OSFS6formatEv+0x7a>
			return r;

		// Create a dummy file header, marking where the next file will go
		fileHeader dummyHeader;
		padFilename("", dummyHeader.fileID);
    36aa:	be 01       	movw	r22, r28
    36ac:	69 5f       	subi	r22, 0xF9	; 249
    36ae:	7f 4f       	sbci	r23, 0xFF	; 255
    36b0:	8f e2       	ldi	r24, 0x2F	; 47
    36b2:	92 e0       	ldi	r25, 0x02	; 2
    36b4:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <_ZN4OSFS11padFilenameEPKcPc>
		dummyHeader.fileSize = 0;
    36b8:	1b 8a       	std	Y+19, r1	; 0x13
    36ba:	1a 8a       	std	Y+18, r1	; 0x12
		dummyHeader.nextFile = 0;
    36bc:	1d 8a       	std	Y+21, r1	; 0x15
    36be:	1c 8a       	std	Y+20, r1	; 0x14
		dummyHeader.flags = 0;
    36c0:	1e 8a       	std	Y+22, r1	; 0x16

		// Store this after the FS identifying info
		return writeNBytesChk(startOfEEPROM + sizeof(FSInfo), sizeof(fileHeader), &dummyHeader);
    36c2:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <_ZN4OSFS13startOfEEPROME>
    36c6:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <_ZN4OSFS13startOfEEPROME+0x1>
    36ca:	ae 01       	movw	r20, r28
    36cc:	49 5f       	subi	r20, 0xF9	; 249
    36ce:	5f 4f       	sbci	r21, 0xFF	; 255
    36d0:	60 e1       	ldi	r22, 0x10	; 16
    36d2:	70 e0       	ldi	r23, 0x00	; 0
    36d4:	06 96       	adiw	r24, 0x06	; 6
    36d6:	0e 94 67 19 	call	0x32ce	; 0x32ce <_ZN4OSFS14writeNBytesChkEjjPKv>
    36da:	01 c0       	rjmp	.+2      	; 0x36de <_ZN4OSFS6formatEv+0x7c>

		// Write this to the FS
		result r = writeNBytesChk(startOfEEPROM, sizeof(FSInfo), &thisInfo);

		if (r != result::NO_ERROR)
			return r;
    36dc:	93 2f       	mov	r25, r19
		dummyHeader.nextFile = 0;
		dummyHeader.flags = 0;

		// Store this after the FS identifying info
		return writeNBytesChk(startOfEEPROM + sizeof(FSInfo), sizeof(fileHeader), &dummyHeader);
	}
    36de:	66 96       	adiw	r28, 0x16	; 22
    36e0:	0f b6       	in	r0, 0x3f	; 63
    36e2:	f8 94       	cli
    36e4:	de bf       	out	0x3e, r29	; 62
    36e6:	0f be       	out	0x3f, r0	; 63
    36e8:	cd bf       	out	0x3d, r28	; 61
    36ea:	df 91       	pop	r29
    36ec:	cf 91       	pop	r28
    36ee:	08 95       	ret

000036f0 <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    36f0:	cf 93       	push	r28
  uint8_t sreg = SREG;
    36f2:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    36f4:	f8 94       	cli
  if (!initialized) {
    36f6:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <_ZN8SPIClass11initializedE>
    36fa:	81 11       	cpse	r24, r1
    36fc:	27 c0       	rjmp	.+78     	; 0x374c <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    36fe:	e0 e5       	ldi	r30, 0x50	; 80
    3700:	f0 e3       	ldi	r31, 0x30	; 48
    3702:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    3704:	ec e3       	ldi	r30, 0x3C	; 60
    3706:	f0 e3       	ldi	r31, 0x30	; 48
    3708:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    370a:	e8 2f       	mov	r30, r24
    370c:	f0 e0       	ldi	r31, 0x00	; 0
    370e:	ee 0f       	add	r30, r30
    3710:	ff 1f       	adc	r31, r31
    3712:	e2 59       	subi	r30, 0x92	; 146
    3714:	ff 4c       	sbci	r31, 0xCF	; 207
    3716:	a5 91       	lpm	r26, Z+
    3718:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    371a:	ec 91       	ld	r30, X
    371c:	e9 23       	and	r30, r25
    371e:	21 f4       	brne	.+8      	; 0x3728 <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    3720:	61 e0       	ldi	r22, 0x01	; 1
    3722:	8a e0       	ldi	r24, 0x0A	; 10
    3724:	0e 94 bd 36 	call	0x6d7a	; 0x6d7a <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    3728:	61 e0       	ldi	r22, 0x01	; 1
    372a:	8a e0       	ldi	r24, 0x0A	; 10
    372c:	0e 94 81 36 	call	0x6d02	; 0x6d02 <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    3730:	8c b5       	in	r24, 0x2c	; 44
    3732:	80 61       	ori	r24, 0x10	; 16
    3734:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    3736:	8c b5       	in	r24, 0x2c	; 44
    3738:	80 64       	ori	r24, 0x40	; 64
    373a:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    373c:	61 e0       	ldi	r22, 0x01	; 1
    373e:	8d e0       	ldi	r24, 0x0D	; 13
    3740:	0e 94 81 36 	call	0x6d02	; 0x6d02 <pinMode>
    pinMode(MOSI, OUTPUT);
    3744:	61 e0       	ldi	r22, 0x01	; 1
    3746:	8b e0       	ldi	r24, 0x0B	; 11
    3748:	0e 94 81 36 	call	0x6d02	; 0x6d02 <pinMode>
  }
  initialized++; // reference count
    374c:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <_ZN8SPIClass11initializedE>
    3750:	8f 5f       	subi	r24, 0xFF	; 255
    3752:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <_ZN8SPIClass11initializedE>
  SREG = sreg;
    3756:	cf bf       	out	0x3f, r28	; 63
}
    3758:	cf 91       	pop	r28
    375a:	08 95       	ret

0000375c <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    375c:	80 e0       	ldi	r24, 0x00	; 0
    375e:	90 e0       	ldi	r25, 0x00	; 0
    3760:	08 95       	ret

00003762 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    3762:	08 95       	ret

00003764 <_ZN3TFTC1Ehhh>:

#if ARDUINO_AVR_ESPLORA
TFT EsploraTFT(7, 0, 1);
#endif

TFT::TFT(uint8_t CS, uint8_t RS, uint8_t RST) 
    3764:	cf 93       	push	r28
    3766:	df 93       	push	r29
    3768:	ec 01       	movw	r28, r24
  : Adafruit_ST7735(CS, RS, RST)
    376a:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <_ZN15Adafruit_ST7735C1Ehhh>
    376e:	82 ea       	ldi	r24, 0xA2	; 162
    3770:	91 e0       	ldi	r25, 0x01	; 1
    3772:	99 83       	std	Y+1, r25	; 0x01
    3774:	88 83       	st	Y, r24
{
  // as we already know the orientation (landscape, therefore rotated),
  // set default width and height without need to call begin() first.
  _width = ST7735_TFTHEIGHT;
    3776:	80 ea       	ldi	r24, 0xA0	; 160
    3778:	90 e0       	ldi	r25, 0x00	; 0
    377a:	99 87       	std	Y+9, r25	; 0x09
    377c:	88 87       	std	Y+8, r24	; 0x08
  _height = ST7735_TFTWIDTH;
    377e:	80 e8       	ldi	r24, 0x80	; 128
    3780:	90 e0       	ldi	r25, 0x00	; 0
    3782:	9b 87       	std	Y+11, r25	; 0x0b
    3784:	8a 87       	std	Y+10, r24	; 0x0a
}
    3786:	df 91       	pop	r29
    3788:	cf 91       	pop	r28
    378a:	08 95       	ret

0000378c <_ZN3TFT5beginEv>:

void TFT::begin() {
    378c:	cf 93       	push	r28
    378e:	df 93       	push	r29
    3790:	ec 01       	movw	r28, r24
//initR(INITR_REDTAB);
  initG();
    3792:	0e 94 a0 21 	call	0x4340	; 0x4340 <_ZN15Adafruit_ST77355initGEv>
  setRotation(1);
    3796:	61 e0       	ldi	r22, 0x01	; 1
    3798:	ce 01       	movw	r24, r28
    379a:	0e 94 d2 25 	call	0x4ba4	; 0x4ba4 <_ZN15Adafruit_ST773511setRotationEh>
}
    379e:	df 91       	pop	r29
    37a0:	cf 91       	pop	r28
    37a2:	08 95       	ret

000037a4 <_ZN12Adafruit_GFX8drawLineEiiiij>:
    return;
  
  setTextWrap(true);
  setTextColor(strokeColor);
  setCursor(x, y);
  print(text);
    37a4:	2f 92       	push	r2
    37a6:	3f 92       	push	r3
    37a8:	4f 92       	push	r4
    37aa:	5f 92       	push	r5
    37ac:	6f 92       	push	r6
    37ae:	7f 92       	push	r7
    37b0:	8f 92       	push	r8
    37b2:	9f 92       	push	r9
    37b4:	af 92       	push	r10
    37b6:	bf 92       	push	r11
    37b8:	cf 92       	push	r12
    37ba:	df 92       	push	r13
    37bc:	ef 92       	push	r14
    37be:	ff 92       	push	r15
    37c0:	0f 93       	push	r16
    37c2:	1f 93       	push	r17
    37c4:	cf 93       	push	r28
    37c6:	df 93       	push	r29
    37c8:	00 d0       	rcall	.+0      	; 0x37ca <_ZN12Adafruit_GFX8drawLineEiiiij+0x26>
    37ca:	00 d0       	rcall	.+0      	; 0x37cc <_ZN12Adafruit_GFX8drawLineEiiiij+0x28>
    37cc:	00 d0       	rcall	.+0      	; 0x37ce <_ZN12Adafruit_GFX8drawLineEiiiij+0x2a>
    37ce:	cd b7       	in	r28, 0x3d	; 61
    37d0:	de b7       	in	r29, 0x3e	; 62
    37d2:	5c 01       	movw	r10, r24
    37d4:	7e 83       	std	Y+6, r23	; 0x06
    37d6:	6d 83       	std	Y+5, r22	; 0x05
    37d8:	6a 01       	movw	r12, r20
    37da:	49 01       	movw	r8, r18
    37dc:	c8 01       	movw	r24, r16
    37de:	fa 82       	std	Y+2, r15	; 0x02
    37e0:	e9 82       	std	Y+1, r14	; 0x01
    37e2:	98 01       	movw	r18, r16
    37e4:	24 1b       	sub	r18, r20
    37e6:	35 0b       	sbc	r19, r21
    37e8:	29 01       	movw	r4, r18
    37ea:	22 f4       	brpl	.+8      	; 0x37f4 <_ZN12Adafruit_GFX8drawLineEiiiij+0x50>
    37ec:	44 24       	eor	r4, r4
    37ee:	55 24       	eor	r5, r5
    37f0:	42 1a       	sub	r4, r18
    37f2:	53 0a       	sbc	r5, r19
    37f4:	94 01       	movw	r18, r8
    37f6:	4d 81       	ldd	r20, Y+5	; 0x05
    37f8:	5e 81       	ldd	r21, Y+6	; 0x06
    37fa:	24 1b       	sub	r18, r20
    37fc:	35 0b       	sbc	r19, r21
    37fe:	79 01       	movw	r14, r18
    3800:	22 f4       	brpl	.+8      	; 0x380a <_ZN12Adafruit_GFX8drawLineEiiiij+0x66>
    3802:	ee 24       	eor	r14, r14
    3804:	ff 24       	eor	r15, r15
    3806:	e2 1a       	sub	r14, r18
    3808:	f3 0a       	sbc	r15, r19
    380a:	e4 14       	cp	r14, r4
    380c:	f5 04       	cpc	r15, r5
    380e:	5c f4       	brge	.+22     	; 0x3826 <_ZN12Adafruit_GFX8drawLineEiiiij+0x82>
    3810:	38 2d       	mov	r19, r8
    3812:	29 2d       	mov	r18, r9
    3814:	4c 01       	movw	r8, r24
    3816:	83 2f       	mov	r24, r19
    3818:	92 2f       	mov	r25, r18
    381a:	3d 81       	ldd	r19, Y+5	; 0x05
    381c:	2e 81       	ldd	r18, Y+6	; 0x06
    381e:	de 82       	std	Y+6, r13	; 0x06
    3820:	cd 82       	std	Y+5, r12	; 0x05
    3822:	c3 2e       	mov	r12, r19
    3824:	d2 2e       	mov	r13, r18
    3826:	ad 81       	ldd	r26, Y+5	; 0x05
    3828:	be 81       	ldd	r27, Y+6	; 0x06
    382a:	8a 16       	cp	r8, r26
    382c:	9b 06       	cpc	r9, r27
    382e:	0c f0       	brlt	.+2      	; 0x3832 <_ZN12Adafruit_GFX8drawLineEiiiij+0x8e>
    3830:	5f c0       	rjmp	.+190    	; 0x38f0 <_ZN12Adafruit_GFX8drawLineEiiiij+0x14c>
    3832:	a8 19       	sub	r26, r8
    3834:	b9 09       	sbc	r27, r9
    3836:	bc 83       	std	Y+4, r27	; 0x04
    3838:	ab 83       	std	Y+3, r26	; 0x03
    383a:	96 01       	movw	r18, r12
    383c:	28 1b       	sub	r18, r24
    383e:	39 0b       	sbc	r19, r25
    3840:	19 01       	movw	r2, r18
    3842:	22 f4       	brpl	.+8      	; 0x384c <_ZN12Adafruit_GFX8drawLineEiiiij+0xa8>
    3844:	22 24       	eor	r2, r2
    3846:	33 24       	eor	r3, r3
    3848:	22 1a       	sub	r2, r18
    384a:	33 0a       	sbc	r3, r19
    384c:	6b 80       	ldd	r6, Y+3	; 0x03
    384e:	7c 80       	ldd	r7, Y+4	; 0x04
    3850:	77 20       	and	r7, r7
    3852:	1c f4       	brge	.+6      	; 0x385a <_ZN12Adafruit_GFX8drawLineEiiiij+0xb6>
    3854:	bf ef       	ldi	r27, 0xFF	; 255
    3856:	6b 1a       	sub	r6, r27
    3858:	7b 0a       	sbc	r7, r27
    385a:	75 94       	asr	r7
    385c:	67 94       	ror	r6
    385e:	8c 15       	cp	r24, r12
    3860:	9d 05       	cpc	r25, r13
    3862:	1c f4       	brge	.+6      	; 0x386a <_ZN12Adafruit_GFX8drawLineEiiiij+0xc6>
    3864:	01 e0       	ldi	r16, 0x01	; 1
    3866:	10 e0       	ldi	r17, 0x00	; 0
    3868:	02 c0       	rjmp	.+4      	; 0x386e <_ZN12Adafruit_GFX8drawLineEiiiij+0xca>
    386a:	0f ef       	ldi	r16, 0xFF	; 255
    386c:	1f ef       	ldi	r17, 0xFF	; 255
    386e:	2d 81       	ldd	r18, Y+5	; 0x05
    3870:	3e 81       	ldd	r19, Y+6	; 0x06
    3872:	28 15       	cp	r18, r8
    3874:	39 05       	cpc	r19, r9
    3876:	0c f4       	brge	.+2      	; 0x387a <_ZN12Adafruit_GFX8drawLineEiiiij+0xd6>
    3878:	5b c0       	rjmp	.+182    	; 0x3930 <_ZN12Adafruit_GFX8drawLineEiiiij+0x18c>
    387a:	6c 01       	movw	r12, r24
    387c:	9d 81       	ldd	r25, Y+5	; 0x05
    387e:	8e 81       	ldd	r24, Y+6	; 0x06
    3880:	9e 82       	std	Y+6, r9	; 0x06
    3882:	8d 82       	std	Y+5, r8	; 0x05
    3884:	89 2e       	mov	r8, r25
    3886:	98 2e       	mov	r9, r24
    3888:	02 c0       	rjmp	.+4      	; 0x388e <_ZN12Adafruit_GFX8drawLineEiiiij+0xea>
    388a:	0f ef       	ldi	r16, 0xFF	; 255
    388c:	1f ef       	ldi	r17, 0xFF	; 255
    388e:	e4 14       	cp	r14, r4
    3890:	f5 04       	cpc	r15, r5
    3892:	74 f4       	brge	.+28     	; 0x38b0 <_ZN12Adafruit_GFX8drawLineEiiiij+0x10c>
    3894:	d5 01       	movw	r26, r10
    3896:	ed 91       	ld	r30, X+
    3898:	fc 91       	ld	r31, X
    389a:	00 84       	ldd	r0, Z+8	; 0x08
    389c:	f1 85       	ldd	r31, Z+9	; 0x09
    389e:	e0 2d       	mov	r30, r0
    38a0:	29 81       	ldd	r18, Y+1	; 0x01
    38a2:	3a 81       	ldd	r19, Y+2	; 0x02
    38a4:	4d 81       	ldd	r20, Y+5	; 0x05
    38a6:	5e 81       	ldd	r21, Y+6	; 0x06
    38a8:	b6 01       	movw	r22, r12
    38aa:	c5 01       	movw	r24, r10
    38ac:	09 95       	icall
    38ae:	0d c0       	rjmp	.+26     	; 0x38ca <_ZN12Adafruit_GFX8drawLineEiiiij+0x126>
    38b0:	d5 01       	movw	r26, r10
    38b2:	ed 91       	ld	r30, X+
    38b4:	fc 91       	ld	r31, X
    38b6:	00 84       	ldd	r0, Z+8	; 0x08
    38b8:	f1 85       	ldd	r31, Z+9	; 0x09
    38ba:	e0 2d       	mov	r30, r0
    38bc:	29 81       	ldd	r18, Y+1	; 0x01
    38be:	3a 81       	ldd	r19, Y+2	; 0x02
    38c0:	a6 01       	movw	r20, r12
    38c2:	6d 81       	ldd	r22, Y+5	; 0x05
    38c4:	7e 81       	ldd	r23, Y+6	; 0x06
    38c6:	c5 01       	movw	r24, r10
    38c8:	09 95       	icall
    38ca:	62 18       	sub	r6, r2
    38cc:	73 08       	sbc	r7, r3
    38ce:	32 f4       	brpl	.+12     	; 0x38dc <_ZN12Adafruit_GFX8drawLineEiiiij+0x138>
    38d0:	c0 0e       	add	r12, r16
    38d2:	d1 1e       	adc	r13, r17
    38d4:	2b 81       	ldd	r18, Y+3	; 0x03
    38d6:	3c 81       	ldd	r19, Y+4	; 0x04
    38d8:	62 0e       	add	r6, r18
    38da:	73 1e       	adc	r7, r19
    38dc:	4d 81       	ldd	r20, Y+5	; 0x05
    38de:	5e 81       	ldd	r21, Y+6	; 0x06
    38e0:	4f 5f       	subi	r20, 0xFF	; 255
    38e2:	5f 4f       	sbci	r21, 0xFF	; 255
    38e4:	5e 83       	std	Y+6, r21	; 0x06
    38e6:	4d 83       	std	Y+5, r20	; 0x05
    38e8:	84 16       	cp	r8, r20
    38ea:	95 06       	cpc	r9, r21
    38ec:	84 f6       	brge	.-96     	; 0x388e <_ZN12Adafruit_GFX8drawLineEiiiij+0xea>
    38ee:	20 c0       	rjmp	.+64     	; 0x3930 <_ZN12Adafruit_GFX8drawLineEiiiij+0x18c>
    38f0:	d4 01       	movw	r26, r8
    38f2:	2d 81       	ldd	r18, Y+5	; 0x05
    38f4:	3e 81       	ldd	r19, Y+6	; 0x06
    38f6:	a2 1b       	sub	r26, r18
    38f8:	b3 0b       	sbc	r27, r19
    38fa:	bc 83       	std	Y+4, r27	; 0x04
    38fc:	ab 83       	std	Y+3, r26	; 0x03
    38fe:	9c 01       	movw	r18, r24
    3900:	2c 19       	sub	r18, r12
    3902:	3d 09       	sbc	r19, r13
    3904:	19 01       	movw	r2, r18
    3906:	22 f4       	brpl	.+8      	; 0x3910 <_ZN12Adafruit_GFX8drawLineEiiiij+0x16c>
    3908:	22 24       	eor	r2, r2
    390a:	33 24       	eor	r3, r3
    390c:	22 1a       	sub	r2, r18
    390e:	33 0a       	sbc	r3, r19
    3910:	6b 80       	ldd	r6, Y+3	; 0x03
    3912:	7c 80       	ldd	r7, Y+4	; 0x04
    3914:	77 20       	and	r7, r7
    3916:	1c f4       	brge	.+6      	; 0x391e <_ZN12Adafruit_GFX8drawLineEiiiij+0x17a>
    3918:	3f ef       	ldi	r19, 0xFF	; 255
    391a:	63 1a       	sub	r6, r19
    391c:	73 0a       	sbc	r7, r19
    391e:	75 94       	asr	r7
    3920:	67 94       	ror	r6
    3922:	c8 16       	cp	r12, r24
    3924:	d9 06       	cpc	r13, r25
    3926:	0c f0       	brlt	.+2      	; 0x392a <_ZN12Adafruit_GFX8drawLineEiiiij+0x186>
    3928:	b0 cf       	rjmp	.-160    	; 0x388a <_ZN12Adafruit_GFX8drawLineEiiiij+0xe6>
    392a:	01 e0       	ldi	r16, 0x01	; 1
    392c:	10 e0       	ldi	r17, 0x00	; 0
    392e:	af cf       	rjmp	.-162    	; 0x388e <_ZN12Adafruit_GFX8drawLineEiiiij+0xea>
    3930:	26 96       	adiw	r28, 0x06	; 6
    3932:	0f b6       	in	r0, 0x3f	; 63
    3934:	f8 94       	cli
    3936:	de bf       	out	0x3e, r29	; 62
    3938:	0f be       	out	0x3f, r0	; 63
    393a:	cd bf       	out	0x3d, r28	; 61
    393c:	df 91       	pop	r29
    393e:	cf 91       	pop	r28
    3940:	1f 91       	pop	r17
    3942:	0f 91       	pop	r16
    3944:	ff 90       	pop	r15
    3946:	ef 90       	pop	r14
    3948:	df 90       	pop	r13
    394a:	cf 90       	pop	r12
    394c:	bf 90       	pop	r11
    394e:	af 90       	pop	r10
    3950:	9f 90       	pop	r9
    3952:	8f 90       	pop	r8
    3954:	7f 90       	pop	r7
    3956:	6f 90       	pop	r6
    3958:	5f 90       	pop	r5
    395a:	4f 90       	pop	r4
    395c:	3f 90       	pop	r3
    395e:	2f 90       	pop	r2
    3960:	08 95       	ret

00003962 <_ZN12Adafruit_GFX8drawRectEiiiij>:
    3962:	6f 92       	push	r6
    3964:	7f 92       	push	r7
    3966:	8f 92       	push	r8
    3968:	9f 92       	push	r9
    396a:	af 92       	push	r10
    396c:	bf 92       	push	r11
    396e:	cf 92       	push	r12
    3970:	df 92       	push	r13
    3972:	ef 92       	push	r14
    3974:	ff 92       	push	r15
    3976:	0f 93       	push	r16
    3978:	1f 93       	push	r17
    397a:	cf 93       	push	r28
    397c:	df 93       	push	r29
    397e:	ec 01       	movw	r28, r24
    3980:	4b 01       	movw	r8, r22
    3982:	5a 01       	movw	r10, r20
    3984:	69 01       	movw	r12, r18
    3986:	38 01       	movw	r6, r16
    3988:	e8 81       	ld	r30, Y
    398a:	f9 81       	ldd	r31, Y+1	; 0x01
    398c:	06 84       	ldd	r0, Z+14	; 0x0e
    398e:	f7 85       	ldd	r31, Z+15	; 0x0f
    3990:	e0 2d       	mov	r30, r0
    3992:	87 01       	movw	r16, r14
    3994:	09 95       	icall
    3996:	a5 01       	movw	r20, r10
    3998:	46 0d       	add	r20, r6
    399a:	57 1d       	adc	r21, r7
    399c:	41 50       	subi	r20, 0x01	; 1
    399e:	51 09       	sbc	r21, r1
    39a0:	e8 81       	ld	r30, Y
    39a2:	f9 81       	ldd	r31, Y+1	; 0x01
    39a4:	06 84       	ldd	r0, Z+14	; 0x0e
    39a6:	f7 85       	ldd	r31, Z+15	; 0x0f
    39a8:	e0 2d       	mov	r30, r0
    39aa:	96 01       	movw	r18, r12
    39ac:	b4 01       	movw	r22, r8
    39ae:	ce 01       	movw	r24, r28
    39b0:	09 95       	icall
    39b2:	e8 81       	ld	r30, Y
    39b4:	f9 81       	ldd	r31, Y+1	; 0x01
    39b6:	04 84       	ldd	r0, Z+12	; 0x0c
    39b8:	f5 85       	ldd	r31, Z+13	; 0x0d
    39ba:	e0 2d       	mov	r30, r0
    39bc:	93 01       	movw	r18, r6
    39be:	a5 01       	movw	r20, r10
    39c0:	b4 01       	movw	r22, r8
    39c2:	ce 01       	movw	r24, r28
    39c4:	09 95       	icall
    39c6:	c8 0c       	add	r12, r8
    39c8:	d9 1c       	adc	r13, r9
    39ca:	b6 01       	movw	r22, r12
    39cc:	61 50       	subi	r22, 0x01	; 1
    39ce:	71 09       	sbc	r23, r1
    39d0:	e8 81       	ld	r30, Y
    39d2:	f9 81       	ldd	r31, Y+1	; 0x01
    39d4:	04 84       	ldd	r0, Z+12	; 0x0c
    39d6:	f5 85       	ldd	r31, Z+13	; 0x0d
    39d8:	e0 2d       	mov	r30, r0
    39da:	93 01       	movw	r18, r6
    39dc:	a5 01       	movw	r20, r10
    39de:	ce 01       	movw	r24, r28
    39e0:	09 95       	icall
    39e2:	df 91       	pop	r29
    39e4:	cf 91       	pop	r28
    39e6:	1f 91       	pop	r17
    39e8:	0f 91       	pop	r16
    39ea:	ff 90       	pop	r15
    39ec:	ef 90       	pop	r14
    39ee:	df 90       	pop	r13
    39f0:	cf 90       	pop	r12
    39f2:	bf 90       	pop	r11
    39f4:	af 90       	pop	r10
    39f6:	9f 90       	pop	r9
    39f8:	8f 90       	pop	r8
    39fa:	7f 90       	pop	r7
    39fc:	6f 90       	pop	r6
    39fe:	08 95       	ret

00003a00 <_ZN12Adafruit_GFX13drawFastVLineEiiij>:
    3a00:	ef 92       	push	r14
    3a02:	ff 92       	push	r15
    3a04:	0f 93       	push	r16
    3a06:	1f 93       	push	r17
    3a08:	24 0f       	add	r18, r20
    3a0a:	35 1f       	adc	r19, r21
    3a0c:	21 50       	subi	r18, 0x01	; 1
    3a0e:	31 09       	sbc	r19, r1
    3a10:	dc 01       	movw	r26, r24
    3a12:	ed 91       	ld	r30, X+
    3a14:	fc 91       	ld	r31, X
    3a16:	02 84       	ldd	r0, Z+10	; 0x0a
    3a18:	f3 85       	ldd	r31, Z+11	; 0x0b
    3a1a:	e0 2d       	mov	r30, r0
    3a1c:	78 01       	movw	r14, r16
    3a1e:	89 01       	movw	r16, r18
    3a20:	9b 01       	movw	r18, r22
    3a22:	09 95       	icall
    3a24:	1f 91       	pop	r17
    3a26:	0f 91       	pop	r16
    3a28:	ff 90       	pop	r15
    3a2a:	ef 90       	pop	r14
    3a2c:	08 95       	ret

00003a2e <_ZN12Adafruit_GFX13drawFastHLineEiiij>:
    3a2e:	ef 92       	push	r14
    3a30:	ff 92       	push	r15
    3a32:	0f 93       	push	r16
    3a34:	1f 93       	push	r17
    3a36:	26 0f       	add	r18, r22
    3a38:	37 1f       	adc	r19, r23
    3a3a:	21 50       	subi	r18, 0x01	; 1
    3a3c:	31 09       	sbc	r19, r1
    3a3e:	dc 01       	movw	r26, r24
    3a40:	ed 91       	ld	r30, X+
    3a42:	fc 91       	ld	r31, X
    3a44:	02 84       	ldd	r0, Z+10	; 0x0a
    3a46:	f3 85       	ldd	r31, Z+11	; 0x0b
    3a48:	e0 2d       	mov	r30, r0
    3a4a:	78 01       	movw	r14, r16
    3a4c:	8a 01       	movw	r16, r20
    3a4e:	09 95       	icall
    3a50:	1f 91       	pop	r17
    3a52:	0f 91       	pop	r16
    3a54:	ff 90       	pop	r15
    3a56:	ef 90       	pop	r14
    3a58:	08 95       	ret

00003a5a <_ZN12Adafruit_GFX8fillRectEiiiij>:
    3a5a:	6f 92       	push	r6
    3a5c:	7f 92       	push	r7
    3a5e:	8f 92       	push	r8
    3a60:	9f 92       	push	r9
    3a62:	af 92       	push	r10
    3a64:	bf 92       	push	r11
    3a66:	cf 92       	push	r12
    3a68:	df 92       	push	r13
    3a6a:	ef 92       	push	r14
    3a6c:	ff 92       	push	r15
    3a6e:	0f 93       	push	r16
    3a70:	1f 93       	push	r17
    3a72:	cf 93       	push	r28
    3a74:	df 93       	push	r29
    3a76:	6c 01       	movw	r12, r24
    3a78:	eb 01       	movw	r28, r22
    3a7a:	4a 01       	movw	r8, r20
    3a7c:	58 01       	movw	r10, r16
    3a7e:	37 01       	movw	r6, r14
    3a80:	7b 01       	movw	r14, r22
    3a82:	e2 0e       	add	r14, r18
    3a84:	f3 1e       	adc	r15, r19
    3a86:	6e 15       	cp	r22, r14
    3a88:	7f 05       	cpc	r23, r15
    3a8a:	84 f4       	brge	.+32     	; 0x3aac <_ZN12Adafruit_GFX8fillRectEiiiij+0x52>
    3a8c:	d6 01       	movw	r26, r12
    3a8e:	ed 91       	ld	r30, X+
    3a90:	fc 91       	ld	r31, X
    3a92:	04 84       	ldd	r0, Z+12	; 0x0c
    3a94:	f5 85       	ldd	r31, Z+13	; 0x0d
    3a96:	e0 2d       	mov	r30, r0
    3a98:	83 01       	movw	r16, r6
    3a9a:	95 01       	movw	r18, r10
    3a9c:	a4 01       	movw	r20, r8
    3a9e:	be 01       	movw	r22, r28
    3aa0:	c6 01       	movw	r24, r12
    3aa2:	09 95       	icall
    3aa4:	21 96       	adiw	r28, 0x01	; 1
    3aa6:	ce 15       	cp	r28, r14
    3aa8:	df 05       	cpc	r29, r15
    3aaa:	84 f3       	brlt	.-32     	; 0x3a8c <_ZN12Adafruit_GFX8fillRectEiiiij+0x32>
    3aac:	df 91       	pop	r29
    3aae:	cf 91       	pop	r28
    3ab0:	1f 91       	pop	r17
    3ab2:	0f 91       	pop	r16
    3ab4:	ff 90       	pop	r15
    3ab6:	ef 90       	pop	r14
    3ab8:	df 90       	pop	r13
    3aba:	cf 90       	pop	r12
    3abc:	bf 90       	pop	r11
    3abe:	af 90       	pop	r10
    3ac0:	9f 90       	pop	r9
    3ac2:	8f 90       	pop	r8
    3ac4:	7f 90       	pop	r7
    3ac6:	6f 90       	pop	r6
    3ac8:	08 95       	ret

00003aca <_ZN12Adafruit_GFX10fillScreenEj>:
    3aca:	ef 92       	push	r14
    3acc:	ff 92       	push	r15
    3ace:	0f 93       	push	r16
    3ad0:	1f 93       	push	r17
    3ad2:	dc 01       	movw	r26, r24
    3ad4:	1a 96       	adiw	r26, 0x0a	; 10
    3ad6:	0d 91       	ld	r16, X+
    3ad8:	1c 91       	ld	r17, X
    3ada:	1b 97       	sbiw	r26, 0x0b	; 11
    3adc:	18 96       	adiw	r26, 0x08	; 8
    3ade:	2d 91       	ld	r18, X+
    3ae0:	3c 91       	ld	r19, X
    3ae2:	19 97       	sbiw	r26, 0x09	; 9
    3ae4:	ed 91       	ld	r30, X+
    3ae6:	fc 91       	ld	r31, X
    3ae8:	02 88       	ldd	r0, Z+18	; 0x12
    3aea:	f3 89       	ldd	r31, Z+19	; 0x13
    3aec:	e0 2d       	mov	r30, r0
    3aee:	7b 01       	movw	r14, r22
    3af0:	40 e0       	ldi	r20, 0x00	; 0
    3af2:	50 e0       	ldi	r21, 0x00	; 0
    3af4:	60 e0       	ldi	r22, 0x00	; 0
    3af6:	70 e0       	ldi	r23, 0x00	; 0
    3af8:	09 95       	icall
    3afa:	1f 91       	pop	r17
    3afc:	0f 91       	pop	r16
    3afe:	ff 90       	pop	r15
    3b00:	ef 90       	pop	r14
    3b02:	08 95       	ret

00003b04 <_ZN12Adafruit_GFX13invertDisplayEb>:
    3b04:	08 95       	ret

00003b06 <_ZN12Adafruit_GFX8newColorEhhh>:
    3b06:	4c 7f       	andi	r20, 0xFC	; 252
    3b08:	84 2f       	mov	r24, r20
    3b0a:	90 e0       	ldi	r25, 0x00	; 0
    3b0c:	88 0f       	add	r24, r24
    3b0e:	99 1f       	adc	r25, r25
    3b10:	88 0f       	add	r24, r24
    3b12:	99 1f       	adc	r25, r25
    3b14:	88 0f       	add	r24, r24
    3b16:	99 1f       	adc	r25, r25
    3b18:	30 e0       	ldi	r19, 0x00	; 0
    3b1a:	35 95       	asr	r19
    3b1c:	27 95       	ror	r18
    3b1e:	35 95       	asr	r19
    3b20:	27 95       	ror	r18
    3b22:	35 95       	asr	r19
    3b24:	27 95       	ror	r18
    3b26:	82 2b       	or	r24, r18
    3b28:	93 2b       	or	r25, r19
    3b2a:	68 7f       	andi	r22, 0xF8	; 248
    3b2c:	96 2b       	or	r25, r22
    3b2e:	08 95       	ret

00003b30 <_ZN12Adafruit_GFXC1Eii>:
    3b30:	fc 01       	movw	r30, r24
    3b32:	13 82       	std	Z+3, r1	; 0x03
    3b34:	12 82       	std	Z+2, r1	; 0x02
    3b36:	80 ec       	ldi	r24, 0xC0	; 192
    3b38:	91 e0       	ldi	r25, 0x01	; 1
    3b3a:	91 83       	std	Z+1, r25	; 0x01
    3b3c:	80 83       	st	Z, r24
    3b3e:	75 83       	std	Z+5, r23	; 0x05
    3b40:	64 83       	std	Z+4, r22	; 0x04
    3b42:	57 83       	std	Z+7, r21	; 0x07
    3b44:	46 83       	std	Z+6, r20	; 0x06
    3b46:	71 87       	std	Z+9, r23	; 0x09
    3b48:	60 87       	std	Z+8, r22	; 0x08
    3b4a:	53 87       	std	Z+11, r21	; 0x0b
    3b4c:	42 87       	std	Z+10, r20	; 0x0a
    3b4e:	15 8a       	std	Z+21, r1	; 0x15
    3b50:	15 86       	std	Z+13, r1	; 0x0d
    3b52:	14 86       	std	Z+12, r1	; 0x0c
    3b54:	17 86       	std	Z+15, r1	; 0x0f
    3b56:	16 86       	std	Z+14, r1	; 0x0e
    3b58:	81 e0       	ldi	r24, 0x01	; 1
    3b5a:	84 8b       	std	Z+20, r24	; 0x14
    3b5c:	2f ef       	ldi	r18, 0xFF	; 255
    3b5e:	3f ef       	ldi	r19, 0xFF	; 255
    3b60:	33 8b       	std	Z+19, r19	; 0x13
    3b62:	22 8b       	std	Z+18, r18	; 0x12
    3b64:	31 8b       	std	Z+17, r19	; 0x11
    3b66:	20 8b       	std	Z+16, r18	; 0x10
    3b68:	86 8b       	std	Z+22, r24	; 0x16
    3b6a:	08 95       	ret

00003b6c <_ZN12Adafruit_GFX8drawCharEiihjjh>:
    3b6c:	2f 92       	push	r2
    3b6e:	3f 92       	push	r3
    3b70:	4f 92       	push	r4
    3b72:	5f 92       	push	r5
    3b74:	6f 92       	push	r6
    3b76:	7f 92       	push	r7
    3b78:	8f 92       	push	r8
    3b7a:	9f 92       	push	r9
    3b7c:	af 92       	push	r10
    3b7e:	bf 92       	push	r11
    3b80:	cf 92       	push	r12
    3b82:	df 92       	push	r13
    3b84:	ef 92       	push	r14
    3b86:	ff 92       	push	r15
    3b88:	0f 93       	push	r16
    3b8a:	1f 93       	push	r17
    3b8c:	cf 93       	push	r28
    3b8e:	df 93       	push	r29
    3b90:	cd b7       	in	r28, 0x3d	; 61
    3b92:	de b7       	in	r29, 0x3e	; 62
    3b94:	61 97       	sbiw	r28, 0x11	; 17
    3b96:	0f b6       	in	r0, 0x3f	; 63
    3b98:	f8 94       	cli
    3b9a:	de bf       	out	0x3e, r29	; 62
    3b9c:	0f be       	out	0x3f, r0	; 63
    3b9e:	cd bf       	out	0x3d, r28	; 61
    3ba0:	dc 01       	movw	r26, r24
    3ba2:	18 96       	adiw	r26, 0x08	; 8
    3ba4:	ed 91       	ld	r30, X+
    3ba6:	fc 91       	ld	r31, X
    3ba8:	19 97       	sbiw	r26, 0x09	; 9
    3baa:	6e 17       	cp	r22, r30
    3bac:	7f 07       	cpc	r23, r31
    3bae:	0c f0       	brlt	.+2      	; 0x3bb2 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x46>
    3bb0:	c3 c0       	rjmp	.+390    	; 0x3d38 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x1cc>
    3bb2:	1a 96       	adiw	r26, 0x0a	; 10
    3bb4:	ed 91       	ld	r30, X+
    3bb6:	fc 91       	ld	r31, X
    3bb8:	1b 97       	sbiw	r26, 0x0b	; 11
    3bba:	4e 17       	cp	r20, r30
    3bbc:	5f 07       	cpc	r21, r31
    3bbe:	0c f0       	brlt	.+2      	; 0x3bc2 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x56>
    3bc0:	bb c0       	rjmp	.+374    	; 0x3d38 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x1cc>
    3bc2:	ec 2d       	mov	r30, r12
    3bc4:	f0 e0       	ldi	r31, 0x00	; 0
    3bc6:	fa 83       	std	Y+2, r31	; 0x02
    3bc8:	e9 83       	std	Y+1, r30	; 0x01
    3bca:	ee 0f       	add	r30, r30
    3bcc:	ff 1f       	adc	r31, r31
    3bce:	a9 81       	ldd	r26, Y+1	; 0x01
    3bd0:	ba 81       	ldd	r27, Y+2	; 0x02
    3bd2:	ea 0f       	add	r30, r26
    3bd4:	fb 1f       	adc	r31, r27
    3bd6:	ee 0f       	add	r30, r30
    3bd8:	ff 1f       	adc	r31, r31
    3bda:	e6 0f       	add	r30, r22
    3bdc:	f7 1f       	adc	r31, r23
    3bde:	31 97       	sbiw	r30, 0x01	; 1
    3be0:	0a f4       	brpl	.+2      	; 0x3be4 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x78>
    3be2:	aa c0       	rjmp	.+340    	; 0x3d38 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x1cc>
    3be4:	fd 01       	movw	r30, r26
    3be6:	ee 0f       	add	r30, r30
    3be8:	ff 1f       	adc	r31, r31
    3bea:	ee 0f       	add	r30, r30
    3bec:	ff 1f       	adc	r31, r31
    3bee:	ee 0f       	add	r30, r30
    3bf0:	ff 1f       	adc	r31, r31
    3bf2:	e4 0f       	add	r30, r20
    3bf4:	f5 1f       	adc	r31, r21
    3bf6:	31 97       	sbiw	r30, 0x01	; 1
    3bf8:	0a f4       	brpl	.+2      	; 0x3bfc <_ZN12Adafruit_GFX8drawCharEiihjjh+0x90>
    3bfa:	9e c0       	rjmp	.+316    	; 0x3d38 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x1cc>
    3bfc:	cb 82       	std	Y+3, r12	; 0x03
    3bfe:	fd 82       	std	Y+5, r15	; 0x05
    3c00:	ec 82       	std	Y+4, r14	; 0x04
    3c02:	18 01       	movw	r2, r16
    3c04:	5d 87       	std	Y+13, r21	; 0x0d
    3c06:	4c 87       	std	Y+12, r20	; 0x0c
    3c08:	5c 01       	movw	r10, r24
    3c0a:	30 e0       	ldi	r19, 0x00	; 0
    3c0c:	c9 01       	movw	r24, r18
    3c0e:	88 0f       	add	r24, r24
    3c10:	99 1f       	adc	r25, r25
    3c12:	88 0f       	add	r24, r24
    3c14:	99 1f       	adc	r25, r25
    3c16:	28 0f       	add	r18, r24
    3c18:	39 1f       	adc	r19, r25
    3c1a:	4d 01       	movw	r8, r26
    3c1c:	78 87       	std	Y+8, r23	; 0x08
    3c1e:	6f 83       	std	Y+7, r22	; 0x07
    3c20:	7a 87       	std	Y+10, r23	; 0x0a
    3c22:	69 87       	std	Y+9, r22	; 0x09
    3c24:	1b 86       	std	Y+11, r1	; 0x0b
    3c26:	f9 01       	movw	r30, r18
    3c28:	e6 1b       	sub	r30, r22
    3c2a:	f7 0b       	sbc	r31, r23
    3c2c:	ff 87       	std	Y+15, r31	; 0x0f
    3c2e:	ee 87       	std	Y+14, r30	; 0x0e
    3c30:	3a 01       	movw	r6, r20
    3c32:	f8 e0       	ldi	r31, 0x08	; 8
    3c34:	6f 0e       	add	r6, r31
    3c36:	71 1c       	adc	r7, r1
    3c38:	8b 85       	ldd	r24, Y+11	; 0x0b
    3c3a:	85 30       	cpi	r24, 0x05	; 5
    3c3c:	09 f4       	brne	.+2      	; 0x3c40 <_ZN12Adafruit_GFX8drawCharEiihjjh+0xd4>
    3c3e:	72 c0       	rjmp	.+228    	; 0x3d24 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x1b8>
    3c40:	ee 85       	ldd	r30, Y+14	; 0x0e
    3c42:	ff 85       	ldd	r31, Y+15	; 0x0f
    3c44:	af 81       	ldd	r26, Y+7	; 0x07
    3c46:	b8 85       	ldd	r27, Y+8	; 0x08
    3c48:	ea 0f       	add	r30, r26
    3c4a:	fb 1f       	adc	r31, r27
    3c4c:	ee 55       	subi	r30, 0x5E	; 94
    3c4e:	fc 4f       	sbci	r31, 0xFC	; 252
    3c50:	54 90       	lpm	r5, Z
    3c52:	69 c0       	rjmp	.+210    	; 0x3d26 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x1ba>
    3c54:	50 fe       	sbrs	r5, 0
    3c56:	21 c0       	rjmp	.+66     	; 0x3c9a <_ZN12Adafruit_GFX8drawCharEiihjjh+0x12e>
    3c58:	bb 81       	ldd	r27, Y+3	; 0x03
    3c5a:	b1 30       	cpi	r27, 0x01	; 1
    3c5c:	71 f4       	brne	.+28     	; 0x3c7a <_ZN12Adafruit_GFX8drawCharEiihjjh+0x10e>
    3c5e:	d5 01       	movw	r26, r10
    3c60:	ed 91       	ld	r30, X+
    3c62:	fc 91       	ld	r31, X
    3c64:	00 84       	ldd	r0, Z+8	; 0x08
    3c66:	f1 85       	ldd	r31, Z+9	; 0x09
    3c68:	e0 2d       	mov	r30, r0
    3c6a:	91 01       	movw	r18, r2
    3c6c:	48 89       	ldd	r20, Y+16	; 0x10
    3c6e:	59 89       	ldd	r21, Y+17	; 0x11
    3c70:	6f 81       	ldd	r22, Y+7	; 0x07
    3c72:	78 85       	ldd	r23, Y+8	; 0x08
    3c74:	c5 01       	movw	r24, r10
    3c76:	09 95       	icall
    3c78:	37 c0       	rjmp	.+110    	; 0x3ce8 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x17c>
    3c7a:	d5 01       	movw	r26, r10
    3c7c:	ed 91       	ld	r30, X+
    3c7e:	fc 91       	ld	r31, X
    3c80:	02 88       	ldd	r0, Z+18	; 0x12
    3c82:	f3 89       	ldd	r31, Z+19	; 0x13
    3c84:	e0 2d       	mov	r30, r0
    3c86:	71 01       	movw	r14, r2
    3c88:	09 81       	ldd	r16, Y+1	; 0x01
    3c8a:	1a 81       	ldd	r17, Y+2	; 0x02
    3c8c:	98 01       	movw	r18, r16
    3c8e:	a6 01       	movw	r20, r12
    3c90:	64 2d       	mov	r22, r4
    3c92:	7e 81       	ldd	r23, Y+6	; 0x06
    3c94:	c5 01       	movw	r24, r10
    3c96:	09 95       	icall
    3c98:	27 c0       	rjmp	.+78     	; 0x3ce8 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x17c>
    3c9a:	ec 81       	ldd	r30, Y+4	; 0x04
    3c9c:	fd 81       	ldd	r31, Y+5	; 0x05
    3c9e:	2e 16       	cp	r2, r30
    3ca0:	3f 06       	cpc	r3, r31
    3ca2:	11 f1       	breq	.+68     	; 0x3ce8 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x17c>
    3ca4:	fb 81       	ldd	r31, Y+3	; 0x03
    3ca6:	f1 30       	cpi	r31, 0x01	; 1
    3ca8:	79 f4       	brne	.+30     	; 0x3cc8 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x15c>
    3caa:	d5 01       	movw	r26, r10
    3cac:	ed 91       	ld	r30, X+
    3cae:	fc 91       	ld	r31, X
    3cb0:	00 84       	ldd	r0, Z+8	; 0x08
    3cb2:	f1 85       	ldd	r31, Z+9	; 0x09
    3cb4:	e0 2d       	mov	r30, r0
    3cb6:	2c 81       	ldd	r18, Y+4	; 0x04
    3cb8:	3d 81       	ldd	r19, Y+5	; 0x05
    3cba:	48 89       	ldd	r20, Y+16	; 0x10
    3cbc:	59 89       	ldd	r21, Y+17	; 0x11
    3cbe:	6f 81       	ldd	r22, Y+7	; 0x07
    3cc0:	78 85       	ldd	r23, Y+8	; 0x08
    3cc2:	c5 01       	movw	r24, r10
    3cc4:	09 95       	icall
    3cc6:	10 c0       	rjmp	.+32     	; 0x3ce8 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x17c>
    3cc8:	d5 01       	movw	r26, r10
    3cca:	ed 91       	ld	r30, X+
    3ccc:	fc 91       	ld	r31, X
    3cce:	02 88       	ldd	r0, Z+18	; 0x12
    3cd0:	f3 89       	ldd	r31, Z+19	; 0x13
    3cd2:	e0 2d       	mov	r30, r0
    3cd4:	ec 80       	ldd	r14, Y+4	; 0x04
    3cd6:	fd 80       	ldd	r15, Y+5	; 0x05
    3cd8:	09 81       	ldd	r16, Y+1	; 0x01
    3cda:	1a 81       	ldd	r17, Y+2	; 0x02
    3cdc:	98 01       	movw	r18, r16
    3cde:	a6 01       	movw	r20, r12
    3ce0:	64 2d       	mov	r22, r4
    3ce2:	7e 81       	ldd	r23, Y+6	; 0x06
    3ce4:	c5 01       	movw	r24, r10
    3ce6:	09 95       	icall
    3ce8:	56 94       	lsr	r5
    3cea:	c8 0c       	add	r12, r8
    3cec:	d9 1c       	adc	r13, r9
    3cee:	e8 89       	ldd	r30, Y+16	; 0x10
    3cf0:	f9 89       	ldd	r31, Y+17	; 0x11
    3cf2:	31 96       	adiw	r30, 0x01	; 1
    3cf4:	f9 8b       	std	Y+17, r31	; 0x11
    3cf6:	e8 8b       	std	Y+16, r30	; 0x10
    3cf8:	e6 15       	cp	r30, r6
    3cfa:	f7 05       	cpc	r31, r7
    3cfc:	09 f0       	breq	.+2      	; 0x3d00 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x194>
    3cfe:	aa cf       	rjmp	.-172    	; 0x3c54 <_ZN12Adafruit_GFX8drawCharEiihjjh+0xe8>
    3d00:	fb 85       	ldd	r31, Y+11	; 0x0b
    3d02:	ff 5f       	subi	r31, 0xFF	; 255
    3d04:	fb 87       	std	Y+11, r31	; 0x0b
    3d06:	89 85       	ldd	r24, Y+9	; 0x09
    3d08:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d0a:	88 0d       	add	r24, r8
    3d0c:	99 1d       	adc	r25, r9
    3d0e:	9a 87       	std	Y+10, r25	; 0x0a
    3d10:	89 87       	std	Y+9, r24	; 0x09
    3d12:	af 81       	ldd	r26, Y+7	; 0x07
    3d14:	b8 85       	ldd	r27, Y+8	; 0x08
    3d16:	11 96       	adiw	r26, 0x01	; 1
    3d18:	b8 87       	std	Y+8, r27	; 0x08
    3d1a:	af 83       	std	Y+7, r26	; 0x07
    3d1c:	f6 30       	cpi	r31, 0x06	; 6
    3d1e:	09 f0       	breq	.+2      	; 0x3d22 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x1b6>
    3d20:	8b cf       	rjmp	.-234    	; 0x3c38 <_ZN12Adafruit_GFX8drawCharEiihjjh+0xcc>
    3d22:	0a c0       	rjmp	.+20     	; 0x3d38 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x1cc>
    3d24:	51 2c       	mov	r5, r1
    3d26:	49 84       	ldd	r4, Y+9	; 0x09
    3d28:	ba 85       	ldd	r27, Y+10	; 0x0a
    3d2a:	be 83       	std	Y+6, r27	; 0x06
    3d2c:	ec 85       	ldd	r30, Y+12	; 0x0c
    3d2e:	fd 85       	ldd	r31, Y+13	; 0x0d
    3d30:	6f 01       	movw	r12, r30
    3d32:	f9 8b       	std	Y+17, r31	; 0x11
    3d34:	e8 8b       	std	Y+16, r30	; 0x10
    3d36:	8e cf       	rjmp	.-228    	; 0x3c54 <_ZN12Adafruit_GFX8drawCharEiihjjh+0xe8>
    3d38:	61 96       	adiw	r28, 0x11	; 17
    3d3a:	0f b6       	in	r0, 0x3f	; 63
    3d3c:	f8 94       	cli
    3d3e:	de bf       	out	0x3e, r29	; 62
    3d40:	0f be       	out	0x3f, r0	; 63
    3d42:	cd bf       	out	0x3d, r28	; 61
    3d44:	df 91       	pop	r29
    3d46:	cf 91       	pop	r28
    3d48:	1f 91       	pop	r17
    3d4a:	0f 91       	pop	r16
    3d4c:	ff 90       	pop	r15
    3d4e:	ef 90       	pop	r14
    3d50:	df 90       	pop	r13
    3d52:	cf 90       	pop	r12
    3d54:	bf 90       	pop	r11
    3d56:	af 90       	pop	r10
    3d58:	9f 90       	pop	r9
    3d5a:	8f 90       	pop	r8
    3d5c:	7f 90       	pop	r7
    3d5e:	6f 90       	pop	r6
    3d60:	5f 90       	pop	r5
    3d62:	4f 90       	pop	r4
    3d64:	3f 90       	pop	r3
    3d66:	2f 90       	pop	r2
    3d68:	08 95       	ret

00003d6a <_ZN12Adafruit_GFX5writeEh>:
    3d6a:	cf 92       	push	r12
    3d6c:	ef 92       	push	r14
    3d6e:	ff 92       	push	r15
    3d70:	0f 93       	push	r16
    3d72:	1f 93       	push	r17
    3d74:	cf 93       	push	r28
    3d76:	df 93       	push	r29
    3d78:	6a 30       	cpi	r22, 0x0A	; 10
    3d7a:	79 f4       	brne	.+30     	; 0x3d9a <_ZN12Adafruit_GFX5writeEh+0x30>
    3d7c:	fc 01       	movw	r30, r24
    3d7e:	44 89       	ldd	r20, Z+20	; 0x14
    3d80:	26 85       	ldd	r18, Z+14	; 0x0e
    3d82:	37 85       	ldd	r19, Z+15	; 0x0f
    3d84:	f8 e0       	ldi	r31, 0x08	; 8
    3d86:	4f 9f       	mul	r20, r31
    3d88:	20 0d       	add	r18, r0
    3d8a:	31 1d       	adc	r19, r1
    3d8c:	11 24       	eor	r1, r1
    3d8e:	fc 01       	movw	r30, r24
    3d90:	37 87       	std	Z+15, r19	; 0x0f
    3d92:	26 87       	std	Z+14, r18	; 0x0e
    3d94:	15 86       	std	Z+13, r1	; 0x0d
    3d96:	14 86       	std	Z+12, r1	; 0x0c
    3d98:	3c c0       	rjmp	.+120    	; 0x3e12 <_ZN12Adafruit_GFX5writeEh+0xa8>
    3d9a:	6d 30       	cpi	r22, 0x0D	; 13
    3d9c:	d1 f1       	breq	.+116    	; 0x3e12 <_ZN12Adafruit_GFX5writeEh+0xa8>
    3d9e:	26 2f       	mov	r18, r22
    3da0:	ec 01       	movw	r28, r24
    3da2:	ea 88       	ldd	r14, Y+18	; 0x12
    3da4:	fb 88       	ldd	r15, Y+19	; 0x13
    3da6:	08 89       	ldd	r16, Y+16	; 0x10
    3da8:	19 89       	ldd	r17, Y+17	; 0x11
    3daa:	4e 85       	ldd	r20, Y+14	; 0x0e
    3dac:	5f 85       	ldd	r21, Y+15	; 0x0f
    3dae:	6c 85       	ldd	r22, Y+12	; 0x0c
    3db0:	7d 85       	ldd	r23, Y+13	; 0x0d
    3db2:	cc 88       	ldd	r12, Y+20	; 0x14
    3db4:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <_ZN12Adafruit_GFX8drawCharEiihjjh>
    3db8:	2c 89       	ldd	r18, Y+20	; 0x14
    3dba:	30 e0       	ldi	r19, 0x00	; 0
    3dbc:	c9 01       	movw	r24, r18
    3dbe:	88 0f       	add	r24, r24
    3dc0:	99 1f       	adc	r25, r25
    3dc2:	82 0f       	add	r24, r18
    3dc4:	93 1f       	adc	r25, r19
    3dc6:	88 0f       	add	r24, r24
    3dc8:	99 1f       	adc	r25, r25
    3dca:	4c 85       	ldd	r20, Y+12	; 0x0c
    3dcc:	5d 85       	ldd	r21, Y+13	; 0x0d
    3dce:	84 0f       	add	r24, r20
    3dd0:	95 1f       	adc	r25, r21
    3dd2:	9d 87       	std	Y+13, r25	; 0x0d
    3dd4:	8c 87       	std	Y+12, r24	; 0x0c
    3dd6:	4e 89       	ldd	r20, Y+22	; 0x16
    3dd8:	44 23       	and	r20, r20
    3dda:	d9 f0       	breq	.+54     	; 0x3e12 <_ZN12Adafruit_GFX5writeEh+0xa8>
    3ddc:	4a ef       	ldi	r20, 0xFA	; 250
    3dde:	42 03       	mulsu	r20, r18
    3de0:	b0 01       	movw	r22, r0
    3de2:	43 9f       	mul	r20, r19
    3de4:	70 0d       	add	r23, r0
    3de6:	11 24       	eor	r1, r1
    3de8:	48 85       	ldd	r20, Y+8	; 0x08
    3dea:	59 85       	ldd	r21, Y+9	; 0x09
    3dec:	46 0f       	add	r20, r22
    3dee:	57 1f       	adc	r21, r23
    3df0:	48 17       	cp	r20, r24
    3df2:	59 07       	cpc	r21, r25
    3df4:	74 f4       	brge	.+28     	; 0x3e12 <_ZN12Adafruit_GFX5writeEh+0xa8>
    3df6:	22 0f       	add	r18, r18
    3df8:	33 1f       	adc	r19, r19
    3dfa:	22 0f       	add	r18, r18
    3dfc:	33 1f       	adc	r19, r19
    3dfe:	22 0f       	add	r18, r18
    3e00:	33 1f       	adc	r19, r19
    3e02:	8e 85       	ldd	r24, Y+14	; 0x0e
    3e04:	9f 85       	ldd	r25, Y+15	; 0x0f
    3e06:	28 0f       	add	r18, r24
    3e08:	39 1f       	adc	r19, r25
    3e0a:	3f 87       	std	Y+15, r19	; 0x0f
    3e0c:	2e 87       	std	Y+14, r18	; 0x0e
    3e0e:	1d 86       	std	Y+13, r1	; 0x0d
    3e10:	1c 86       	std	Y+12, r1	; 0x0c
    3e12:	81 e0       	ldi	r24, 0x01	; 1
    3e14:	90 e0       	ldi	r25, 0x00	; 0
    3e16:	df 91       	pop	r29
    3e18:	cf 91       	pop	r28
    3e1a:	1f 91       	pop	r17
    3e1c:	0f 91       	pop	r16
    3e1e:	ff 90       	pop	r15
    3e20:	ef 90       	pop	r14
    3e22:	cf 90       	pop	r12
    3e24:	08 95       	ret

00003e26 <_ZN12Adafruit_GFX10backgroundEj>:
    3e26:	dc 01       	movw	r26, r24
    3e28:	ed 91       	ld	r30, X+
    3e2a:	fc 91       	ld	r31, X
    3e2c:	04 88       	ldd	r0, Z+20	; 0x14
    3e2e:	f5 89       	ldd	r31, Z+21	; 0x15
    3e30:	e0 2d       	mov	r30, r0
    3e32:	09 95       	icall
    3e34:	08 95       	ret

00003e36 <_ZN12Adafruit_GFX6strokeEhhh>:
    3e36:	cf 93       	push	r28
    3e38:	df 93       	push	r29
    3e3a:	ec 01       	movw	r28, r24
    3e3c:	e8 81       	ld	r30, Y
    3e3e:	f9 81       	ldd	r31, Y+1	; 0x01
    3e40:	00 8c       	ldd	r0, Z+24	; 0x18
    3e42:	f1 8d       	ldd	r31, Z+25	; 0x19
    3e44:	e0 2d       	mov	r30, r0
    3e46:	09 95       	icall
    3e48:	21 e0       	ldi	r18, 0x01	; 1
    3e4a:	29 8f       	std	Y+25, r18	; 0x19
    3e4c:	98 8f       	std	Y+24, r25	; 0x18
    3e4e:	8f 8b       	std	Y+23, r24	; 0x17
    3e50:	99 8b       	std	Y+17, r25	; 0x11
    3e52:	88 8b       	std	Y+16, r24	; 0x10
    3e54:	9b 8b       	std	Y+19, r25	; 0x13
    3e56:	8a 8b       	std	Y+18, r24	; 0x12
    3e58:	df 91       	pop	r29
    3e5a:	cf 91       	pop	r28
    3e5c:	08 95       	ret

00003e5e <_ZN12Adafruit_GFX6strokeEj>:
    3e5e:	fc 01       	movw	r30, r24
    3e60:	81 e0       	ldi	r24, 0x01	; 1
    3e62:	81 8f       	std	Z+25, r24	; 0x19
    3e64:	70 8f       	std	Z+24, r23	; 0x18
    3e66:	67 8b       	std	Z+23, r22	; 0x17
    3e68:	71 8b       	std	Z+17, r23	; 0x11
    3e6a:	60 8b       	std	Z+16, r22	; 0x10
    3e6c:	73 8b       	std	Z+19, r23	; 0x13
    3e6e:	62 8b       	std	Z+18, r22	; 0x12
    3e70:	08 95       	ret

00003e72 <_ZN12Adafruit_GFX4textEPKcii>:
    3e72:	dc 01       	movw	r26, r24
    3e74:	59 96       	adiw	r26, 0x19	; 25
    3e76:	ec 91       	ld	r30, X
    3e78:	59 97       	sbiw	r26, 0x19	; 25
    3e7a:	ee 23       	and	r30, r30
    3e7c:	79 f0       	breq	.+30     	; 0x3e9c <_ZN12Adafruit_GFX4textEPKcii+0x2a>
    3e7e:	fc 01       	movw	r30, r24
    3e80:	16 8a       	std	Z+22, r1	; 0x16
    3e82:	87 89       	ldd	r24, Z+23	; 0x17
    3e84:	90 8d       	ldd	r25, Z+24	; 0x18
    3e86:	91 8b       	std	Z+17, r25	; 0x11
    3e88:	80 8b       	std	Z+16, r24	; 0x10
    3e8a:	93 8b       	std	Z+19, r25	; 0x13
    3e8c:	82 8b       	std	Z+18, r24	; 0x12
    3e8e:	55 87       	std	Z+13, r21	; 0x0d
    3e90:	44 87       	std	Z+12, r20	; 0x0c
    3e92:	37 87       	std	Z+15, r19	; 0x0f
    3e94:	26 87       	std	Z+14, r18	; 0x0e
    3e96:	cd 01       	movw	r24, r26
    3e98:	0e 94 53 35 	call	0x6aa6	; 0x6aa6 <_ZN5Print5printEPKc>
    3e9c:	08 95       	ret

00003e9e <_ZN12Adafruit_GFX8textSizeEh>:
}


void Adafruit_GFX::setTextSize(uint8_t s) 
{
  textsize = (s > 0) ? s : 1;
    3e9e:	61 11       	cpse	r22, r1
    3ea0:	01 c0       	rjmp	.+2      	; 0x3ea4 <_ZN12Adafruit_GFX8textSizeEh+0x6>
    3ea2:	61 e0       	ldi	r22, 0x01	; 1
    3ea4:	fc 01       	movw	r30, r24
    3ea6:	64 8b       	std	Z+20, r22	; 0x14
    3ea8:	08 95       	ret

00003eaa <_ZN15Adafruit_ST773510fillScreenEj>:

inline void Adafruit_ST7735::spiwrite(uint8_t c) {

  //Serial.println(c, HEX);

  if (hwSPI) {
    3eaa:	ef 92       	push	r14
    3eac:	ff 92       	push	r15
    3eae:	0f 93       	push	r16
    3eb0:	1f 93       	push	r17
    3eb2:	dc 01       	movw	r26, r24
    3eb4:	1a 96       	adiw	r26, 0x0a	; 10
    3eb6:	0d 91       	ld	r16, X+
    3eb8:	1c 91       	ld	r17, X
    3eba:	1b 97       	sbiw	r26, 0x0b	; 11
    3ebc:	18 96       	adiw	r26, 0x08	; 8
    3ebe:	2d 91       	ld	r18, X+
    3ec0:	3c 91       	ld	r19, X
    3ec2:	19 97       	sbiw	r26, 0x09	; 9
    3ec4:	ed 91       	ld	r30, X+
    3ec6:	fc 91       	ld	r31, X
    3ec8:	02 88       	ldd	r0, Z+18	; 0x12
    3eca:	f3 89       	ldd	r31, Z+19	; 0x13
    3ecc:	e0 2d       	mov	r30, r0
    3ece:	7b 01       	movw	r14, r22
    3ed0:	40 e0       	ldi	r20, 0x00	; 0
    3ed2:	50 e0       	ldi	r21, 0x00	; 0
    3ed4:	60 e0       	ldi	r22, 0x00	; 0
    3ed6:	70 e0       	ldi	r23, 0x00	; 0
    3ed8:	09 95       	icall
    3eda:	1f 91       	pop	r17
    3edc:	0f 91       	pop	r16
    3ede:	ff 90       	pop	r15
    3ee0:	ef 90       	pop	r14
    3ee2:	08 95       	ret

00003ee4 <_ZN15Adafruit_ST7735C1Ehhh>:
    3ee4:	ff 92       	push	r15
    3ee6:	0f 93       	push	r16
    3ee8:	1f 93       	push	r17
    3eea:	cf 93       	push	r28
    3eec:	df 93       	push	r29
    3eee:	ec 01       	movw	r28, r24
    3ef0:	f6 2e       	mov	r15, r22
    3ef2:	04 2f       	mov	r16, r20
    3ef4:	12 2f       	mov	r17, r18
    3ef6:	40 ea       	ldi	r20, 0xA0	; 160
    3ef8:	50 e0       	ldi	r21, 0x00	; 0
    3efa:	60 e8       	ldi	r22, 0x80	; 128
    3efc:	70 e0       	ldi	r23, 0x00	; 0
    3efe:	0e 94 98 1d 	call	0x3b30	; 0x3b30 <_ZN12Adafruit_GFXC1Eii>
    3f02:	8e ed       	ldi	r24, 0xDE	; 222
    3f04:	91 e0       	ldi	r25, 0x01	; 1
    3f06:	99 83       	std	Y+1, r25	; 0x01
    3f08:	88 83       	st	Y, r24
    3f0a:	80 e5       	ldi	r24, 0x50	; 80
    3f0c:	8f 8f       	std	Y+31, r24	; 0x1f
    3f0e:	18 a2       	std	Y+32, r1	; 0x20
    3f10:	f9 a6       	std	Y+41, r15	; 0x29
    3f12:	0a a7       	std	Y+42, r16	; 0x2a
    3f14:	1b a7       	std	Y+43, r17	; 0x2b
    3f16:	81 e0       	ldi	r24, 0x01	; 1
    3f18:	8e 8f       	std	Y+30, r24	; 0x1e
    3f1a:	1d a6       	std	Y+45, r1	; 0x2d
    3f1c:	1c a6       	std	Y+44, r1	; 0x2c
    3f1e:	df 91       	pop	r29
    3f20:	cf 91       	pop	r28
    3f22:	1f 91       	pop	r17
    3f24:	0f 91       	pop	r16
    3f26:	ff 90       	pop	r15
    3f28:	08 95       	ret

00003f2a <_ZN15Adafruit_ST773512writecommandEh>:
    3f2a:	fc 01       	movw	r30, r24
    3f2c:	86 8d       	ldd	r24, Z+30	; 0x1e
    3f2e:	88 23       	and	r24, r24
    3f30:	d9 f0       	breq	.+54     	; 0x3f68 <_ZN15Adafruit_ST773512writecommandEh+0x3e>
    3f32:	97 8d       	ldd	r25, Z+31	; 0x1f
    3f34:	80 a1       	ldd	r24, Z+32	; 0x20
    3f36:	20 91 0c 03 	lds	r18, 0x030C	; 0x80030c <_ZN8SPIClass13interruptModeE>
    3f3a:	22 23       	and	r18, r18
    3f3c:	99 f0       	breq	.+38     	; 0x3f64 <_ZN15Adafruit_ST773512writecommandEh+0x3a>
    3f3e:	2f b7       	in	r18, 0x3f	; 63
    3f40:	f8 94       	cli
    3f42:	30 91 0c 03 	lds	r19, 0x030C	; 0x80030c <_ZN8SPIClass13interruptModeE>
    3f46:	31 30       	cpi	r19, 0x01	; 1
    3f48:	59 f4       	brne	.+22     	; 0x3f60 <_ZN15Adafruit_ST773512writecommandEh+0x36>
    3f4a:	3d b3       	in	r19, 0x1d	; 29
    3f4c:	30 93 0a 03 	sts	0x030A, r19	; 0x80030a <__data_end>
    3f50:	4d b3       	in	r20, 0x1d	; 29
    3f52:	30 91 0b 03 	lds	r19, 0x030B	; 0x80030b <_ZN8SPIClass13interruptMaskE>
    3f56:	30 95       	com	r19
    3f58:	34 23       	and	r19, r20
    3f5a:	3d bb       	out	0x1d, r19	; 29
    3f5c:	2f bf       	out	0x3f, r18	; 63
    3f5e:	02 c0       	rjmp	.+4      	; 0x3f64 <_ZN15Adafruit_ST773512writecommandEh+0x3a>
    3f60:	20 93 0a 03 	sts	0x030A, r18	; 0x80030a <__data_end>
    3f64:	9c bd       	out	0x2c, r25	; 44
    3f66:	8d bd       	out	0x2d, r24	; 45
    3f68:	a7 a1       	ldd	r26, Z+39	; 0x27
    3f6a:	b0 a5       	ldd	r27, Z+40	; 0x28
    3f6c:	9c 91       	ld	r25, X
    3f6e:	81 a9       	ldd	r24, Z+49	; 0x31
    3f70:	80 95       	com	r24
    3f72:	89 23       	and	r24, r25
    3f74:	8c 93       	st	X, r24
    3f76:	a5 a1       	ldd	r26, Z+37	; 0x25
    3f78:	b6 a1       	ldd	r27, Z+38	; 0x26
    3f7a:	9c 91       	ld	r25, X
    3f7c:	80 a9       	ldd	r24, Z+48	; 0x30
    3f7e:	80 95       	com	r24
    3f80:	89 23       	and	r24, r25
    3f82:	8c 93       	st	X, r24
    3f84:	86 8d       	ldd	r24, Z+30	; 0x1e
    3f86:	88 23       	and	r24, r24
    3f88:	39 f0       	breq	.+14     	; 0x3f98 <_ZN15Adafruit_ST773512writecommandEh+0x6e>
    3f8a:	6e bd       	out	0x2e, r22	; 46
    3f8c:	00 00       	nop
    3f8e:	0d b4       	in	r0, 0x2d	; 45
    3f90:	07 fe       	sbrs	r0, 7
    3f92:	fd cf       	rjmp	.-6      	; 0x3f8e <_ZN15Adafruit_ST773512writecommandEh+0x64>
    3f94:	8e b5       	in	r24, 0x2e	; 46
    3f96:	25 c0       	rjmp	.+74     	; 0x3fe2 <_ZN15Adafruit_ST773512writecommandEh+0xb8>
    3f98:	48 e0       	ldi	r20, 0x08	; 8
    3f9a:	50 e0       	ldi	r21, 0x00	; 0
    3f9c:	20 e8       	ldi	r18, 0x80	; 128
    3f9e:	86 2f       	mov	r24, r22
    3fa0:	82 23       	and	r24, r18
    3fa2:	39 f0       	breq	.+14     	; 0x3fb2 <_ZN15Adafruit_ST773512writecommandEh+0x88>
    3fa4:	a1 a1       	ldd	r26, Z+33	; 0x21
    3fa6:	b2 a1       	ldd	r27, Z+34	; 0x22
    3fa8:	9c 91       	ld	r25, X
    3faa:	86 a5       	ldd	r24, Z+46	; 0x2e
    3fac:	89 2b       	or	r24, r25
    3fae:	8c 93       	st	X, r24
    3fb0:	07 c0       	rjmp	.+14     	; 0x3fc0 <_ZN15Adafruit_ST773512writecommandEh+0x96>
    3fb2:	a1 a1       	ldd	r26, Z+33	; 0x21
    3fb4:	b2 a1       	ldd	r27, Z+34	; 0x22
    3fb6:	9c 91       	ld	r25, X
    3fb8:	86 a5       	ldd	r24, Z+46	; 0x2e
    3fba:	80 95       	com	r24
    3fbc:	89 23       	and	r24, r25
    3fbe:	8c 93       	st	X, r24
    3fc0:	a3 a1       	ldd	r26, Z+35	; 0x23
    3fc2:	b4 a1       	ldd	r27, Z+36	; 0x24
    3fc4:	9c 91       	ld	r25, X
    3fc6:	87 a5       	ldd	r24, Z+47	; 0x2f
    3fc8:	89 2b       	or	r24, r25
    3fca:	8c 93       	st	X, r24
    3fcc:	a3 a1       	ldd	r26, Z+35	; 0x23
    3fce:	b4 a1       	ldd	r27, Z+36	; 0x24
    3fd0:	9c 91       	ld	r25, X
    3fd2:	87 a5       	ldd	r24, Z+47	; 0x2f
    3fd4:	80 95       	com	r24
    3fd6:	89 23       	and	r24, r25
    3fd8:	8c 93       	st	X, r24
    3fda:	26 95       	lsr	r18
    3fdc:	41 50       	subi	r20, 0x01	; 1
    3fde:	51 09       	sbc	r21, r1
    3fe0:	f1 f6       	brne	.-68     	; 0x3f9e <_ZN15Adafruit_ST773512writecommandEh+0x74>
    3fe2:	a5 a1       	ldd	r26, Z+37	; 0x25
    3fe4:	b6 a1       	ldd	r27, Z+38	; 0x26
    3fe6:	9c 91       	ld	r25, X
    3fe8:	80 a9       	ldd	r24, Z+48	; 0x30
    3fea:	89 2b       	or	r24, r25
    3fec:	8c 93       	st	X, r24
    3fee:	86 8d       	ldd	r24, Z+30	; 0x1e
    3ff0:	88 23       	and	r24, r24
    3ff2:	91 f0       	breq	.+36     	; 0x4018 <_ZN15Adafruit_ST773512writecommandEh+0xee>
    3ff4:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <_ZN8SPIClass13interruptModeE>
    3ff8:	88 23       	and	r24, r24
    3ffa:	71 f0       	breq	.+28     	; 0x4018 <_ZN15Adafruit_ST773512writecommandEh+0xee>
    3ffc:	9f b7       	in	r25, 0x3f	; 63
    3ffe:	f8 94       	cli
    4000:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <_ZN8SPIClass13interruptModeE>
    4004:	81 30       	cpi	r24, 0x01	; 1
    4006:	29 f4       	brne	.+10     	; 0x4012 <_ZN15Adafruit_ST773512writecommandEh+0xe8>
    4008:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <__data_end>
    400c:	8d bb       	out	0x1d, r24	; 29
    400e:	9f bf       	out	0x3f, r25	; 63
    4010:	08 95       	ret
    4012:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <__data_end>
    4016:	8f bf       	out	0x3f, r24	; 63
    4018:	08 95       	ret

0000401a <_ZN15Adafruit_ST773513invertDisplayEb>:
    401a:	61 11       	cpse	r22, r1
    401c:	02 c0       	rjmp	.+4      	; 0x4022 <_ZN15Adafruit_ST773513invertDisplayEb+0x8>
    401e:	60 e2       	ldi	r22, 0x20	; 32
    4020:	01 c0       	rjmp	.+2      	; 0x4024 <_ZN15Adafruit_ST773513invertDisplayEb+0xa>
    4022:	61 e2       	ldi	r22, 0x21	; 33
    4024:	0e 94 95 1f 	call	0x3f2a	; 0x3f2a <_ZN15Adafruit_ST773512writecommandEh>
    4028:	08 95       	ret

0000402a <_ZN15Adafruit_ST77359writedataEh>:
    402a:	fc 01       	movw	r30, r24
    402c:	86 8d       	ldd	r24, Z+30	; 0x1e
    402e:	88 23       	and	r24, r24
    4030:	d9 f0       	breq	.+54     	; 0x4068 <_ZN15Adafruit_ST77359writedataEh+0x3e>
    4032:	97 8d       	ldd	r25, Z+31	; 0x1f
    4034:	80 a1       	ldd	r24, Z+32	; 0x20
    4036:	20 91 0c 03 	lds	r18, 0x030C	; 0x80030c <_ZN8SPIClass13interruptModeE>
    403a:	22 23       	and	r18, r18
    403c:	99 f0       	breq	.+38     	; 0x4064 <_ZN15Adafruit_ST77359writedataEh+0x3a>
    403e:	2f b7       	in	r18, 0x3f	; 63
    4040:	f8 94       	cli
    4042:	30 91 0c 03 	lds	r19, 0x030C	; 0x80030c <_ZN8SPIClass13interruptModeE>
    4046:	31 30       	cpi	r19, 0x01	; 1
    4048:	59 f4       	brne	.+22     	; 0x4060 <_ZN15Adafruit_ST77359writedataEh+0x36>
    404a:	3d b3       	in	r19, 0x1d	; 29
    404c:	30 93 0a 03 	sts	0x030A, r19	; 0x80030a <__data_end>
    4050:	4d b3       	in	r20, 0x1d	; 29
    4052:	30 91 0b 03 	lds	r19, 0x030B	; 0x80030b <_ZN8SPIClass13interruptMaskE>
    4056:	30 95       	com	r19
    4058:	34 23       	and	r19, r20
    405a:	3d bb       	out	0x1d, r19	; 29
    405c:	2f bf       	out	0x3f, r18	; 63
    405e:	02 c0       	rjmp	.+4      	; 0x4064 <_ZN15Adafruit_ST77359writedataEh+0x3a>
    4060:	20 93 0a 03 	sts	0x030A, r18	; 0x80030a <__data_end>
    4064:	9c bd       	out	0x2c, r25	; 44
    4066:	8d bd       	out	0x2d, r24	; 45
    4068:	a7 a1       	ldd	r26, Z+39	; 0x27
    406a:	b0 a5       	ldd	r27, Z+40	; 0x28
    406c:	9c 91       	ld	r25, X
    406e:	81 a9       	ldd	r24, Z+49	; 0x31
    4070:	89 2b       	or	r24, r25
    4072:	8c 93       	st	X, r24
    4074:	a5 a1       	ldd	r26, Z+37	; 0x25
    4076:	b6 a1       	ldd	r27, Z+38	; 0x26
    4078:	9c 91       	ld	r25, X
    407a:	80 a9       	ldd	r24, Z+48	; 0x30
    407c:	80 95       	com	r24
    407e:	89 23       	and	r24, r25
    4080:	8c 93       	st	X, r24
    4082:	86 8d       	ldd	r24, Z+30	; 0x1e
    4084:	88 23       	and	r24, r24
    4086:	39 f0       	breq	.+14     	; 0x4096 <_ZN15Adafruit_ST77359writedataEh+0x6c>
    4088:	6e bd       	out	0x2e, r22	; 46
    408a:	00 00       	nop
    408c:	0d b4       	in	r0, 0x2d	; 45
    408e:	07 fe       	sbrs	r0, 7
    4090:	fd cf       	rjmp	.-6      	; 0x408c <_ZN15Adafruit_ST77359writedataEh+0x62>
    4092:	8e b5       	in	r24, 0x2e	; 46
    4094:	25 c0       	rjmp	.+74     	; 0x40e0 <_ZN15Adafruit_ST77359writedataEh+0xb6>
    4096:	48 e0       	ldi	r20, 0x08	; 8
    4098:	50 e0       	ldi	r21, 0x00	; 0
    409a:	20 e8       	ldi	r18, 0x80	; 128
    409c:	86 2f       	mov	r24, r22
    409e:	82 23       	and	r24, r18
    40a0:	39 f0       	breq	.+14     	; 0x40b0 <_ZN15Adafruit_ST77359writedataEh+0x86>
    40a2:	a1 a1       	ldd	r26, Z+33	; 0x21
    40a4:	b2 a1       	ldd	r27, Z+34	; 0x22
    40a6:	9c 91       	ld	r25, X
    40a8:	86 a5       	ldd	r24, Z+46	; 0x2e
    40aa:	89 2b       	or	r24, r25
    40ac:	8c 93       	st	X, r24
    40ae:	07 c0       	rjmp	.+14     	; 0x40be <_ZN15Adafruit_ST77359writedataEh+0x94>
    40b0:	a1 a1       	ldd	r26, Z+33	; 0x21
    40b2:	b2 a1       	ldd	r27, Z+34	; 0x22
    40b4:	9c 91       	ld	r25, X
    40b6:	86 a5       	ldd	r24, Z+46	; 0x2e
    40b8:	80 95       	com	r24
    40ba:	89 23       	and	r24, r25
    40bc:	8c 93       	st	X, r24
    40be:	a3 a1       	ldd	r26, Z+35	; 0x23
    40c0:	b4 a1       	ldd	r27, Z+36	; 0x24
    40c2:	9c 91       	ld	r25, X
    40c4:	87 a5       	ldd	r24, Z+47	; 0x2f
    40c6:	89 2b       	or	r24, r25
    40c8:	8c 93       	st	X, r24
    40ca:	a3 a1       	ldd	r26, Z+35	; 0x23
    40cc:	b4 a1       	ldd	r27, Z+36	; 0x24
    40ce:	9c 91       	ld	r25, X
    40d0:	87 a5       	ldd	r24, Z+47	; 0x2f
    40d2:	80 95       	com	r24
    40d4:	89 23       	and	r24, r25
    40d6:	8c 93       	st	X, r24
    40d8:	26 95       	lsr	r18
    40da:	41 50       	subi	r20, 0x01	; 1
    40dc:	51 09       	sbc	r21, r1
    40de:	f1 f6       	brne	.-68     	; 0x409c <_ZN15Adafruit_ST77359writedataEh+0x72>
    40e0:	a5 a1       	ldd	r26, Z+37	; 0x25
    40e2:	b6 a1       	ldd	r27, Z+38	; 0x26
    40e4:	9c 91       	ld	r25, X
    40e6:	80 a9       	ldd	r24, Z+48	; 0x30
    40e8:	89 2b       	or	r24, r25
    40ea:	8c 93       	st	X, r24
    40ec:	86 8d       	ldd	r24, Z+30	; 0x1e
    40ee:	88 23       	and	r24, r24
    40f0:	91 f0       	breq	.+36     	; 0x4116 <_ZN15Adafruit_ST77359writedataEh+0xec>
    40f2:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <_ZN8SPIClass13interruptModeE>
    40f6:	88 23       	and	r24, r24
    40f8:	71 f0       	breq	.+28     	; 0x4116 <_ZN15Adafruit_ST77359writedataEh+0xec>
    40fa:	9f b7       	in	r25, 0x3f	; 63
    40fc:	f8 94       	cli
    40fe:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <_ZN8SPIClass13interruptModeE>
    4102:	81 30       	cpi	r24, 0x01	; 1
    4104:	29 f4       	brne	.+10     	; 0x4110 <_ZN15Adafruit_ST77359writedataEh+0xe6>
    4106:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <__data_end>
    410a:	8d bb       	out	0x1d, r24	; 29
    410c:	9f bf       	out	0x3f, r25	; 63
    410e:	08 95       	ret
    4110:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <__data_end>
    4114:	8f bf       	out	0x3f, r24	; 63
    4116:	08 95       	ret

00004118 <_ZN15Adafruit_ST773511commandListEPKh>:
    4118:	8f 92       	push	r8
    411a:	9f 92       	push	r9
    411c:	af 92       	push	r10
    411e:	bf 92       	push	r11
    4120:	cf 92       	push	r12
    4122:	df 92       	push	r13
    4124:	ef 92       	push	r14
    4126:	ff 92       	push	r15
    4128:	0f 93       	push	r16
    412a:	1f 93       	push	r17
    412c:	cf 93       	push	r28
    412e:	df 93       	push	r29
    4130:	7c 01       	movw	r14, r24
    4132:	8b 01       	movw	r16, r22
    4134:	0f 5f       	subi	r16, 0xFF	; 255
    4136:	1f 4f       	sbci	r17, 0xFF	; 255
    4138:	fb 01       	movw	r30, r22
    413a:	b4 90       	lpm	r11, Z
    413c:	0f 2e       	mov	r0, r31
    413e:	f4 ef       	ldi	r31, 0xF4	; 244
    4140:	9f 2e       	mov	r9, r31
    4142:	f0 2d       	mov	r31, r0
    4144:	aa 24       	eor	r10, r10
    4146:	a3 94       	inc	r10
    4148:	01 c0       	rjmp	.+2      	; 0x414c <_ZN15Adafruit_ST773511commandListEPKh+0x34>
    414a:	ba 94       	dec	r11
    414c:	bb 20       	and	r11, r11
    414e:	09 f4       	brne	.+2      	; 0x4152 <_ZN15Adafruit_ST773511commandListEPKh+0x3a>
    4150:	36 c0       	rjmp	.+108    	; 0x41be <_ZN15Adafruit_ST773511commandListEPKh+0xa6>
    4152:	f8 01       	movw	r30, r16
    4154:	64 91       	lpm	r22, Z
    4156:	c7 01       	movw	r24, r14
    4158:	0e 94 95 1f 	call	0x3f2a	; 0x3f2a <_ZN15Adafruit_ST773512writecommandEh>
    415c:	f8 01       	movw	r30, r16
    415e:	31 96       	adiw	r30, 0x01	; 1
    4160:	e4 91       	lpm	r30, Z
    4162:	0e 5f       	subi	r16, 0xFE	; 254
    4164:	1f 4f       	sbci	r17, 0xFF	; 255
    4166:	fe 2f       	mov	r31, r30
    4168:	f0 78       	andi	r31, 0x80	; 128
    416a:	8f 2e       	mov	r8, r31
    416c:	ef 77       	andi	r30, 0x7F	; 127
    416e:	8f ef       	ldi	r24, 0xFF	; 255
    4170:	8e 0f       	add	r24, r30
    4172:	ee 23       	and	r30, r30
    4174:	91 f0       	breq	.+36     	; 0x419a <_ZN15Adafruit_ST773511commandListEPKh+0x82>
    4176:	30 2f       	mov	r19, r16
    4178:	21 2f       	mov	r18, r17
    417a:	90 e0       	ldi	r25, 0x00	; 0
    417c:	01 96       	adiw	r24, 0x01	; 1
    417e:	08 0f       	add	r16, r24
    4180:	19 1f       	adc	r17, r25
    4182:	68 01       	movw	r12, r16
    4184:	c3 2f       	mov	r28, r19
    4186:	d2 2f       	mov	r29, r18
    4188:	fe 01       	movw	r30, r28
    418a:	64 91       	lpm	r22, Z
    418c:	c7 01       	movw	r24, r14
    418e:	0e 94 15 20 	call	0x402a	; 0x402a <_ZN15Adafruit_ST77359writedataEh>
    4192:	21 96       	adiw	r28, 0x01	; 1
    4194:	cc 15       	cp	r28, r12
    4196:	dd 05       	cpc	r29, r13
    4198:	b9 f7       	brne	.-18     	; 0x4188 <_ZN15Adafruit_ST773511commandListEPKh+0x70>
    419a:	88 20       	and	r8, r8
    419c:	b1 f2       	breq	.-84     	; 0x414a <_ZN15Adafruit_ST773511commandListEPKh+0x32>
    419e:	e8 01       	movw	r28, r16
    41a0:	21 96       	adiw	r28, 0x01	; 1
    41a2:	f8 01       	movw	r30, r16
    41a4:	64 91       	lpm	r22, Z
    41a6:	70 e0       	ldi	r23, 0x00	; 0
    41a8:	6f 3f       	cpi	r22, 0xFF	; 255
    41aa:	71 05       	cpc	r23, r1
    41ac:	11 f4       	brne	.+4      	; 0x41b2 <_ZN15Adafruit_ST773511commandListEPKh+0x9a>
    41ae:	69 2d       	mov	r22, r9
    41b0:	7a 2d       	mov	r23, r10
    41b2:	80 e0       	ldi	r24, 0x00	; 0
    41b4:	90 e0       	ldi	r25, 0x00	; 0
    41b6:	0e 94 c4 35 	call	0x6b88	; 0x6b88 <delay>
    41ba:	8e 01       	movw	r16, r28
    41bc:	c6 cf       	rjmp	.-116    	; 0x414a <_ZN15Adafruit_ST773511commandListEPKh+0x32>
    41be:	df 91       	pop	r29
    41c0:	cf 91       	pop	r28
    41c2:	1f 91       	pop	r17
    41c4:	0f 91       	pop	r16
    41c6:	ff 90       	pop	r15
    41c8:	ef 90       	pop	r14
    41ca:	df 90       	pop	r13
    41cc:	cf 90       	pop	r12
    41ce:	bf 90       	pop	r11
    41d0:	af 90       	pop	r10
    41d2:	9f 90       	pop	r9
    41d4:	8f 90       	pop	r8
    41d6:	08 95       	ret

000041d8 <_ZN15Adafruit_ST773510commonInitEPKh>:
    41d8:	0f 93       	push	r16
    41da:	1f 93       	push	r17
    41dc:	cf 93       	push	r28
    41de:	df 93       	push	r29
    41e0:	ec 01       	movw	r28, r24
    41e2:	8b 01       	movw	r16, r22
    41e4:	1b aa       	std	Y+51, r1	; 0x33
    41e6:	1a aa       	std	Y+50, r1	; 0x32
    41e8:	61 e0       	ldi	r22, 0x01	; 1
    41ea:	8a a5       	ldd	r24, Y+42	; 0x2a
    41ec:	0e 94 81 36 	call	0x6d02	; 0x6d02 <pinMode>
    41f0:	61 e0       	ldi	r22, 0x01	; 1
    41f2:	89 a5       	ldd	r24, Y+41	; 0x29
    41f4:	0e 94 81 36 	call	0x6d02	; 0x6d02 <pinMode>
    41f8:	89 a5       	ldd	r24, Y+41	; 0x29
    41fa:	90 e0       	ldi	r25, 0x00	; 0
    41fc:	fc 01       	movw	r30, r24
    41fe:	ea 5b       	subi	r30, 0xBA	; 186
    4200:	ff 4c       	sbci	r31, 0xCF	; 207
    4202:	e4 91       	lpm	r30, Z
    4204:	f0 e0       	ldi	r31, 0x00	; 0
    4206:	ee 0f       	add	r30, r30
    4208:	ff 1f       	adc	r31, r31
    420a:	ec 59       	subi	r30, 0x9C	; 156
    420c:	ff 4c       	sbci	r31, 0xCF	; 207
    420e:	25 91       	lpm	r18, Z+
    4210:	34 91       	lpm	r19, Z
    4212:	3e a3       	std	Y+38, r19	; 0x26
    4214:	2d a3       	std	Y+37, r18	; 0x25
    4216:	fc 01       	movw	r30, r24
    4218:	ee 5c       	subi	r30, 0xCE	; 206
    421a:	ff 4c       	sbci	r31, 0xCF	; 207
    421c:	e4 91       	lpm	r30, Z
    421e:	e8 ab       	std	Y+48, r30	; 0x30
    4220:	8a a5       	ldd	r24, Y+42	; 0x2a
    4222:	90 e0       	ldi	r25, 0x00	; 0
    4224:	fc 01       	movw	r30, r24
    4226:	ea 5b       	subi	r30, 0xBA	; 186
    4228:	ff 4c       	sbci	r31, 0xCF	; 207
    422a:	e4 91       	lpm	r30, Z
    422c:	f0 e0       	ldi	r31, 0x00	; 0
    422e:	ee 0f       	add	r30, r30
    4230:	ff 1f       	adc	r31, r31
    4232:	ec 59       	subi	r30, 0x9C	; 156
    4234:	ff 4c       	sbci	r31, 0xCF	; 207
    4236:	25 91       	lpm	r18, Z+
    4238:	34 91       	lpm	r19, Z
    423a:	38 a7       	std	Y+40, r19	; 0x28
    423c:	2f a3       	std	Y+39, r18	; 0x27
    423e:	fc 01       	movw	r30, r24
    4240:	ee 5c       	subi	r30, 0xCE	; 206
    4242:	ff 4c       	sbci	r31, 0xCF	; 207
    4244:	e4 91       	lpm	r30, Z
    4246:	e9 ab       	std	Y+49, r30	; 0x31
    4248:	8e 8d       	ldd	r24, Y+30	; 0x1e
    424a:	88 23       	and	r24, r24
    424c:	31 f0       	breq	.+12     	; 0x425a <_ZN15Adafruit_ST773510commonInitEPKh+0x82>
    424e:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <_ZN8SPIClass5beginEv>
    4252:	80 e5       	ldi	r24, 0x50	; 80
    4254:	8f 8f       	std	Y+31, r24	; 0x1f
    4256:	18 a2       	std	Y+32, r1	; 0x20
    4258:	3c c0       	rjmp	.+120    	; 0x42d2 <_ZN15Adafruit_ST773510commonInitEPKh+0xfa>
    425a:	61 e0       	ldi	r22, 0x01	; 1
    425c:	8d a5       	ldd	r24, Y+45	; 0x2d
    425e:	0e 94 81 36 	call	0x6d02	; 0x6d02 <pinMode>
    4262:	61 e0       	ldi	r22, 0x01	; 1
    4264:	8c a5       	ldd	r24, Y+44	; 0x2c
    4266:	0e 94 81 36 	call	0x6d02	; 0x6d02 <pinMode>
    426a:	8d a5       	ldd	r24, Y+45	; 0x2d
    426c:	90 e0       	ldi	r25, 0x00	; 0
    426e:	fc 01       	movw	r30, r24
    4270:	ea 5b       	subi	r30, 0xBA	; 186
    4272:	ff 4c       	sbci	r31, 0xCF	; 207
    4274:	e4 91       	lpm	r30, Z
    4276:	f0 e0       	ldi	r31, 0x00	; 0
    4278:	ee 0f       	add	r30, r30
    427a:	ff 1f       	adc	r31, r31
    427c:	ec 59       	subi	r30, 0x9C	; 156
    427e:	ff 4c       	sbci	r31, 0xCF	; 207
    4280:	a5 91       	lpm	r26, Z+
    4282:	b4 91       	lpm	r27, Z
    4284:	bc a3       	std	Y+36, r27	; 0x24
    4286:	ab a3       	std	Y+35, r26	; 0x23
    4288:	fc 01       	movw	r30, r24
    428a:	ee 5c       	subi	r30, 0xCE	; 206
    428c:	ff 4c       	sbci	r31, 0xCF	; 207
    428e:	84 91       	lpm	r24, Z
    4290:	8f a7       	std	Y+47, r24	; 0x2f
    4292:	2c a5       	ldd	r18, Y+44	; 0x2c
    4294:	30 e0       	ldi	r19, 0x00	; 0
    4296:	f9 01       	movw	r30, r18
    4298:	ea 5b       	subi	r30, 0xBA	; 186
    429a:	ff 4c       	sbci	r31, 0xCF	; 207
    429c:	e4 91       	lpm	r30, Z
    429e:	f0 e0       	ldi	r31, 0x00	; 0
    42a0:	ee 0f       	add	r30, r30
    42a2:	ff 1f       	adc	r31, r31
    42a4:	ec 59       	subi	r30, 0x9C	; 156
    42a6:	ff 4c       	sbci	r31, 0xCF	; 207
    42a8:	45 91       	lpm	r20, Z+
    42aa:	54 91       	lpm	r21, Z
    42ac:	5a a3       	std	Y+34, r21	; 0x22
    42ae:	49 a3       	std	Y+33, r20	; 0x21
    42b0:	f9 01       	movw	r30, r18
    42b2:	ee 5c       	subi	r30, 0xCE	; 206
    42b4:	ff 4c       	sbci	r31, 0xCF	; 207
    42b6:	e4 91       	lpm	r30, Z
    42b8:	ee a7       	std	Y+46, r30	; 0x2e
    42ba:	9c 91       	ld	r25, X
    42bc:	e8 2f       	mov	r30, r24
    42be:	e0 95       	com	r30
    42c0:	e9 23       	and	r30, r25
    42c2:	ec 93       	st	X, r30
    42c4:	e9 a1       	ldd	r30, Y+33	; 0x21
    42c6:	fa a1       	ldd	r31, Y+34	; 0x22
    42c8:	90 81       	ld	r25, Z
    42ca:	8e a5       	ldd	r24, Y+46	; 0x2e
    42cc:	80 95       	com	r24
    42ce:	89 23       	and	r24, r25
    42d0:	80 83       	st	Z, r24
    42d2:	ed a1       	ldd	r30, Y+37	; 0x25
    42d4:	fe a1       	ldd	r31, Y+38	; 0x26
    42d6:	90 81       	ld	r25, Z
    42d8:	88 a9       	ldd	r24, Y+48	; 0x30
    42da:	80 95       	com	r24
    42dc:	89 23       	and	r24, r25
    42de:	80 83       	st	Z, r24
    42e0:	8b a5       	ldd	r24, Y+43	; 0x2b
    42e2:	88 23       	and	r24, r24
    42e4:	09 f1       	breq	.+66     	; 0x4328 <_ZN15Adafruit_ST773510commonInitEPKh+0x150>
    42e6:	61 e0       	ldi	r22, 0x01	; 1
    42e8:	0e 94 81 36 	call	0x6d02	; 0x6d02 <pinMode>
    42ec:	61 e0       	ldi	r22, 0x01	; 1
    42ee:	8b a5       	ldd	r24, Y+43	; 0x2b
    42f0:	0e 94 bd 36 	call	0x6d7a	; 0x6d7a <digitalWrite>
    42f4:	64 ef       	ldi	r22, 0xF4	; 244
    42f6:	71 e0       	ldi	r23, 0x01	; 1
    42f8:	80 e0       	ldi	r24, 0x00	; 0
    42fa:	90 e0       	ldi	r25, 0x00	; 0
    42fc:	0e 94 c4 35 	call	0x6b88	; 0x6b88 <delay>
    4300:	60 e0       	ldi	r22, 0x00	; 0
    4302:	8b a5       	ldd	r24, Y+43	; 0x2b
    4304:	0e 94 bd 36 	call	0x6d7a	; 0x6d7a <digitalWrite>
    4308:	64 ef       	ldi	r22, 0xF4	; 244
    430a:	71 e0       	ldi	r23, 0x01	; 1
    430c:	80 e0       	ldi	r24, 0x00	; 0
    430e:	90 e0       	ldi	r25, 0x00	; 0
    4310:	0e 94 c4 35 	call	0x6b88	; 0x6b88 <delay>
    4314:	61 e0       	ldi	r22, 0x01	; 1
    4316:	8b a5       	ldd	r24, Y+43	; 0x2b
    4318:	0e 94 bd 36 	call	0x6d7a	; 0x6d7a <digitalWrite>
    431c:	64 ef       	ldi	r22, 0xF4	; 244
    431e:	71 e0       	ldi	r23, 0x01	; 1
    4320:	80 e0       	ldi	r24, 0x00	; 0
    4322:	90 e0       	ldi	r25, 0x00	; 0
    4324:	0e 94 c4 35 	call	0x6b88	; 0x6b88 <delay>
    4328:	01 15       	cp	r16, r1
    432a:	11 05       	cpc	r17, r1
    432c:	21 f0       	breq	.+8      	; 0x4336 <_ZN15Adafruit_ST773510commonInitEPKh+0x15e>
    432e:	b8 01       	movw	r22, r16
    4330:	ce 01       	movw	r24, r28
    4332:	0e 94 8c 20 	call	0x4118	; 0x4118 <_ZN15Adafruit_ST773511commandListEPKh>
    4336:	df 91       	pop	r29
    4338:	cf 91       	pop	r28
    433a:	1f 91       	pop	r17
    433c:	0f 91       	pop	r16
    433e:	08 95       	ret

00004340 <_ZN15Adafruit_ST77355initGEv>:
    4340:	6d e9       	ldi	r22, 0x9D	; 157
    4342:	78 e0       	ldi	r23, 0x08	; 8
    4344:	0e 94 ec 20 	call	0x41d8	; 0x41d8 <_ZN15Adafruit_ST773510commonInitEPKh>
    4348:	08 95       	ret

0000434a <_ZN15Adafruit_ST773513setAddrWindowEhhhh>:
    434a:	ef 92       	push	r14
    434c:	ff 92       	push	r15
    434e:	0f 93       	push	r16
    4350:	1f 93       	push	r17
    4352:	cf 93       	push	r28
    4354:	df 93       	push	r29
    4356:	ec 01       	movw	r28, r24
    4358:	e6 2e       	mov	r14, r22
    435a:	14 2f       	mov	r17, r20
    435c:	f2 2e       	mov	r15, r18
    435e:	6a e2       	ldi	r22, 0x2A	; 42
    4360:	0e 94 95 1f 	call	0x3f2a	; 0x3f2a <_ZN15Adafruit_ST773512writecommandEh>
    4364:	60 e0       	ldi	r22, 0x00	; 0
    4366:	ce 01       	movw	r24, r28
    4368:	0e 94 15 20 	call	0x402a	; 0x402a <_ZN15Adafruit_ST77359writedataEh>
    436c:	6a a9       	ldd	r22, Y+50	; 0x32
    436e:	6e 0d       	add	r22, r14
    4370:	ce 01       	movw	r24, r28
    4372:	0e 94 15 20 	call	0x402a	; 0x402a <_ZN15Adafruit_ST77359writedataEh>
    4376:	60 e0       	ldi	r22, 0x00	; 0
    4378:	ce 01       	movw	r24, r28
    437a:	0e 94 15 20 	call	0x402a	; 0x402a <_ZN15Adafruit_ST77359writedataEh>
    437e:	6a a9       	ldd	r22, Y+50	; 0x32
    4380:	6f 0d       	add	r22, r15
    4382:	ce 01       	movw	r24, r28
    4384:	0e 94 15 20 	call	0x402a	; 0x402a <_ZN15Adafruit_ST77359writedataEh>
    4388:	6b e2       	ldi	r22, 0x2B	; 43
    438a:	ce 01       	movw	r24, r28
    438c:	0e 94 95 1f 	call	0x3f2a	; 0x3f2a <_ZN15Adafruit_ST773512writecommandEh>
    4390:	60 e0       	ldi	r22, 0x00	; 0
    4392:	ce 01       	movw	r24, r28
    4394:	0e 94 15 20 	call	0x402a	; 0x402a <_ZN15Adafruit_ST77359writedataEh>
    4398:	6b a9       	ldd	r22, Y+51	; 0x33
    439a:	61 0f       	add	r22, r17
    439c:	ce 01       	movw	r24, r28
    439e:	0e 94 15 20 	call	0x402a	; 0x402a <_ZN15Adafruit_ST77359writedataEh>
    43a2:	60 e0       	ldi	r22, 0x00	; 0
    43a4:	ce 01       	movw	r24, r28
    43a6:	0e 94 15 20 	call	0x402a	; 0x402a <_ZN15Adafruit_ST77359writedataEh>
    43aa:	6b a9       	ldd	r22, Y+51	; 0x33
    43ac:	60 0f       	add	r22, r16
    43ae:	ce 01       	movw	r24, r28
    43b0:	0e 94 15 20 	call	0x402a	; 0x402a <_ZN15Adafruit_ST77359writedataEh>
    43b4:	6c e2       	ldi	r22, 0x2C	; 44
    43b6:	ce 01       	movw	r24, r28
    43b8:	0e 94 95 1f 	call	0x3f2a	; 0x3f2a <_ZN15Adafruit_ST773512writecommandEh>
    43bc:	df 91       	pop	r29
    43be:	cf 91       	pop	r28
    43c0:	1f 91       	pop	r17
    43c2:	0f 91       	pop	r16
    43c4:	ff 90       	pop	r15
    43c6:	ef 90       	pop	r14
    43c8:	08 95       	ret

000043ca <_ZN15Adafruit_ST77359drawPixelEiij>:
    43ca:	ef 92       	push	r14
    43cc:	ff 92       	push	r15
    43ce:	0f 93       	push	r16
    43d0:	cf 93       	push	r28
    43d2:	df 93       	push	r29
    43d4:	ec 01       	movw	r28, r24
    43d6:	79 01       	movw	r14, r18
    43d8:	77 23       	and	r23, r23
    43da:	0c f4       	brge	.+2      	; 0x43de <_ZN15Adafruit_ST77359drawPixelEiij+0x14>
    43dc:	d7 c0       	rjmp	.+430    	; 0x458c <_ZN15Adafruit_ST77359drawPixelEiij+0x1c2>
    43de:	88 85       	ldd	r24, Y+8	; 0x08
    43e0:	99 85       	ldd	r25, Y+9	; 0x09
    43e2:	68 17       	cp	r22, r24
    43e4:	79 07       	cpc	r23, r25
    43e6:	0c f0       	brlt	.+2      	; 0x43ea <_ZN15Adafruit_ST77359drawPixelEiij+0x20>
    43e8:	d1 c0       	rjmp	.+418    	; 0x458c <_ZN15Adafruit_ST77359drawPixelEiij+0x1c2>
    43ea:	55 23       	and	r21, r21
    43ec:	0c f4       	brge	.+2      	; 0x43f0 <_ZN15Adafruit_ST77359drawPixelEiij+0x26>
    43ee:	ce c0       	rjmp	.+412    	; 0x458c <_ZN15Adafruit_ST77359drawPixelEiij+0x1c2>
    43f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    43f2:	9b 85       	ldd	r25, Y+11	; 0x0b
    43f4:	48 17       	cp	r20, r24
    43f6:	59 07       	cpc	r21, r25
    43f8:	0c f0       	brlt	.+2      	; 0x43fc <_ZN15Adafruit_ST77359drawPixelEiij+0x32>
    43fa:	c8 c0       	rjmp	.+400    	; 0x458c <_ZN15Adafruit_ST77359drawPixelEiij+0x1c2>
    43fc:	01 e0       	ldi	r16, 0x01	; 1
    43fe:	04 0f       	add	r16, r20
    4400:	21 e0       	ldi	r18, 0x01	; 1
    4402:	26 0f       	add	r18, r22
    4404:	ce 01       	movw	r24, r28
    4406:	0e 94 a5 21 	call	0x434a	; 0x434a <_ZN15Adafruit_ST773513setAddrWindowEhhhh>
    440a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    440c:	88 23       	and	r24, r24
    440e:	d9 f0       	breq	.+54     	; 0x4446 <_ZN15Adafruit_ST77359drawPixelEiij+0x7c>
    4410:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4412:	88 a1       	ldd	r24, Y+32	; 0x20
    4414:	20 91 0c 03 	lds	r18, 0x030C	; 0x80030c <_ZN8SPIClass13interruptModeE>
    4418:	22 23       	and	r18, r18
    441a:	99 f0       	breq	.+38     	; 0x4442 <_ZN15Adafruit_ST77359drawPixelEiij+0x78>
    441c:	2f b7       	in	r18, 0x3f	; 63
    441e:	f8 94       	cli
    4420:	30 91 0c 03 	lds	r19, 0x030C	; 0x80030c <_ZN8SPIClass13interruptModeE>
    4424:	31 30       	cpi	r19, 0x01	; 1
    4426:	59 f4       	brne	.+22     	; 0x443e <_ZN15Adafruit_ST77359drawPixelEiij+0x74>
    4428:	3d b3       	in	r19, 0x1d	; 29
    442a:	30 93 0a 03 	sts	0x030A, r19	; 0x80030a <__data_end>
    442e:	4d b3       	in	r20, 0x1d	; 29
    4430:	30 91 0b 03 	lds	r19, 0x030B	; 0x80030b <_ZN8SPIClass13interruptMaskE>
    4434:	30 95       	com	r19
    4436:	34 23       	and	r19, r20
    4438:	3d bb       	out	0x1d, r19	; 29
    443a:	2f bf       	out	0x3f, r18	; 63
    443c:	02 c0       	rjmp	.+4      	; 0x4442 <_ZN15Adafruit_ST77359drawPixelEiij+0x78>
    443e:	20 93 0a 03 	sts	0x030A, r18	; 0x80030a <__data_end>
    4442:	9c bd       	out	0x2c, r25	; 44
    4444:	8d bd       	out	0x2d, r24	; 45
    4446:	ef a1       	ldd	r30, Y+39	; 0x27
    4448:	f8 a5       	ldd	r31, Y+40	; 0x28
    444a:	90 81       	ld	r25, Z
    444c:	89 a9       	ldd	r24, Y+49	; 0x31
    444e:	89 2b       	or	r24, r25
    4450:	80 83       	st	Z, r24
    4452:	ed a1       	ldd	r30, Y+37	; 0x25
    4454:	fe a1       	ldd	r31, Y+38	; 0x26
    4456:	90 81       	ld	r25, Z
    4458:	88 a9       	ldd	r24, Y+48	; 0x30
    445a:	80 95       	com	r24
    445c:	89 23       	and	r24, r25
    445e:	80 83       	st	Z, r24
    4460:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4462:	82 30       	cpi	r24, 0x02	; 2
    4464:	09 f0       	breq	.+2      	; 0x4468 <_ZN15Adafruit_ST77359drawPixelEiij+0x9e>
    4466:	82 c0       	rjmp	.+260    	; 0x456c <_ZN15Adafruit_ST77359drawPixelEiij+0x1a2>
    4468:	97 01       	movw	r18, r14
    446a:	32 2f       	mov	r19, r18
    446c:	22 27       	eor	r18, r18
    446e:	33 0f       	add	r19, r19
    4470:	33 0f       	add	r19, r19
    4472:	33 0f       	add	r19, r19
    4474:	c7 01       	movw	r24, r14
    4476:	80 7e       	andi	r24, 0xE0	; 224
    4478:	97 70       	andi	r25, 0x07	; 7
    447a:	82 2b       	or	r24, r18
    447c:	93 2b       	or	r25, r19
    447e:	ef 2c       	mov	r14, r15
    4480:	ff 24       	eor	r15, r15
    4482:	e6 94       	lsr	r14
    4484:	e6 94       	lsr	r14
    4486:	e6 94       	lsr	r14
    4488:	e8 2a       	or	r14, r24
    448a:	f9 2a       	or	r15, r25
    448c:	6f c0       	rjmp	.+222    	; 0x456c <_ZN15Adafruit_ST77359drawPixelEiij+0x1a2>
    448e:	fe bc       	out	0x2e, r15	; 46
    4490:	00 00       	nop
    4492:	0d b4       	in	r0, 0x2d	; 45
    4494:	07 fe       	sbrs	r0, 7
    4496:	fd cf       	rjmp	.-6      	; 0x4492 <_ZN15Adafruit_ST77359drawPixelEiij+0xc8>
    4498:	8e b5       	in	r24, 0x2e	; 46
    449a:	70 c0       	rjmp	.+224    	; 0x457c <_ZN15Adafruit_ST77359drawPixelEiij+0x1b2>
    449c:	82 2f       	mov	r24, r18
    449e:	83 23       	and	r24, r19
    44a0:	39 f0       	breq	.+14     	; 0x44b0 <_ZN15Adafruit_ST77359drawPixelEiij+0xe6>
    44a2:	e9 a1       	ldd	r30, Y+33	; 0x21
    44a4:	fa a1       	ldd	r31, Y+34	; 0x22
    44a6:	90 81       	ld	r25, Z
    44a8:	8e a5       	ldd	r24, Y+46	; 0x2e
    44aa:	89 2b       	or	r24, r25
    44ac:	80 83       	st	Z, r24
    44ae:	07 c0       	rjmp	.+14     	; 0x44be <_ZN15Adafruit_ST77359drawPixelEiij+0xf4>
    44b0:	e9 a1       	ldd	r30, Y+33	; 0x21
    44b2:	fa a1       	ldd	r31, Y+34	; 0x22
    44b4:	90 81       	ld	r25, Z
    44b6:	8e a5       	ldd	r24, Y+46	; 0x2e
    44b8:	80 95       	com	r24
    44ba:	89 23       	and	r24, r25
    44bc:	80 83       	st	Z, r24
    44be:	eb a1       	ldd	r30, Y+35	; 0x23
    44c0:	fc a1       	ldd	r31, Y+36	; 0x24
    44c2:	90 81       	ld	r25, Z
    44c4:	8f a5       	ldd	r24, Y+47	; 0x2f
    44c6:	89 2b       	or	r24, r25
    44c8:	80 83       	st	Z, r24
    44ca:	eb a1       	ldd	r30, Y+35	; 0x23
    44cc:	fc a1       	ldd	r31, Y+36	; 0x24
    44ce:	90 81       	ld	r25, Z
    44d0:	8f a5       	ldd	r24, Y+47	; 0x2f
    44d2:	80 95       	com	r24
    44d4:	89 23       	and	r24, r25
    44d6:	80 83       	st	Z, r24
    44d8:	26 95       	lsr	r18
    44da:	41 50       	subi	r20, 0x01	; 1
    44dc:	51 09       	sbc	r21, r1
    44de:	f1 f6       	brne	.-68     	; 0x449c <_ZN15Adafruit_ST77359drawPixelEiij+0xd2>
    44e0:	4d c0       	rjmp	.+154    	; 0x457c <_ZN15Adafruit_ST77359drawPixelEiij+0x1b2>
    44e2:	ee bc       	out	0x2e, r14	; 46
    44e4:	00 00       	nop
    44e6:	0d b4       	in	r0, 0x2d	; 45
    44e8:	07 fe       	sbrs	r0, 7
    44ea:	fd cf       	rjmp	.-6      	; 0x44e6 <_ZN15Adafruit_ST77359drawPixelEiij+0x11c>
    44ec:	8e b5       	in	r24, 0x2e	; 46
    44ee:	22 c0       	rjmp	.+68     	; 0x4534 <_ZN15Adafruit_ST77359drawPixelEiij+0x16a>
    44f0:	82 2f       	mov	r24, r18
    44f2:	83 23       	and	r24, r19
    44f4:	39 f0       	breq	.+14     	; 0x4504 <_ZN15Adafruit_ST77359drawPixelEiij+0x13a>
    44f6:	e9 a1       	ldd	r30, Y+33	; 0x21
    44f8:	fa a1       	ldd	r31, Y+34	; 0x22
    44fa:	90 81       	ld	r25, Z
    44fc:	8e a5       	ldd	r24, Y+46	; 0x2e
    44fe:	89 2b       	or	r24, r25
    4500:	80 83       	st	Z, r24
    4502:	07 c0       	rjmp	.+14     	; 0x4512 <_ZN15Adafruit_ST77359drawPixelEiij+0x148>
    4504:	e9 a1       	ldd	r30, Y+33	; 0x21
    4506:	fa a1       	ldd	r31, Y+34	; 0x22
    4508:	90 81       	ld	r25, Z
    450a:	8e a5       	ldd	r24, Y+46	; 0x2e
    450c:	80 95       	com	r24
    450e:	89 23       	and	r24, r25
    4510:	80 83       	st	Z, r24
    4512:	eb a1       	ldd	r30, Y+35	; 0x23
    4514:	fc a1       	ldd	r31, Y+36	; 0x24
    4516:	90 81       	ld	r25, Z
    4518:	8f a5       	ldd	r24, Y+47	; 0x2f
    451a:	89 2b       	or	r24, r25
    451c:	80 83       	st	Z, r24
    451e:	eb a1       	ldd	r30, Y+35	; 0x23
    4520:	fc a1       	ldd	r31, Y+36	; 0x24
    4522:	90 81       	ld	r25, Z
    4524:	8f a5       	ldd	r24, Y+47	; 0x2f
    4526:	80 95       	com	r24
    4528:	89 23       	and	r24, r25
    452a:	80 83       	st	Z, r24
    452c:	26 95       	lsr	r18
    452e:	41 50       	subi	r20, 0x01	; 1
    4530:	51 09       	sbc	r21, r1
    4532:	f1 f6       	brne	.-68     	; 0x44f0 <_ZN15Adafruit_ST77359drawPixelEiij+0x126>
    4534:	ed a1       	ldd	r30, Y+37	; 0x25
    4536:	fe a1       	ldd	r31, Y+38	; 0x26
    4538:	90 81       	ld	r25, Z
    453a:	88 a9       	ldd	r24, Y+48	; 0x30
    453c:	89 2b       	or	r24, r25
    453e:	80 83       	st	Z, r24
    4540:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4542:	88 23       	and	r24, r24
    4544:	19 f1       	breq	.+70     	; 0x458c <_ZN15Adafruit_ST77359drawPixelEiij+0x1c2>
    4546:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <_ZN8SPIClass13interruptModeE>
    454a:	88 23       	and	r24, r24
    454c:	f9 f0       	breq	.+62     	; 0x458c <_ZN15Adafruit_ST77359drawPixelEiij+0x1c2>
    454e:	9f b7       	in	r25, 0x3f	; 63
    4550:	f8 94       	cli
    4552:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <_ZN8SPIClass13interruptModeE>
    4556:	81 30       	cpi	r24, 0x01	; 1
    4558:	29 f4       	brne	.+10     	; 0x4564 <_ZN15Adafruit_ST77359drawPixelEiij+0x19a>
    455a:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <__data_end>
    455e:	8d bb       	out	0x1d, r24	; 29
    4560:	9f bf       	out	0x3f, r25	; 63
    4562:	14 c0       	rjmp	.+40     	; 0x458c <_ZN15Adafruit_ST77359drawPixelEiij+0x1c2>
    4564:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <__data_end>
    4568:	8f bf       	out	0x3f, r24	; 63
    456a:	10 c0       	rjmp	.+32     	; 0x458c <_ZN15Adafruit_ST77359drawPixelEiij+0x1c2>
    456c:	3f 2d       	mov	r19, r15
    456e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4570:	81 11       	cpse	r24, r1
    4572:	8d cf       	rjmp	.-230    	; 0x448e <_ZN15Adafruit_ST77359drawPixelEiij+0xc4>
    4574:	48 e0       	ldi	r20, 0x08	; 8
    4576:	50 e0       	ldi	r21, 0x00	; 0
    4578:	20 e8       	ldi	r18, 0x80	; 128
    457a:	90 cf       	rjmp	.-224    	; 0x449c <_ZN15Adafruit_ST77359drawPixelEiij+0xd2>
    457c:	3e 2d       	mov	r19, r14
    457e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4580:	81 11       	cpse	r24, r1
    4582:	af cf       	rjmp	.-162    	; 0x44e2 <_ZN15Adafruit_ST77359drawPixelEiij+0x118>
    4584:	48 e0       	ldi	r20, 0x08	; 8
    4586:	50 e0       	ldi	r21, 0x00	; 0
    4588:	20 e8       	ldi	r18, 0x80	; 128
    458a:	b2 cf       	rjmp	.-156    	; 0x44f0 <_ZN15Adafruit_ST77359drawPixelEiij+0x126>
    458c:	df 91       	pop	r29
    458e:	cf 91       	pop	r28
    4590:	0f 91       	pop	r16
    4592:	ff 90       	pop	r15
    4594:	ef 90       	pop	r14
    4596:	08 95       	ret

00004598 <_ZN15Adafruit_ST773513drawFastVLineEiiij>:
    4598:	cf 92       	push	r12
    459a:	df 92       	push	r13
    459c:	ef 92       	push	r14
    459e:	ff 92       	push	r15
    45a0:	0f 93       	push	r16
    45a2:	1f 93       	push	r17
    45a4:	cf 93       	push	r28
    45a6:	df 93       	push	r29
    45a8:	ec 01       	movw	r28, r24
    45aa:	79 01       	movw	r14, r18
    45ac:	68 01       	movw	r12, r16
    45ae:	88 85       	ldd	r24, Y+8	; 0x08
    45b0:	99 85       	ldd	r25, Y+9	; 0x09
    45b2:	68 17       	cp	r22, r24
    45b4:	79 07       	cpc	r23, r25
    45b6:	0c f0       	brlt	.+2      	; 0x45ba <_ZN15Adafruit_ST773513drawFastVLineEiiij+0x22>
    45b8:	df c0       	rjmp	.+446    	; 0x4778 <_ZN15Adafruit_ST773513drawFastVLineEiiij+0x1e0>
    45ba:	8a 85       	ldd	r24, Y+10	; 0x0a
    45bc:	9b 85       	ldd	r25, Y+11	; 0x0b
    45be:	48 17       	cp	r20, r24
    45c0:	59 07       	cpc	r21, r25
    45c2:	0c f0       	brlt	.+2      	; 0x45c6 <_ZN15Adafruit_ST773513drawFastVLineEiiij+0x2e>
    45c4:	d9 c0       	rjmp	.+434    	; 0x4778 <_ZN15Adafruit_ST773513drawFastVLineEiiij+0x1e0>
    45c6:	9a 01       	movw	r18, r20
    45c8:	2e 0d       	add	r18, r14
    45ca:	3f 1d       	adc	r19, r15
    45cc:	21 50       	subi	r18, 0x01	; 1
    45ce:	31 09       	sbc	r19, r1
    45d0:	28 17       	cp	r18, r24
    45d2:	39 07       	cpc	r19, r25
    45d4:	1c f0       	brlt	.+6      	; 0x45dc <_ZN15Adafruit_ST773513drawFastVLineEiiij+0x44>
    45d6:	7c 01       	movw	r14, r24
    45d8:	e4 1a       	sub	r14, r20
    45da:	f5 0a       	sbc	r15, r21
    45dc:	0f ef       	ldi	r16, 0xFF	; 255
    45de:	04 0f       	add	r16, r20
    45e0:	0e 0d       	add	r16, r14
    45e2:	26 2f       	mov	r18, r22
    45e4:	ce 01       	movw	r24, r28
    45e6:	0e 94 a5 21 	call	0x434a	; 0x434a <_ZN15Adafruit_ST773513setAddrWindowEhhhh>
    45ea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    45ec:	82 30       	cpi	r24, 0x02	; 2
    45ee:	a1 f4       	brne	.+40     	; 0x4618 <_ZN15Adafruit_ST773513drawFastVLineEiiij+0x80>
    45f0:	96 01       	movw	r18, r12
    45f2:	32 2f       	mov	r19, r18
    45f4:	22 27       	eor	r18, r18
    45f6:	33 0f       	add	r19, r19
    45f8:	33 0f       	add	r19, r19
    45fa:	33 0f       	add	r19, r19
    45fc:	c6 01       	movw	r24, r12
    45fe:	80 7e       	andi	r24, 0xE0	; 224
    4600:	97 70       	andi	r25, 0x07	; 7
    4602:	82 2b       	or	r24, r18
    4604:	93 2b       	or	r25, r19
    4606:	86 01       	movw	r16, r12
    4608:	01 2f       	mov	r16, r17
    460a:	11 27       	eor	r17, r17
    460c:	06 95       	lsr	r16
    460e:	06 95       	lsr	r16
    4610:	06 95       	lsr	r16
    4612:	6c 01       	movw	r12, r24
    4614:	c0 2a       	or	r12, r16
    4616:	d1 2a       	or	r13, r17
    4618:	3d 2d       	mov	r19, r13
    461a:	0c 2d       	mov	r16, r12
    461c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    461e:	88 23       	and	r24, r24
    4620:	d9 f0       	breq	.+54     	; 0x4658 <_ZN15Adafruit_ST773513drawFastVLineEiiij+0xc0>
    4622:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4624:	88 a1       	ldd	r24, Y+32	; 0x20
    4626:	20 91 0c 03 	lds	r18, 0x030C	; 0x80030c <_ZN8SPIClass13interruptModeE>
    462a:	22 23       	and	r18, r18
    462c:	99 f0       	breq	.+38     	; 0x4654 <_ZN15Adafruit_ST773513drawFastVLineEiiij+0xbc>
    462e:	2f b7       	in	r18, 0x3f	; 63
    4630:	f8 94       	cli
    4632:	40 91 0c 03 	lds	r20, 0x030C	; 0x80030c <_ZN8SPIClass13interruptModeE>
    4636:	41 30       	cpi	r20, 0x01	; 1
    4638:	59 f4       	brne	.+22     	; 0x4650 <_ZN15Adafruit_ST773513drawFastVLineEiiij+0xb8>
    463a:	4d b3       	in	r20, 0x1d	; 29
    463c:	40 93 0a 03 	sts	0x030A, r20	; 0x80030a <__data_end>
    4640:	4d b3       	in	r20, 0x1d	; 29
    4642:	50 91 0b 03 	lds	r21, 0x030B	; 0x80030b <_ZN8SPIClass13interruptMaskE>
    4646:	50 95       	com	r21
    4648:	45 23       	and	r20, r21
    464a:	4d bb       	out	0x1d, r20	; 29
    464c:	2f bf       	out	0x3f, r18	; 63
    464e:	02 c0       	rjmp	.+4      	; 0x4654 <_ZN15Adafruit_ST773513drawFastVLineEiiij+0xbc>
    4650:	20 93 0a 03 	sts	0x030A, r18	; 0x80030a <__data_end>
    4654:	9c bd       	out	0x2c, r25	; 44
    4656:	8d bd       	out	0x2d, r24	; 45
    4658:	ef a1       	ldd	r30, Y+39	; 0x27
    465a:	f8 a5       	ldd	r31, Y+40	; 0x28
    465c:	90 81       	ld	r25, Z
    465e:	89 a9       	ldd	r24, Y+49	; 0x31
    4660:	89 2b       	or	r24, r25
    4662:	80 83       	st	Z, r24
    4664:	ed a1       	ldd	r30, Y+37	; 0x25
    4666:	fe a1       	ldd	r31, Y+38	; 0x26
    4668:	90 81       	ld	r25, Z
    466a:	88 a9       	ldd	r24, Y+48	; 0x30
    466c:	80 95       	com	r24
    466e:	89 23       	and	r24, r25
    4670:	80 83       	st	Z, r24
    4672:	60 e8       	ldi	r22, 0x80	; 128
    4674:	81 e0       	ldi	r24, 0x01	; 1
    4676:	e8 1a       	sub	r14, r24
    4678:	f1 08       	sbc	r15, r1
    467a:	08 f4       	brcc	.+2      	; 0x467e <_ZN15Adafruit_ST773513drawFastVLineEiiij+0xe6>
    467c:	5a c0       	rjmp	.+180    	; 0x4732 <_ZN15Adafruit_ST773513drawFastVLineEiiij+0x19a>
    467e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4680:	88 23       	and	r24, r24
    4682:	39 f0       	breq	.+14     	; 0x4692 <_ZN15Adafruit_ST773513drawFastVLineEiiij+0xfa>
    4684:	3e bd       	out	0x2e, r19	; 46
    4686:	00 00       	nop
    4688:	0d b4       	in	r0, 0x2d	; 45
    468a:	07 fe       	sbrs	r0, 7
    468c:	fd cf       	rjmp	.-6      	; 0x4688 <_ZN15Adafruit_ST773513drawFastVLineEiiij+0xf0>
    468e:	8e b5       	in	r24, 0x2e	; 46
    4690:	6c c0       	rjmp	.+216    	; 0x476a <_ZN15Adafruit_ST773513drawFastVLineEiiij+0x1d2>
    4692:	48 e0       	ldi	r20, 0x08	; 8
    4694:	50 e0       	ldi	r21, 0x00	; 0
    4696:	26 2f       	mov	r18, r22
    4698:	83 2f       	mov	r24, r19
    469a:	82 23       	and	r24, r18
    469c:	39 f0       	breq	.+14     	; 0x46ac <_ZN15Adafruit_ST773513drawFastVLineEiiij+0x114>
    469e:	e9 a1       	ldd	r30, Y+33	; 0x21
    46a0:	fa a1       	ldd	r31, Y+34	; 0x22
    46a2:	90 81       	ld	r25, Z
    46a4:	8e a5       	ldd	r24, Y+46	; 0x2e
    46a6:	89 2b       	or	r24, r25
    46a8:	80 83       	st	Z, r24
    46aa:	07 c0       	rjmp	.+14     	; 0x46ba <_ZN15Adafruit_ST773513drawFastVLineEiiij+0x122>
    46ac:	e9 a1       	ldd	r30, Y+33	; 0x21
    46ae:	fa a1       	ldd	r31, Y+34	; 0x22
    46b0:	90 81       	ld	r25, Z
    46b2:	8e a5       	ldd	r24, Y+46	; 0x2e
    46b4:	80 95       	com	r24
    46b6:	89 23       	and	r24, r25
    46b8:	80 83       	st	Z, r24
    46ba:	eb a1       	ldd	r30, Y+35	; 0x23
    46bc:	fc a1       	ldd	r31, Y+36	; 0x24
    46be:	90 81       	ld	r25, Z
    46c0:	8f a5       	ldd	r24, Y+47	; 0x2f
    46c2:	89 2b       	or	r24, r25
    46c4:	80 83       	st	Z, r24
    46c6:	eb a1       	ldd	r30, Y+35	; 0x23
    46c8:	fc a1       	ldd	r31, Y+36	; 0x24
    46ca:	90 81       	ld	r25, Z
    46cc:	8f a5       	ldd	r24, Y+47	; 0x2f
    46ce:	80 95       	com	r24
    46d0:	89 23       	and	r24, r25
    46d2:	80 83       	st	Z, r24
    46d4:	26 95       	lsr	r18
    46d6:	41 50       	subi	r20, 0x01	; 1
    46d8:	51 09       	sbc	r21, r1
    46da:	f1 f6       	brne	.-68     	; 0x4698 <_ZN15Adafruit_ST773513drawFastVLineEiiij+0x100>
    46dc:	46 c0       	rjmp	.+140    	; 0x476a <_ZN15Adafruit_ST773513drawFastVLineEiiij+0x1d2>
    46de:	0e bd       	out	0x2e, r16	; 46
    46e0:	00 00       	nop
    46e2:	0d b4       	in	r0, 0x2d	; 45
    46e4:	07 fe       	sbrs	r0, 7
    46e6:	fd cf       	rjmp	.-6      	; 0x46e2 <_ZN15Adafruit_ST773513drawFastVLineEiiij+0x14a>
    46e8:	8e b5       	in	r24, 0x2e	; 46
    46ea:	c4 cf       	rjmp	.-120    	; 0x4674 <_ZN15Adafruit_ST773513drawFastVLineEiiij+0xdc>
    46ec:	80 2f       	mov	r24, r16
    46ee:	82 23       	and	r24, r18
    46f0:	39 f0       	breq	.+14     	; 0x4700 <_ZN15Adafruit_ST773513drawFastVLineEiiij+0x168>
    46f2:	e9 a1       	ldd	r30, Y+33	; 0x21
    46f4:	fa a1       	ldd	r31, Y+34	; 0x22
    46f6:	90 81       	ld	r25, Z
    46f8:	8e a5       	ldd	r24, Y+46	; 0x2e
    46fa:	89 2b       	or	r24, r25
    46fc:	80 83       	st	Z, r24
    46fe:	07 c0       	rjmp	.+14     	; 0x470e <_ZN15Adafruit_ST773513drawFastVLineEiiij+0x176>
    4700:	e9 a1       	ldd	r30, Y+33	; 0x21
    4702:	fa a1       	ldd	r31, Y+34	; 0x22
    4704:	90 81       	ld	r25, Z
    4706:	8e a5       	ldd	r24, Y+46	; 0x2e
    4708:	80 95       	com	r24
    470a:	89 23       	and	r24, r25
    470c:	80 83       	st	Z, r24
    470e:	eb a1       	ldd	r30, Y+35	; 0x23
    4710:	fc a1       	ldd	r31, Y+36	; 0x24
    4712:	90 81       	ld	r25, Z
    4714:	8f a5       	ldd	r24, Y+47	; 0x2f
    4716:	89 2b       	or	r24, r25
    4718:	80 83       	st	Z, r24
    471a:	eb a1       	ldd	r30, Y+35	; 0x23
    471c:	fc a1       	ldd	r31, Y+36	; 0x24
    471e:	90 81       	ld	r25, Z
    4720:	8f a5       	ldd	r24, Y+47	; 0x2f
    4722:	80 95       	com	r24
    4724:	89 23       	and	r24, r25
    4726:	80 83       	st	Z, r24
    4728:	26 95       	lsr	r18
    472a:	41 50       	subi	r20, 0x01	; 1
    472c:	51 09       	sbc	r21, r1
    472e:	f1 f6       	brne	.-68     	; 0x46ec <_ZN15Adafruit_ST773513drawFastVLineEiiij+0x154>
    4730:	a1 cf       	rjmp	.-190    	; 0x4674 <_ZN15Adafruit_ST773513drawFastVLineEiiij+0xdc>
    4732:	ed a1       	ldd	r30, Y+37	; 0x25
    4734:	fe a1       	ldd	r31, Y+38	; 0x26
    4736:	90 81       	ld	r25, Z
    4738:	88 a9       	ldd	r24, Y+48	; 0x30
    473a:	89 2b       	or	r24, r25
    473c:	80 83       	st	Z, r24
    473e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4740:	88 23       	and	r24, r24
    4742:	d1 f0       	breq	.+52     	; 0x4778 <_ZN15Adafruit_ST773513drawFastVLineEiiij+0x1e0>
    4744:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <_ZN8SPIClass13interruptModeE>
    4748:	88 23       	and	r24, r24
    474a:	b1 f0       	breq	.+44     	; 0x4778 <_ZN15Adafruit_ST773513drawFastVLineEiiij+0x1e0>
    474c:	9f b7       	in	r25, 0x3f	; 63
    474e:	f8 94       	cli
    4750:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <_ZN8SPIClass13interruptModeE>
    4754:	81 30       	cpi	r24, 0x01	; 1
    4756:	29 f4       	brne	.+10     	; 0x4762 <_ZN15Adafruit_ST773513drawFastVLineEiiij+0x1ca>
    4758:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <__data_end>
    475c:	8d bb       	out	0x1d, r24	; 29
    475e:	9f bf       	out	0x3f, r25	; 63
    4760:	0b c0       	rjmp	.+22     	; 0x4778 <_ZN15Adafruit_ST773513drawFastVLineEiiij+0x1e0>
    4762:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <__data_end>
    4766:	8f bf       	out	0x3f, r24	; 63
    4768:	07 c0       	rjmp	.+14     	; 0x4778 <_ZN15Adafruit_ST773513drawFastVLineEiiij+0x1e0>
    476a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    476c:	81 11       	cpse	r24, r1
    476e:	b7 cf       	rjmp	.-146    	; 0x46de <_ZN15Adafruit_ST773513drawFastVLineEiiij+0x146>
    4770:	48 e0       	ldi	r20, 0x08	; 8
    4772:	50 e0       	ldi	r21, 0x00	; 0
    4774:	26 2f       	mov	r18, r22
    4776:	ba cf       	rjmp	.-140    	; 0x46ec <_ZN15Adafruit_ST773513drawFastVLineEiiij+0x154>
    4778:	df 91       	pop	r29
    477a:	cf 91       	pop	r28
    477c:	1f 91       	pop	r17
    477e:	0f 91       	pop	r16
    4780:	ff 90       	pop	r15
    4782:	ef 90       	pop	r14
    4784:	df 90       	pop	r13
    4786:	cf 90       	pop	r12
    4788:	08 95       	ret

0000478a <_ZN15Adafruit_ST773513drawFastHLineEiiij>:
    478a:	cf 92       	push	r12
    478c:	df 92       	push	r13
    478e:	ef 92       	push	r14
    4790:	ff 92       	push	r15
    4792:	0f 93       	push	r16
    4794:	1f 93       	push	r17
    4796:	cf 93       	push	r28
    4798:	df 93       	push	r29
    479a:	ec 01       	movw	r28, r24
    479c:	79 01       	movw	r14, r18
    479e:	68 01       	movw	r12, r16
    47a0:	88 85       	ldd	r24, Y+8	; 0x08
    47a2:	99 85       	ldd	r25, Y+9	; 0x09
    47a4:	68 17       	cp	r22, r24
    47a6:	79 07       	cpc	r23, r25
    47a8:	0c f0       	brlt	.+2      	; 0x47ac <_ZN15Adafruit_ST773513drawFastHLineEiiij+0x22>
    47aa:	df c0       	rjmp	.+446    	; 0x496a <_ZN15Adafruit_ST773513drawFastHLineEiiij+0x1e0>
    47ac:	2a 85       	ldd	r18, Y+10	; 0x0a
    47ae:	3b 85       	ldd	r19, Y+11	; 0x0b
    47b0:	42 17       	cp	r20, r18
    47b2:	53 07       	cpc	r21, r19
    47b4:	0c f0       	brlt	.+2      	; 0x47b8 <_ZN15Adafruit_ST773513drawFastHLineEiiij+0x2e>
    47b6:	d9 c0       	rjmp	.+434    	; 0x496a <_ZN15Adafruit_ST773513drawFastHLineEiiij+0x1e0>
    47b8:	9b 01       	movw	r18, r22
    47ba:	2e 0d       	add	r18, r14
    47bc:	3f 1d       	adc	r19, r15
    47be:	21 50       	subi	r18, 0x01	; 1
    47c0:	31 09       	sbc	r19, r1
    47c2:	28 17       	cp	r18, r24
    47c4:	39 07       	cpc	r19, r25
    47c6:	1c f0       	brlt	.+6      	; 0x47ce <_ZN15Adafruit_ST773513drawFastHLineEiiij+0x44>
    47c8:	7c 01       	movw	r14, r24
    47ca:	e6 1a       	sub	r14, r22
    47cc:	f7 0a       	sbc	r15, r23
    47ce:	2f ef       	ldi	r18, 0xFF	; 255
    47d0:	26 0f       	add	r18, r22
    47d2:	2e 0d       	add	r18, r14
    47d4:	04 2f       	mov	r16, r20
    47d6:	ce 01       	movw	r24, r28
    47d8:	0e 94 a5 21 	call	0x434a	; 0x434a <_ZN15Adafruit_ST773513setAddrWindowEhhhh>
    47dc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    47de:	82 30       	cpi	r24, 0x02	; 2
    47e0:	a1 f4       	brne	.+40     	; 0x480a <_ZN15Adafruit_ST773513drawFastHLineEiiij+0x80>
    47e2:	96 01       	movw	r18, r12
    47e4:	32 2f       	mov	r19, r18
    47e6:	22 27       	eor	r18, r18
    47e8:	33 0f       	add	r19, r19
    47ea:	33 0f       	add	r19, r19
    47ec:	33 0f       	add	r19, r19
    47ee:	c6 01       	movw	r24, r12
    47f0:	80 7e       	andi	r24, 0xE0	; 224
    47f2:	97 70       	andi	r25, 0x07	; 7
    47f4:	82 2b       	or	r24, r18
    47f6:	93 2b       	or	r25, r19
    47f8:	86 01       	movw	r16, r12
    47fa:	01 2f       	mov	r16, r17
    47fc:	11 27       	eor	r17, r17
    47fe:	06 95       	lsr	r16
    4800:	06 95       	lsr	r16
    4802:	06 95       	lsr	r16
    4804:	6c 01       	movw	r12, r24
    4806:	c0 2a       	or	r12, r16
    4808:	d1 2a       	or	r13, r17
    480a:	3d 2d       	mov	r19, r13
    480c:	0c 2d       	mov	r16, r12
    480e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4810:	88 23       	and	r24, r24
    4812:	d9 f0       	breq	.+54     	; 0x484a <_ZN15Adafruit_ST773513drawFastHLineEiiij+0xc0>
    4814:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4816:	88 a1       	ldd	r24, Y+32	; 0x20
    4818:	20 91 0c 03 	lds	r18, 0x030C	; 0x80030c <_ZN8SPIClass13interruptModeE>
    481c:	22 23       	and	r18, r18
    481e:	99 f0       	breq	.+38     	; 0x4846 <_ZN15Adafruit_ST773513drawFastHLineEiiij+0xbc>
    4820:	2f b7       	in	r18, 0x3f	; 63
    4822:	f8 94       	cli
    4824:	40 91 0c 03 	lds	r20, 0x030C	; 0x80030c <_ZN8SPIClass13interruptModeE>
    4828:	41 30       	cpi	r20, 0x01	; 1
    482a:	59 f4       	brne	.+22     	; 0x4842 <_ZN15Adafruit_ST773513drawFastHLineEiiij+0xb8>
    482c:	4d b3       	in	r20, 0x1d	; 29
    482e:	40 93 0a 03 	sts	0x030A, r20	; 0x80030a <__data_end>
    4832:	4d b3       	in	r20, 0x1d	; 29
    4834:	50 91 0b 03 	lds	r21, 0x030B	; 0x80030b <_ZN8SPIClass13interruptMaskE>
    4838:	50 95       	com	r21
    483a:	45 23       	and	r20, r21
    483c:	4d bb       	out	0x1d, r20	; 29
    483e:	2f bf       	out	0x3f, r18	; 63
    4840:	02 c0       	rjmp	.+4      	; 0x4846 <_ZN15Adafruit_ST773513drawFastHLineEiiij+0xbc>
    4842:	20 93 0a 03 	sts	0x030A, r18	; 0x80030a <__data_end>
    4846:	9c bd       	out	0x2c, r25	; 44
    4848:	8d bd       	out	0x2d, r24	; 45
    484a:	ef a1       	ldd	r30, Y+39	; 0x27
    484c:	f8 a5       	ldd	r31, Y+40	; 0x28
    484e:	90 81       	ld	r25, Z
    4850:	89 a9       	ldd	r24, Y+49	; 0x31
    4852:	89 2b       	or	r24, r25
    4854:	80 83       	st	Z, r24
    4856:	ed a1       	ldd	r30, Y+37	; 0x25
    4858:	fe a1       	ldd	r31, Y+38	; 0x26
    485a:	90 81       	ld	r25, Z
    485c:	88 a9       	ldd	r24, Y+48	; 0x30
    485e:	80 95       	com	r24
    4860:	89 23       	and	r24, r25
    4862:	80 83       	st	Z, r24
    4864:	60 e8       	ldi	r22, 0x80	; 128
    4866:	81 e0       	ldi	r24, 0x01	; 1
    4868:	e8 1a       	sub	r14, r24
    486a:	f1 08       	sbc	r15, r1
    486c:	08 f4       	brcc	.+2      	; 0x4870 <_ZN15Adafruit_ST773513drawFastHLineEiiij+0xe6>
    486e:	5a c0       	rjmp	.+180    	; 0x4924 <_ZN15Adafruit_ST773513drawFastHLineEiiij+0x19a>
    4870:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4872:	88 23       	and	r24, r24
    4874:	39 f0       	breq	.+14     	; 0x4884 <_ZN15Adafruit_ST773513drawFastHLineEiiij+0xfa>
    4876:	3e bd       	out	0x2e, r19	; 46
    4878:	00 00       	nop
    487a:	0d b4       	in	r0, 0x2d	; 45
    487c:	07 fe       	sbrs	r0, 7
    487e:	fd cf       	rjmp	.-6      	; 0x487a <_ZN15Adafruit_ST773513drawFastHLineEiiij+0xf0>
    4880:	8e b5       	in	r24, 0x2e	; 46
    4882:	6c c0       	rjmp	.+216    	; 0x495c <_ZN15Adafruit_ST773513drawFastHLineEiiij+0x1d2>
    4884:	48 e0       	ldi	r20, 0x08	; 8
    4886:	50 e0       	ldi	r21, 0x00	; 0
    4888:	26 2f       	mov	r18, r22
    488a:	83 2f       	mov	r24, r19
    488c:	82 23       	and	r24, r18
    488e:	39 f0       	breq	.+14     	; 0x489e <_ZN15Adafruit_ST773513drawFastHLineEiiij+0x114>
    4890:	e9 a1       	ldd	r30, Y+33	; 0x21
    4892:	fa a1       	ldd	r31, Y+34	; 0x22
    4894:	90 81       	ld	r25, Z
    4896:	8e a5       	ldd	r24, Y+46	; 0x2e
    4898:	89 2b       	or	r24, r25
    489a:	80 83       	st	Z, r24
    489c:	07 c0       	rjmp	.+14     	; 0x48ac <_ZN15Adafruit_ST773513drawFastHLineEiiij+0x122>
    489e:	e9 a1       	ldd	r30, Y+33	; 0x21
    48a0:	fa a1       	ldd	r31, Y+34	; 0x22
    48a2:	90 81       	ld	r25, Z
    48a4:	8e a5       	ldd	r24, Y+46	; 0x2e
    48a6:	80 95       	com	r24
    48a8:	89 23       	and	r24, r25
    48aa:	80 83       	st	Z, r24
    48ac:	eb a1       	ldd	r30, Y+35	; 0x23
    48ae:	fc a1       	ldd	r31, Y+36	; 0x24
    48b0:	90 81       	ld	r25, Z
    48b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    48b4:	89 2b       	or	r24, r25
    48b6:	80 83       	st	Z, r24
    48b8:	eb a1       	ldd	r30, Y+35	; 0x23
    48ba:	fc a1       	ldd	r31, Y+36	; 0x24
    48bc:	90 81       	ld	r25, Z
    48be:	8f a5       	ldd	r24, Y+47	; 0x2f
    48c0:	80 95       	com	r24
    48c2:	89 23       	and	r24, r25
    48c4:	80 83       	st	Z, r24
    48c6:	26 95       	lsr	r18
    48c8:	41 50       	subi	r20, 0x01	; 1
    48ca:	51 09       	sbc	r21, r1
    48cc:	f1 f6       	brne	.-68     	; 0x488a <_ZN15Adafruit_ST773513drawFastHLineEiiij+0x100>
    48ce:	46 c0       	rjmp	.+140    	; 0x495c <_ZN15Adafruit_ST773513drawFastHLineEiiij+0x1d2>
    48d0:	0e bd       	out	0x2e, r16	; 46
    48d2:	00 00       	nop
    48d4:	0d b4       	in	r0, 0x2d	; 45
    48d6:	07 fe       	sbrs	r0, 7
    48d8:	fd cf       	rjmp	.-6      	; 0x48d4 <_ZN15Adafruit_ST773513drawFastHLineEiiij+0x14a>
    48da:	8e b5       	in	r24, 0x2e	; 46
    48dc:	c4 cf       	rjmp	.-120    	; 0x4866 <_ZN15Adafruit_ST773513drawFastHLineEiiij+0xdc>
    48de:	80 2f       	mov	r24, r16
    48e0:	82 23       	and	r24, r18
    48e2:	39 f0       	breq	.+14     	; 0x48f2 <_ZN15Adafruit_ST773513drawFastHLineEiiij+0x168>
    48e4:	e9 a1       	ldd	r30, Y+33	; 0x21
    48e6:	fa a1       	ldd	r31, Y+34	; 0x22
    48e8:	90 81       	ld	r25, Z
    48ea:	8e a5       	ldd	r24, Y+46	; 0x2e
    48ec:	89 2b       	or	r24, r25
    48ee:	80 83       	st	Z, r24
    48f0:	07 c0       	rjmp	.+14     	; 0x4900 <_ZN15Adafruit_ST773513drawFastHLineEiiij+0x176>
    48f2:	e9 a1       	ldd	r30, Y+33	; 0x21
    48f4:	fa a1       	ldd	r31, Y+34	; 0x22
    48f6:	90 81       	ld	r25, Z
    48f8:	8e a5       	ldd	r24, Y+46	; 0x2e
    48fa:	80 95       	com	r24
    48fc:	89 23       	and	r24, r25
    48fe:	80 83       	st	Z, r24
    4900:	eb a1       	ldd	r30, Y+35	; 0x23
    4902:	fc a1       	ldd	r31, Y+36	; 0x24
    4904:	90 81       	ld	r25, Z
    4906:	8f a5       	ldd	r24, Y+47	; 0x2f
    4908:	89 2b       	or	r24, r25
    490a:	80 83       	st	Z, r24
    490c:	eb a1       	ldd	r30, Y+35	; 0x23
    490e:	fc a1       	ldd	r31, Y+36	; 0x24
    4910:	90 81       	ld	r25, Z
    4912:	8f a5       	ldd	r24, Y+47	; 0x2f
    4914:	80 95       	com	r24
    4916:	89 23       	and	r24, r25
    4918:	80 83       	st	Z, r24
    491a:	26 95       	lsr	r18
    491c:	41 50       	subi	r20, 0x01	; 1
    491e:	51 09       	sbc	r21, r1
    4920:	f1 f6       	brne	.-68     	; 0x48de <_ZN15Adafruit_ST773513drawFastHLineEiiij+0x154>
    4922:	a1 cf       	rjmp	.-190    	; 0x4866 <_ZN15Adafruit_ST773513drawFastHLineEiiij+0xdc>
    4924:	ed a1       	ldd	r30, Y+37	; 0x25
    4926:	fe a1       	ldd	r31, Y+38	; 0x26
    4928:	90 81       	ld	r25, Z
    492a:	88 a9       	ldd	r24, Y+48	; 0x30
    492c:	89 2b       	or	r24, r25
    492e:	80 83       	st	Z, r24
    4930:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4932:	88 23       	and	r24, r24
    4934:	d1 f0       	breq	.+52     	; 0x496a <_ZN15Adafruit_ST773513drawFastHLineEiiij+0x1e0>
    4936:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <_ZN8SPIClass13interruptModeE>
    493a:	88 23       	and	r24, r24
    493c:	b1 f0       	breq	.+44     	; 0x496a <_ZN15Adafruit_ST773513drawFastHLineEiiij+0x1e0>
    493e:	9f b7       	in	r25, 0x3f	; 63
    4940:	f8 94       	cli
    4942:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <_ZN8SPIClass13interruptModeE>
    4946:	81 30       	cpi	r24, 0x01	; 1
    4948:	29 f4       	brne	.+10     	; 0x4954 <_ZN15Adafruit_ST773513drawFastHLineEiiij+0x1ca>
    494a:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <__data_end>
    494e:	8d bb       	out	0x1d, r24	; 29
    4950:	9f bf       	out	0x3f, r25	; 63
    4952:	0b c0       	rjmp	.+22     	; 0x496a <_ZN15Adafruit_ST773513drawFastHLineEiiij+0x1e0>
    4954:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <__data_end>
    4958:	8f bf       	out	0x3f, r24	; 63
    495a:	07 c0       	rjmp	.+14     	; 0x496a <_ZN15Adafruit_ST773513drawFastHLineEiiij+0x1e0>
    495c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    495e:	81 11       	cpse	r24, r1
    4960:	b7 cf       	rjmp	.-146    	; 0x48d0 <_ZN15Adafruit_ST773513drawFastHLineEiiij+0x146>
    4962:	48 e0       	ldi	r20, 0x08	; 8
    4964:	50 e0       	ldi	r21, 0x00	; 0
    4966:	26 2f       	mov	r18, r22
    4968:	ba cf       	rjmp	.-140    	; 0x48de <_ZN15Adafruit_ST773513drawFastHLineEiiij+0x154>
    496a:	df 91       	pop	r29
    496c:	cf 91       	pop	r28
    496e:	1f 91       	pop	r17
    4970:	0f 91       	pop	r16
    4972:	ff 90       	pop	r15
    4974:	ef 90       	pop	r14
    4976:	df 90       	pop	r13
    4978:	cf 90       	pop	r12
    497a:	08 95       	ret

0000497c <_ZN15Adafruit_ST77358fillRectEiiiij>:
    497c:	af 92       	push	r10
    497e:	bf 92       	push	r11
    4980:	cf 92       	push	r12
    4982:	df 92       	push	r13
    4984:	ef 92       	push	r14
    4986:	ff 92       	push	r15
    4988:	0f 93       	push	r16
    498a:	1f 93       	push	r17
    498c:	cf 93       	push	r28
    498e:	df 93       	push	r29
    4990:	ec 01       	movw	r28, r24
    4992:	69 01       	movw	r12, r18
    4994:	58 01       	movw	r10, r16
    4996:	88 85       	ldd	r24, Y+8	; 0x08
    4998:	99 85       	ldd	r25, Y+9	; 0x09
    499a:	68 17       	cp	r22, r24
    499c:	79 07       	cpc	r23, r25
    499e:	0c f0       	brlt	.+2      	; 0x49a2 <_ZN15Adafruit_ST77358fillRectEiiiij+0x26>
    49a0:	f6 c0       	rjmp	.+492    	; 0x4b8e <_ZN15Adafruit_ST77358fillRectEiiiij+0x212>
    49a2:	2a 85       	ldd	r18, Y+10	; 0x0a
    49a4:	3b 85       	ldd	r19, Y+11	; 0x0b
    49a6:	42 17       	cp	r20, r18
    49a8:	53 07       	cpc	r21, r19
    49aa:	0c f0       	brlt	.+2      	; 0x49ae <_ZN15Adafruit_ST77358fillRectEiiiij+0x32>
    49ac:	f0 c0       	rjmp	.+480    	; 0x4b8e <_ZN15Adafruit_ST77358fillRectEiiiij+0x212>
    49ae:	fb 01       	movw	r30, r22
    49b0:	ec 0d       	add	r30, r12
    49b2:	fd 1d       	adc	r31, r13
    49b4:	31 97       	sbiw	r30, 0x01	; 1
    49b6:	e8 17       	cp	r30, r24
    49b8:	f9 07       	cpc	r31, r25
    49ba:	1c f0       	brlt	.+6      	; 0x49c2 <_ZN15Adafruit_ST77358fillRectEiiiij+0x46>
    49bc:	6c 01       	movw	r12, r24
    49be:	c6 1a       	sub	r12, r22
    49c0:	d7 0a       	sbc	r13, r23
    49c2:	ca 01       	movw	r24, r20
    49c4:	8a 0d       	add	r24, r10
    49c6:	9b 1d       	adc	r25, r11
    49c8:	01 97       	sbiw	r24, 0x01	; 1
    49ca:	82 17       	cp	r24, r18
    49cc:	93 07       	cpc	r25, r19
    49ce:	1c f0       	brlt	.+6      	; 0x49d6 <_ZN15Adafruit_ST77358fillRectEiiiij+0x5a>
    49d0:	59 01       	movw	r10, r18
    49d2:	a4 1a       	sub	r10, r20
    49d4:	b5 0a       	sbc	r11, r21
    49d6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    49d8:	82 30       	cpi	r24, 0x02	; 2
    49da:	a1 f4       	brne	.+40     	; 0x4a04 <_ZN15Adafruit_ST77358fillRectEiiiij+0x88>
    49dc:	97 01       	movw	r18, r14
    49de:	32 2f       	mov	r19, r18
    49e0:	22 27       	eor	r18, r18
    49e2:	33 0f       	add	r19, r19
    49e4:	33 0f       	add	r19, r19
    49e6:	33 0f       	add	r19, r19
    49e8:	c7 01       	movw	r24, r14
    49ea:	80 7e       	andi	r24, 0xE0	; 224
    49ec:	97 70       	andi	r25, 0x07	; 7
    49ee:	82 2b       	or	r24, r18
    49f0:	93 2b       	or	r25, r19
    49f2:	d7 01       	movw	r26, r14
    49f4:	ab 2f       	mov	r26, r27
    49f6:	bb 27       	eor	r27, r27
    49f8:	a6 95       	lsr	r26
    49fa:	a6 95       	lsr	r26
    49fc:	a6 95       	lsr	r26
    49fe:	7c 01       	movw	r14, r24
    4a00:	ea 2a       	or	r14, r26
    4a02:	fb 2a       	or	r15, r27
    4a04:	0f ef       	ldi	r16, 0xFF	; 255
    4a06:	04 0f       	add	r16, r20
    4a08:	0a 0d       	add	r16, r10
    4a0a:	2f ef       	ldi	r18, 0xFF	; 255
    4a0c:	26 0f       	add	r18, r22
    4a0e:	2c 0d       	add	r18, r12
    4a10:	ce 01       	movw	r24, r28
    4a12:	0e 94 a5 21 	call	0x434a	; 0x434a <_ZN15Adafruit_ST773513setAddrWindowEhhhh>
    4a16:	bf 2d       	mov	r27, r15
    4a18:	ae 2d       	mov	r26, r14
    4a1a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4a1c:	88 23       	and	r24, r24
    4a1e:	d9 f0       	breq	.+54     	; 0x4a56 <_ZN15Adafruit_ST77358fillRectEiiiij+0xda>
    4a20:	4f 8d       	ldd	r20, Y+31	; 0x1f
    4a22:	38 a1       	ldd	r19, Y+32	; 0x20
    4a24:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <_ZN8SPIClass13interruptModeE>
    4a28:	88 23       	and	r24, r24
    4a2a:	99 f0       	breq	.+38     	; 0x4a52 <_ZN15Adafruit_ST77358fillRectEiiiij+0xd6>
    4a2c:	2f b7       	in	r18, 0x3f	; 63
    4a2e:	f8 94       	cli
    4a30:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <_ZN8SPIClass13interruptModeE>
    4a34:	81 30       	cpi	r24, 0x01	; 1
    4a36:	59 f4       	brne	.+22     	; 0x4a4e <_ZN15Adafruit_ST77358fillRectEiiiij+0xd2>
    4a38:	8d b3       	in	r24, 0x1d	; 29
    4a3a:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <__data_end>
    4a3e:	8d b3       	in	r24, 0x1d	; 29
    4a40:	90 91 0b 03 	lds	r25, 0x030B	; 0x80030b <_ZN8SPIClass13interruptMaskE>
    4a44:	90 95       	com	r25
    4a46:	89 23       	and	r24, r25
    4a48:	8d bb       	out	0x1d, r24	; 29
    4a4a:	2f bf       	out	0x3f, r18	; 63
    4a4c:	02 c0       	rjmp	.+4      	; 0x4a52 <_ZN15Adafruit_ST77358fillRectEiiiij+0xd6>
    4a4e:	20 93 0a 03 	sts	0x030A, r18	; 0x80030a <__data_end>
    4a52:	4c bd       	out	0x2c, r20	; 44
    4a54:	3d bd       	out	0x2d, r19	; 45
    4a56:	ef a1       	ldd	r30, Y+39	; 0x27
    4a58:	f8 a5       	ldd	r31, Y+40	; 0x28
    4a5a:	90 81       	ld	r25, Z
    4a5c:	89 a9       	ldd	r24, Y+49	; 0x31
    4a5e:	89 2b       	or	r24, r25
    4a60:	80 83       	st	Z, r24
    4a62:	ed a1       	ldd	r30, Y+37	; 0x25
    4a64:	fe a1       	ldd	r31, Y+38	; 0x26
    4a66:	80 81       	ld	r24, Z
    4a68:	98 a9       	ldd	r25, Y+48	; 0x30
    4a6a:	90 95       	com	r25
    4a6c:	89 23       	and	r24, r25
    4a6e:	80 83       	st	Z, r24
    4a70:	1a 14       	cp	r1, r10
    4a72:	1b 04       	cpc	r1, r11
    4a74:	0c f0       	brlt	.+2      	; 0x4a78 <_ZN15Adafruit_ST77358fillRectEiiiij+0xfc>
    4a76:	68 c0       	rjmp	.+208    	; 0x4b48 <_ZN15Adafruit_ST77358fillRectEiiiij+0x1cc>
    4a78:	a5 01       	movw	r20, r10
    4a7a:	10 e8       	ldi	r17, 0x80	; 128
    4a7c:	1c 14       	cp	r1, r12
    4a7e:	1d 04       	cpc	r1, r13
    4a80:	0c f0       	brlt	.+2      	; 0x4a84 <_ZN15Adafruit_ST77358fillRectEiiiij+0x108>
    4a82:	5e c0       	rjmp	.+188    	; 0x4b40 <_ZN15Adafruit_ST77358fillRectEiiiij+0x1c4>
    4a84:	96 01       	movw	r18, r12
    4a86:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4a88:	88 23       	and	r24, r24
    4a8a:	39 f0       	breq	.+14     	; 0x4a9a <_ZN15Adafruit_ST77358fillRectEiiiij+0x11e>
    4a8c:	be bd       	out	0x2e, r27	; 46
    4a8e:	00 00       	nop
    4a90:	0d b4       	in	r0, 0x2d	; 45
    4a92:	07 fe       	sbrs	r0, 7
    4a94:	fd cf       	rjmp	.-6      	; 0x4a90 <_ZN15Adafruit_ST77358fillRectEiiiij+0x114>
    4a96:	8e b5       	in	r24, 0x2e	; 46
    4a98:	73 c0       	rjmp	.+230    	; 0x4b80 <_ZN15Adafruit_ST77358fillRectEiiiij+0x204>
    4a9a:	68 e0       	ldi	r22, 0x08	; 8
    4a9c:	70 e0       	ldi	r23, 0x00	; 0
    4a9e:	01 2f       	mov	r16, r17
    4aa0:	8b 2f       	mov	r24, r27
    4aa2:	80 23       	and	r24, r16
    4aa4:	39 f0       	breq	.+14     	; 0x4ab4 <_ZN15Adafruit_ST77358fillRectEiiiij+0x138>
    4aa6:	e9 a1       	ldd	r30, Y+33	; 0x21
    4aa8:	fa a1       	ldd	r31, Y+34	; 0x22
    4aaa:	90 81       	ld	r25, Z
    4aac:	8e a5       	ldd	r24, Y+46	; 0x2e
    4aae:	89 2b       	or	r24, r25
    4ab0:	80 83       	st	Z, r24
    4ab2:	07 c0       	rjmp	.+14     	; 0x4ac2 <_ZN15Adafruit_ST77358fillRectEiiiij+0x146>
    4ab4:	e9 a1       	ldd	r30, Y+33	; 0x21
    4ab6:	fa a1       	ldd	r31, Y+34	; 0x22
    4ab8:	90 81       	ld	r25, Z
    4aba:	8e a5       	ldd	r24, Y+46	; 0x2e
    4abc:	80 95       	com	r24
    4abe:	89 23       	and	r24, r25
    4ac0:	80 83       	st	Z, r24
    4ac2:	eb a1       	ldd	r30, Y+35	; 0x23
    4ac4:	fc a1       	ldd	r31, Y+36	; 0x24
    4ac6:	90 81       	ld	r25, Z
    4ac8:	8f a5       	ldd	r24, Y+47	; 0x2f
    4aca:	89 2b       	or	r24, r25
    4acc:	80 83       	st	Z, r24
    4ace:	eb a1       	ldd	r30, Y+35	; 0x23
    4ad0:	fc a1       	ldd	r31, Y+36	; 0x24
    4ad2:	90 81       	ld	r25, Z
    4ad4:	8f a5       	ldd	r24, Y+47	; 0x2f
    4ad6:	80 95       	com	r24
    4ad8:	89 23       	and	r24, r25
    4ada:	80 83       	st	Z, r24
    4adc:	06 95       	lsr	r16
    4ade:	61 50       	subi	r22, 0x01	; 1
    4ae0:	71 09       	sbc	r23, r1
    4ae2:	f1 f6       	brne	.-68     	; 0x4aa0 <_ZN15Adafruit_ST77358fillRectEiiiij+0x124>
    4ae4:	4d c0       	rjmp	.+154    	; 0x4b80 <_ZN15Adafruit_ST77358fillRectEiiiij+0x204>
    4ae6:	ae bd       	out	0x2e, r26	; 46
    4ae8:	00 00       	nop
    4aea:	0d b4       	in	r0, 0x2d	; 45
    4aec:	07 fe       	sbrs	r0, 7
    4aee:	fd cf       	rjmp	.-6      	; 0x4aea <_ZN15Adafruit_ST77358fillRectEiiiij+0x16e>
    4af0:	8e b5       	in	r24, 0x2e	; 46
    4af2:	22 c0       	rjmp	.+68     	; 0x4b38 <_ZN15Adafruit_ST77358fillRectEiiiij+0x1bc>
    4af4:	8a 2f       	mov	r24, r26
    4af6:	80 23       	and	r24, r16
    4af8:	39 f0       	breq	.+14     	; 0x4b08 <_ZN15Adafruit_ST77358fillRectEiiiij+0x18c>
    4afa:	e9 a1       	ldd	r30, Y+33	; 0x21
    4afc:	fa a1       	ldd	r31, Y+34	; 0x22
    4afe:	90 81       	ld	r25, Z
    4b00:	8e a5       	ldd	r24, Y+46	; 0x2e
    4b02:	89 2b       	or	r24, r25
    4b04:	80 83       	st	Z, r24
    4b06:	07 c0       	rjmp	.+14     	; 0x4b16 <_ZN15Adafruit_ST77358fillRectEiiiij+0x19a>
    4b08:	e9 a1       	ldd	r30, Y+33	; 0x21
    4b0a:	fa a1       	ldd	r31, Y+34	; 0x22
    4b0c:	90 81       	ld	r25, Z
    4b0e:	8e a5       	ldd	r24, Y+46	; 0x2e
    4b10:	80 95       	com	r24
    4b12:	89 23       	and	r24, r25
    4b14:	80 83       	st	Z, r24
    4b16:	eb a1       	ldd	r30, Y+35	; 0x23
    4b18:	fc a1       	ldd	r31, Y+36	; 0x24
    4b1a:	90 81       	ld	r25, Z
    4b1c:	8f a5       	ldd	r24, Y+47	; 0x2f
    4b1e:	89 2b       	or	r24, r25
    4b20:	80 83       	st	Z, r24
    4b22:	eb a1       	ldd	r30, Y+35	; 0x23
    4b24:	fc a1       	ldd	r31, Y+36	; 0x24
    4b26:	90 81       	ld	r25, Z
    4b28:	8f a5       	ldd	r24, Y+47	; 0x2f
    4b2a:	80 95       	com	r24
    4b2c:	89 23       	and	r24, r25
    4b2e:	80 83       	st	Z, r24
    4b30:	06 95       	lsr	r16
    4b32:	61 50       	subi	r22, 0x01	; 1
    4b34:	71 09       	sbc	r23, r1
    4b36:	f1 f6       	brne	.-68     	; 0x4af4 <_ZN15Adafruit_ST77358fillRectEiiiij+0x178>
    4b38:	21 50       	subi	r18, 0x01	; 1
    4b3a:	31 09       	sbc	r19, r1
    4b3c:	09 f0       	breq	.+2      	; 0x4b40 <_ZN15Adafruit_ST77358fillRectEiiiij+0x1c4>
    4b3e:	a3 cf       	rjmp	.-186    	; 0x4a86 <_ZN15Adafruit_ST77358fillRectEiiiij+0x10a>
    4b40:	41 50       	subi	r20, 0x01	; 1
    4b42:	51 09       	sbc	r21, r1
    4b44:	09 f0       	breq	.+2      	; 0x4b48 <_ZN15Adafruit_ST77358fillRectEiiiij+0x1cc>
    4b46:	9a cf       	rjmp	.-204    	; 0x4a7c <_ZN15Adafruit_ST77358fillRectEiiiij+0x100>
    4b48:	ed a1       	ldd	r30, Y+37	; 0x25
    4b4a:	fe a1       	ldd	r31, Y+38	; 0x26
    4b4c:	90 81       	ld	r25, Z
    4b4e:	88 a9       	ldd	r24, Y+48	; 0x30
    4b50:	89 2b       	or	r24, r25
    4b52:	80 83       	st	Z, r24
    4b54:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4b56:	88 23       	and	r24, r24
    4b58:	d1 f0       	breq	.+52     	; 0x4b8e <_ZN15Adafruit_ST77358fillRectEiiiij+0x212>
    4b5a:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <_ZN8SPIClass13interruptModeE>
    4b5e:	88 23       	and	r24, r24
    4b60:	b1 f0       	breq	.+44     	; 0x4b8e <_ZN15Adafruit_ST77358fillRectEiiiij+0x212>
    4b62:	8f b7       	in	r24, 0x3f	; 63
    4b64:	f8 94       	cli
    4b66:	90 91 0c 03 	lds	r25, 0x030C	; 0x80030c <_ZN8SPIClass13interruptModeE>
    4b6a:	91 30       	cpi	r25, 0x01	; 1
    4b6c:	29 f4       	brne	.+10     	; 0x4b78 <_ZN15Adafruit_ST77358fillRectEiiiij+0x1fc>
    4b6e:	90 91 0a 03 	lds	r25, 0x030A	; 0x80030a <__data_end>
    4b72:	9d bb       	out	0x1d, r25	; 29
    4b74:	8f bf       	out	0x3f, r24	; 63
    4b76:	0b c0       	rjmp	.+22     	; 0x4b8e <_ZN15Adafruit_ST77358fillRectEiiiij+0x212>
    4b78:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <__data_end>
    4b7c:	8f bf       	out	0x3f, r24	; 63
    4b7e:	07 c0       	rjmp	.+14     	; 0x4b8e <_ZN15Adafruit_ST77358fillRectEiiiij+0x212>
    4b80:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4b82:	81 11       	cpse	r24, r1
    4b84:	b0 cf       	rjmp	.-160    	; 0x4ae6 <_ZN15Adafruit_ST77358fillRectEiiiij+0x16a>
    4b86:	68 e0       	ldi	r22, 0x08	; 8
    4b88:	70 e0       	ldi	r23, 0x00	; 0
    4b8a:	01 2f       	mov	r16, r17
    4b8c:	b3 cf       	rjmp	.-154    	; 0x4af4 <_ZN15Adafruit_ST77358fillRectEiiiij+0x178>
    4b8e:	df 91       	pop	r29
    4b90:	cf 91       	pop	r28
    4b92:	1f 91       	pop	r17
    4b94:	0f 91       	pop	r16
    4b96:	ff 90       	pop	r15
    4b98:	ef 90       	pop	r14
    4b9a:	df 90       	pop	r13
    4b9c:	cf 90       	pop	r12
    4b9e:	bf 90       	pop	r11
    4ba0:	af 90       	pop	r10
    4ba2:	08 95       	ret

00004ba4 <_ZN15Adafruit_ST773511setRotationEh>:
#define MADCTL_MV  0x20
#define MADCTL_ML  0x10
#define MADCTL_RGB 0x08
#define MADCTL_MH  0x04

void Adafruit_ST7735::setRotation(uint8_t m) {
    4ba4:	1f 93       	push	r17
    4ba6:	cf 93       	push	r28
    4ba8:	df 93       	push	r29
    4baa:	ec 01       	movw	r28, r24
    4bac:	16 2f       	mov	r17, r22

  writecommand(ST7735_MADCTL);
    4bae:	66 e3       	ldi	r22, 0x36	; 54
    4bb0:	0e 94 95 1f 	call	0x3f2a	; 0x3f2a <_ZN15Adafruit_ST773512writecommandEh>
  rotation = m % 4; // can't be higher than 3
    4bb4:	61 2f       	mov	r22, r17
    4bb6:	63 70       	andi	r22, 0x03	; 3
    4bb8:	6d 8b       	std	Y+21, r22	; 0x15
  switch (rotation) {
    4bba:	61 30       	cpi	r22, 0x01	; 1
    4bbc:	99 f0       	breq	.+38     	; 0x4be4 <_ZN15Adafruit_ST773511setRotationEh+0x40>
    4bbe:	28 f0       	brcs	.+10     	; 0x4bca <_ZN15Adafruit_ST773511setRotationEh+0x26>
    4bc0:	62 30       	cpi	r22, 0x02	; 2
    4bc2:	e9 f0       	breq	.+58     	; 0x4bfe <_ZN15Adafruit_ST773511setRotationEh+0x5a>
    4bc4:	63 30       	cpi	r22, 0x03	; 3
    4bc6:	41 f1       	breq	.+80     	; 0x4c18 <_ZN15Adafruit_ST773511setRotationEh+0x74>
    4bc8:	33 c0       	rjmp	.+102    	; 0x4c30 <_ZN15Adafruit_ST773511setRotationEh+0x8c>
   case 0:
    writedata(MADCTL_MX | MADCTL_MY | MADCTL_RGB);
    4bca:	68 ec       	ldi	r22, 0xC8	; 200
    4bcc:	ce 01       	movw	r24, r28
    4bce:	0e 94 15 20 	call	0x402a	; 0x402a <_ZN15Adafruit_ST77359writedataEh>
    _width  = ST7735_TFTWIDTH;
    4bd2:	80 e8       	ldi	r24, 0x80	; 128
    4bd4:	90 e0       	ldi	r25, 0x00	; 0
    4bd6:	99 87       	std	Y+9, r25	; 0x09
    4bd8:	88 87       	std	Y+8, r24	; 0x08
    _height = ST7735_TFTHEIGHT;
    4bda:	80 ea       	ldi	r24, 0xA0	; 160
    4bdc:	90 e0       	ldi	r25, 0x00	; 0
    4bde:	9b 87       	std	Y+11, r25	; 0x0b
    4be0:	8a 87       	std	Y+10, r24	; 0x0a
    break;
    4be2:	26 c0       	rjmp	.+76     	; 0x4c30 <_ZN15Adafruit_ST773511setRotationEh+0x8c>
   case 1:
    writedata(MADCTL_MY | MADCTL_MV | MADCTL_RGB);
    4be4:	68 ea       	ldi	r22, 0xA8	; 168
    4be6:	ce 01       	movw	r24, r28
    4be8:	0e 94 15 20 	call	0x402a	; 0x402a <_ZN15Adafruit_ST77359writedataEh>
    _width  = ST7735_TFTHEIGHT;
    4bec:	80 ea       	ldi	r24, 0xA0	; 160
    4bee:	90 e0       	ldi	r25, 0x00	; 0
    4bf0:	99 87       	std	Y+9, r25	; 0x09
    4bf2:	88 87       	std	Y+8, r24	; 0x08
    _height = ST7735_TFTWIDTH;
    4bf4:	80 e8       	ldi	r24, 0x80	; 128
    4bf6:	90 e0       	ldi	r25, 0x00	; 0
    4bf8:	9b 87       	std	Y+11, r25	; 0x0b
    4bfa:	8a 87       	std	Y+10, r24	; 0x0a
    break;
    4bfc:	19 c0       	rjmp	.+50     	; 0x4c30 <_ZN15Adafruit_ST773511setRotationEh+0x8c>
   case 2:
    writedata(MADCTL_RGB);
    4bfe:	68 e0       	ldi	r22, 0x08	; 8
    4c00:	ce 01       	movw	r24, r28
    4c02:	0e 94 15 20 	call	0x402a	; 0x402a <_ZN15Adafruit_ST77359writedataEh>
    _width  = ST7735_TFTWIDTH;
    4c06:	80 e8       	ldi	r24, 0x80	; 128
    4c08:	90 e0       	ldi	r25, 0x00	; 0
    4c0a:	99 87       	std	Y+9, r25	; 0x09
    4c0c:	88 87       	std	Y+8, r24	; 0x08
    _height = ST7735_TFTHEIGHT;
    4c0e:	80 ea       	ldi	r24, 0xA0	; 160
    4c10:	90 e0       	ldi	r25, 0x00	; 0
    4c12:	9b 87       	std	Y+11, r25	; 0x0b
    4c14:	8a 87       	std	Y+10, r24	; 0x0a
    break;
    4c16:	0c c0       	rjmp	.+24     	; 0x4c30 <_ZN15Adafruit_ST773511setRotationEh+0x8c>
   case 3:
    writedata(MADCTL_MX | MADCTL_MV | MADCTL_RGB);
    4c18:	68 e6       	ldi	r22, 0x68	; 104
    4c1a:	ce 01       	movw	r24, r28
    4c1c:	0e 94 15 20 	call	0x402a	; 0x402a <_ZN15Adafruit_ST77359writedataEh>
    _width  = ST7735_TFTHEIGHT;
    4c20:	80 ea       	ldi	r24, 0xA0	; 160
    4c22:	90 e0       	ldi	r25, 0x00	; 0
    4c24:	99 87       	std	Y+9, r25	; 0x09
    4c26:	88 87       	std	Y+8, r24	; 0x08
    _height = ST7735_TFTWIDTH;
    4c28:	80 e8       	ldi	r24, 0x80	; 128
    4c2a:	90 e0       	ldi	r25, 0x00	; 0
    4c2c:	9b 87       	std	Y+11, r25	; 0x0b
    4c2e:	8a 87       	std	Y+10, r24	; 0x0a
    break;
  }
}
    4c30:	df 91       	pop	r29
    4c32:	cf 91       	pop	r28
    4c34:	1f 91       	pop	r17
    4c36:	08 95       	ret

00004c38 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE4sendENS_8MidiTypeEhhh>:

 This is an internal method, use it only if you need to send raw data
 from your code, at your own risks.
 */
template<class SerialPort, class Settings>
void MidiInterface<SerialPort, Settings>::send(MidiType inType,
    4c38:	ef 92       	push	r14
    4c3a:	ff 92       	push	r15
    4c3c:	0f 93       	push	r16
    4c3e:	1f 93       	push	r17
    4c40:	cf 93       	push	r28
    4c42:	df 93       	push	r29
                                               DataByte inData1,
                                               DataByte inData2,
                                               Channel inChannel)
{
    // Then test if channel is valid
    if (inChannel >= MIDI_CHANNEL_OFF  ||
    4c44:	01 50       	subi	r16, 0x01	; 1
    4c46:	00 31       	cpi	r16, 0x10	; 16
    4c48:	08 f0       	brcs	.+2      	; 0x4c4c <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE4sendENS_8MidiTypeEhhh+0x14>
    4c4a:	4b c0       	rjmp	.+150    	; 0x4ce2 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE4sendENS_8MidiTypeEhhh+0xaa>
    4c4c:	66 23       	and	r22, r22
    4c4e:	0c f0       	brlt	.+2      	; 0x4c52 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE4sendENS_8MidiTypeEhhh+0x1a>
    4c50:	48 c0       	rjmp	.+144    	; 0x4ce2 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE4sendENS_8MidiTypeEhhh+0xaa>
    4c52:	12 2f       	mov	r17, r18
    4c54:	d4 2f       	mov	r29, r20
    4c56:	c6 2f       	mov	r28, r22
    4c58:	7c 01       	movw	r14, r24
        inType < 0x80)
    {
        return; // Don't send anything
    }

    if (inType <= PitchBend)  // Channel messages
    4c5a:	61 3e       	cpi	r22, 0xE1	; 225
    4c5c:	60 f5       	brcc	.+88     	; 0x4cb6 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE4sendENS_8MidiTypeEhhh+0x7e>
            }
        }
        else
        {
            // Don't care about running status, send the status byte.
            mSerial.write(status);
    4c5e:	dc 01       	movw	r26, r24
    4c60:	94 96       	adiw	r26, 0x24	; 36
    4c62:	8d 91       	ld	r24, X+
    4c64:	9c 91       	ld	r25, X
    4c66:	95 97       	sbiw	r26, 0x25	; 37
    4c68:	0f 70       	andi	r16, 0x0F	; 15
    4c6a:	60 2f       	mov	r22, r16
    4c6c:	6c 2b       	or	r22, r28
    4c6e:	dc 01       	movw	r26, r24
    4c70:	ed 91       	ld	r30, X+
    4c72:	fc 91       	ld	r31, X
    4c74:	01 90       	ld	r0, Z+
    4c76:	f0 81       	ld	r31, Z
    4c78:	e0 2d       	mov	r30, r0
    4c7a:	09 95       	icall
        }

        // Then send data
        mSerial.write(inData1);
    4c7c:	f7 01       	movw	r30, r14
    4c7e:	84 a1       	ldd	r24, Z+36	; 0x24
    4c80:	95 a1       	ldd	r25, Z+37	; 0x25
    4c82:	6d 2f       	mov	r22, r29
    4c84:	6f 77       	andi	r22, 0x7F	; 127
    4c86:	dc 01       	movw	r26, r24
    4c88:	ed 91       	ld	r30, X+
    4c8a:	fc 91       	ld	r31, X
    4c8c:	01 90       	ld	r0, Z+
    4c8e:	f0 81       	ld	r31, Z
    4c90:	e0 2d       	mov	r30, r0
    4c92:	09 95       	icall
        if (inType != ProgramChange && inType != AfterTouchChannel)
    4c94:	6c 2f       	mov	r22, r28
    4c96:	6f 7e       	andi	r22, 0xEF	; 239
    4c98:	60 3c       	cpi	r22, 0xC0	; 192
    4c9a:	19 f1       	breq	.+70     	; 0x4ce2 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE4sendENS_8MidiTypeEhhh+0xaa>
        {
            mSerial.write(inData2);
    4c9c:	f7 01       	movw	r30, r14
    4c9e:	84 a1       	ldd	r24, Z+36	; 0x24
    4ca0:	95 a1       	ldd	r25, Z+37	; 0x25
    4ca2:	61 2f       	mov	r22, r17
    4ca4:	6f 77       	andi	r22, 0x7F	; 127
    4ca6:	dc 01       	movw	r26, r24
    4ca8:	ed 91       	ld	r30, X+
    4caa:	fc 91       	ld	r31, X
    4cac:	01 90       	ld	r0, Z+
    4cae:	f0 81       	ld	r31, Z
    4cb0:	e0 2d       	mov	r30, r0
    4cb2:	09 95       	icall
    4cb4:	16 c0       	rjmp	.+44     	; 0x4ce2 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE4sendENS_8MidiTypeEhhh+0xaa>
        }
    }
    else if (inType >= Clock && inType <= SystemReset)
    4cb6:	68 3f       	cpi	r22, 0xF8	; 248
    4cb8:	a0 f0       	brcs	.+40     	; 0x4ce2 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE4sendENS_8MidiTypeEhhh+0xaa>
void MidiInterface<SerialPort, Settings>::sendRealTime(MidiType inType)
{
    // Do not invalidate Running Status for real-time messages
    // as they can be interleaved within any message.

    switch (inType)
    4cba:	6d 3f       	cpi	r22, 0xFD	; 253
    4cbc:	28 f4       	brcc	.+10     	; 0x4cc8 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE4sendENS_8MidiTypeEhhh+0x90>
    4cbe:	6a 3f       	cpi	r22, 0xFA	; 250
    4cc0:	28 f4       	brcc	.+10     	; 0x4ccc <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE4sendENS_8MidiTypeEhhh+0x94>
    4cc2:	68 3f       	cpi	r22, 0xF8	; 248
    4cc4:	71 f4       	brne	.+28     	; 0x4ce2 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE4sendENS_8MidiTypeEhhh+0xaa>
    4cc6:	02 c0       	rjmp	.+4      	; 0x4ccc <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE4sendENS_8MidiTypeEhhh+0x94>
    4cc8:	6e 3f       	cpi	r22, 0xFE	; 254
    4cca:	58 f0       	brcs	.+22     	; 0x4ce2 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE4sendENS_8MidiTypeEhhh+0xaa>
        case Start:
        case Stop:
        case Continue:
        case ActiveSensing:
        case SystemReset:
            mSerial.write((byte)inType);
    4ccc:	f7 01       	movw	r30, r14
    4cce:	84 a1       	ldd	r24, Z+36	; 0x24
    4cd0:	95 a1       	ldd	r25, Z+37	; 0x25
    4cd2:	dc 01       	movw	r26, r24
    4cd4:	ed 91       	ld	r30, X+
    4cd6:	fc 91       	ld	r31, X
    4cd8:	01 90       	ld	r0, Z+
    4cda:	f0 81       	ld	r31, Z
    4cdc:	e0 2d       	mov	r30, r0
    4cde:	6c 2f       	mov	r22, r28
    4ce0:	09 95       	icall
    }
    else if (inType >= Clock && inType <= SystemReset)
    {
        sendRealTime(inType); // System Real-time and 1 byte.
    }
}
    4ce2:	df 91       	pop	r29
    4ce4:	cf 91       	pop	r28
    4ce6:	1f 91       	pop	r17
    4ce8:	0f 91       	pop	r16
    4cea:	ff 90       	pop	r15
    4cec:	ef 90       	pop	r14
    4cee:	08 95       	ret

00004cf0 <_Z10loadSoundsPhS_>:
		}
	}	
}

void loadSounds(uint8_t * currentBank, uint8_t * currentProgram)
{
    4cf0:	0f 93       	push	r16
    4cf2:	cf 93       	push	r28
    4cf4:	df 93       	push	r29
    4cf6:	eb 01       	movw	r28, r22
template<class SerialPort, class Settings>
void MidiInterface<SerialPort, Settings>::sendControlChange(DataByte inControlNumber,
                                                            DataByte inControlValue,
                                                            Channel inChannel)
{
    send(ControlChange, inControlNumber, inControlValue, inChannel);
    4cf8:	01 e0       	ldi	r16, 0x01	; 1
    4cfa:	fc 01       	movw	r30, r24
    4cfc:	21 81       	ldd	r18, Z+1	; 0x01
    4cfe:	40 e0       	ldi	r20, 0x00	; 0
    4d00:	60 eb       	ldi	r22, 0xB0	; 176
    4d02:	8b e1       	ldi	r24, 0x1B	; 27
    4d04:	93 e0       	ldi	r25, 0x03	; 3
    4d06:	0e 94 1c 26 	call	0x4c38	; 0x4c38 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE4sendENS_8MidiTypeEhhh>
 */
template<class SerialPort, class Settings>
void MidiInterface<SerialPort, Settings>::sendProgramChange(DataByte inProgramNumber,
                                                            Channel inChannel)
{
    send(ProgramChange, inProgramNumber, 0, inChannel);
    4d0a:	20 e0       	ldi	r18, 0x00	; 0
    4d0c:	49 81       	ldd	r20, Y+1	; 0x01
    4d0e:	60 ec       	ldi	r22, 0xC0	; 192
    4d10:	8b e1       	ldi	r24, 0x1B	; 27
    4d12:	93 e0       	ldi	r25, 0x03	; 3
    4d14:	0e 94 1c 26 	call	0x4c38	; 0x4c38 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE4sendENS_8MidiTypeEhhh>
	MIDI.sendControlChange(midi::BankSelect,currentBank[RIGHT],1);
	MIDI.sendProgramChange(currentProgram[RIGHT],1);
}
    4d18:	df 91       	pop	r29
    4d1a:	cf 91       	pop	r28
    4d1c:	0f 91       	pop	r16
    4d1e:	08 95       	ret

00004d20 <_Z10loadPresethPhS_S_S_PbS_>:
	}
	updateLEDs(&newdata);
	
}

void loadPreset(uint8_t preset,uint8_t *family,uint8_t *famIndex,uint8_t *bank,uint8_t *prog,bool *sp,uint8_t *note){
    4d20:	6f 92       	push	r6
    4d22:	7f 92       	push	r7
    4d24:	8f 92       	push	r8
    4d26:	9f 92       	push	r9
    4d28:	af 92       	push	r10
    4d2a:	bf 92       	push	r11
    4d2c:	cf 92       	push	r12
    4d2e:	df 92       	push	r13
    4d30:	ef 92       	push	r14
    4d32:	ff 92       	push	r15
    4d34:	0f 93       	push	r16
    4d36:	1f 93       	push	r17
    4d38:	cf 93       	push	r28
    4d3a:	df 93       	push	r29
    4d3c:	eb 01       	movw	r28, r22
    4d3e:	5a 01       	movw	r10, r20
    4d40:	49 01       	movw	r8, r18
    4d42:	38 01       	movw	r6, r16
    4d44:	97 01       	movw	r18, r14
    4d46:	86 01       	movw	r16, r12
	if(readPreset(preset,family,famIndex,sp,note) == true){		
    4d48:	0e 94 a0 2f 	call	0x5f40	; 0x5f40 <_Z10readPresethPhS_PbS_>
    4d4c:	88 23       	and	r24, r24
    4d4e:	59 f0       	breq	.+22     	; 0x4d66 <_Z10loadPresethPhS_S_S_PbS_+0x46>
		getBankProgram(family,famIndex,bank,prog);
    4d50:	93 01       	movw	r18, r6
    4d52:	a4 01       	movw	r20, r8
    4d54:	b5 01       	movw	r22, r10
    4d56:	ce 01       	movw	r24, r28
    4d58:	0e 94 5c 2e 	call	0x5cb8	; 0x5cb8 <_Z14getBankProgramPhS_S_S_>
		loadSounds(bank,prog);		
    4d5c:	b3 01       	movw	r22, r6
    4d5e:	c4 01       	movw	r24, r8
    4d60:	0e 94 78 26 	call	0x4cf0	; 0x4cf0 <_Z10loadSoundsPhS_>
    4d64:	0a c0       	rjmp	.+20     	; 0x4d7a <_Z10loadPresethPhS_S_S_PbS_+0x5a>
	}
	else
		tft.text("Failed:",0,0);
    4d66:	20 e0       	ldi	r18, 0x00	; 0
    4d68:	30 e0       	ldi	r19, 0x00	; 0
    4d6a:	40 e0       	ldi	r20, 0x00	; 0
    4d6c:	50 e0       	ldi	r21, 0x00	; 0
    4d6e:	68 ef       	ldi	r22, 0xF8	; 248
    4d70:	71 e0       	ldi	r23, 0x01	; 1
    4d72:	8f ed       	ldi	r24, 0xDF	; 223
    4d74:	93 e0       	ldi	r25, 0x03	; 3
    4d76:	0e 94 39 1f 	call	0x3e72	; 0x3e72 <_ZN12Adafruit_GFX4textEPKcii>
    4d7a:	df 91       	pop	r29
    4d7c:	cf 91       	pop	r28
    4d7e:	1f 91       	pop	r17
    4d80:	0f 91       	pop	r16
    4d82:	ff 90       	pop	r15
    4d84:	ef 90       	pop	r14
    4d86:	df 90       	pop	r13
    4d88:	cf 90       	pop	r12
    4d8a:	bf 90       	pop	r11
    4d8c:	af 90       	pop	r10
    4d8e:	9f 90       	pop	r9
    4d90:	8f 90       	pop	r8
    4d92:	7f 90       	pop	r7
    4d94:	6f 90       	pop	r6
    4d96:	08 95       	ret

00004d98 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv>:

// -----------------------------------------------------------------------------

// Private method: MIDI parser
template<class SerialPort, class Settings>
bool MidiInterface<SerialPort, Settings>::parse()
    4d98:	cf 93       	push	r28
    4d9a:	df 93       	push	r29
    4d9c:	ec 01       	movw	r28, r24
{
    if (mSerial.available() == 0)
    4d9e:	8c a1       	ldd	r24, Y+36	; 0x24
    4da0:	9d a1       	ldd	r25, Y+37	; 0x25
    4da2:	dc 01       	movw	r26, r24
    4da4:	ed 91       	ld	r30, X+
    4da6:	fc 91       	ld	r31, X
    4da8:	00 84       	ldd	r0, Z+8	; 0x08
    4daa:	f1 85       	ldd	r31, Z+9	; 0x09
    4dac:	e0 2d       	mov	r30, r0
    4dae:	09 95       	icall
    4db0:	89 2b       	or	r24, r25
    4db2:	09 f4       	brne	.+2      	; 0x4db6 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x1e>
    4db4:	53 c1       	rjmp	.+678    	; 0x505c <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x2c4>
    //  - Look for other bytes in buffer, call parser recursively,
    //    until the message is assembled or the buffer is empty.
    // Else, add the extracted byte to the pending message, and check validity.
    // When the message is done, store it.

    const byte extracted = mSerial.read();
    4db6:	8c a1       	ldd	r24, Y+36	; 0x24
    4db8:	9d a1       	ldd	r25, Y+37	; 0x25
    4dba:	dc 01       	movw	r26, r24
    4dbc:	ed 91       	ld	r30, X+
    4dbe:	fc 91       	ld	r31, X
    4dc0:	02 84       	ldd	r0, Z+10	; 0x0a
    4dc2:	f3 85       	ldd	r31, Z+11	; 0x0b
    4dc4:	e0 2d       	mov	r30, r0
    4dc6:	09 95       	icall

    // Ignore Undefined
    if (extracted == 0xf9 || extracted == 0xfd)
    4dc8:	28 2f       	mov	r18, r24
    4dca:	2b 7f       	andi	r18, 0xFB	; 251
    4dcc:	29 3f       	cpi	r18, 0xF9	; 249
    4dce:	09 f4       	brne	.+2      	; 0x4dd2 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x3a>
    4dd0:	47 c1       	rjmp	.+654    	; 0x5060 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x2c8>
        {
            return parse();
        }
    }

    if (mPendingMessageIndex == 0)
    4dd2:	2e a5       	ldd	r18, Y+46	; 0x2e
    4dd4:	3f a5       	ldd	r19, Y+47	; 0x2f
    4dd6:	21 15       	cp	r18, r1
    4dd8:	31 05       	cpc	r19, r1
    4dda:	09 f0       	breq	.+2      	; 0x4dde <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x46>
    4ddc:	86 c0       	rjmp	.+268    	; 0x4eea <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x152>
    {
        // Start a new pending message
        mPendingMessage[0] = extracted;
    4dde:	89 a7       	std	Y+41, r24	; 0x29

        // Check for running status first
        if (isChannelMessage(getTypeFromStatusByte(mRunningStatus_RX)))
    4de0:	2f a1       	ldd	r18, Y+39	; 0x27
 made public so you can handle MidiTypes more easily.
 */
template<class SerialPort, class Settings>
MidiType MidiInterface<SerialPort, Settings>::getTypeFromStatusByte(byte inStatus)
{
    if ((inStatus  < 0x80) ||
    4de2:	22 23       	and	r18, r18
    4de4:	14 f5       	brge	.+68     	; 0x4e2a <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x92>
    4de6:	3c e0       	ldi	r19, 0x0C	; 12
    4de8:	32 0f       	add	r19, r18
    4dea:	32 30       	cpi	r19, 0x02	; 2
    4dec:	f0 f0       	brcs	.+60     	; 0x4e2a <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x92>
    4dee:	32 2f       	mov	r19, r18
    4df0:	3b 7f       	andi	r19, 0xFB	; 251
    4df2:	39 3f       	cpi	r19, 0xF9	; 249
    4df4:	d1 f0       	breq	.+52     	; 0x4e2a <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x92>
        (inStatus == 0xfD))
    {
        // Data bytes and undefined.
        return InvalidType;
    }
    if (inStatus < 0xf0)
    4df6:	20 3f       	cpi	r18, 0xF0	; 240
    4df8:	18 f4       	brcc	.+6      	; 0x4e00 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x68>
    {
        // Channel message, remove channel nibble.
        return MidiType(inStatus & 0xf0);
    4dfa:	32 2f       	mov	r19, r18
    4dfc:	30 7f       	andi	r19, 0xF0	; 240
    4dfe:	01 c0       	rjmp	.+2      	; 0x4e02 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x6a>
    }

    return MidiType(inStatus);
    4e00:	32 2f       	mov	r19, r18
            inType == NoteOn            ||
            inType == ControlChange     ||
            inType == AfterTouchPoly    ||
            inType == AfterTouchChannel ||
            inType == PitchBend         ||
            inType == ProgramChange);
    4e02:	43 2f       	mov	r20, r19
    4e04:	4f 7e       	andi	r20, 0xEF	; 239
    4e06:	40 38       	cpi	r20, 0x80	; 128
    4e08:	41 f0       	breq	.+16     	; 0x4e1a <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x82>
    4e0a:	40 3a       	cpi	r20, 0xA0	; 160
    4e0c:	31 f0       	breq	.+12     	; 0x4e1a <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x82>
    4e0e:	30 3d       	cpi	r19, 0xD0	; 208
    4e10:	21 f0       	breq	.+8      	; 0x4e1a <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x82>
    4e12:	30 3e       	cpi	r19, 0xE0	; 224
    4e14:	11 f0       	breq	.+4      	; 0x4e1a <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x82>
    {
        // Start a new pending message
        mPendingMessage[0] = extracted;

        // Check for running status first
        if (isChannelMessage(getTypeFromStatusByte(mRunningStatus_RX)))
    4e16:	30 3c       	cpi	r19, 0xC0	; 192
    4e18:	41 f4       	brne	.+16     	; 0x4e2a <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x92>
        {
            // Only these types allow Running Status

            // If the status byte is not received, prepend it
            // to the pending message
            if (extracted < 0x80)
    4e1a:	88 23       	and	r24, r24
    4e1c:	34 f0       	brlt	.+12     	; 0x4e2a <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x92>
            {
                mPendingMessage[0]   = mRunningStatus_RX;
    4e1e:	29 a7       	std	Y+41, r18	; 0x29
                mPendingMessage[1]   = extracted;
    4e20:	8a a7       	std	Y+42, r24	; 0x2a
                mPendingMessageIndex = 1;
    4e22:	81 e0       	ldi	r24, 0x01	; 1
    4e24:	90 e0       	ldi	r25, 0x00	; 0
    4e26:	9f a7       	std	Y+47, r25	; 0x2f
    4e28:	8e a7       	std	Y+46, r24	; 0x2e
            // Else: well, we received another status byte,
            // so the running status does not apply here.
            // It will be updated upon completion of this message.
        }

        switch (getTypeFromStatusByte(mPendingMessage[0]))
    4e2a:	89 a5       	ldd	r24, Y+41	; 0x29
 made public so you can handle MidiTypes more easily.
 */
template<class SerialPort, class Settings>
MidiType MidiInterface<SerialPort, Settings>::getTypeFromStatusByte(byte inStatus)
{
    if ((inStatus  < 0x80) ||
    4e2c:	88 23       	and	r24, r24
    4e2e:	d4 f5       	brge	.+116    	; 0x4ea4 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x10c>
    4e30:	9c e0       	ldi	r25, 0x0C	; 12
    4e32:	98 0f       	add	r25, r24
    4e34:	92 30       	cpi	r25, 0x02	; 2
    4e36:	b0 f1       	brcs	.+108    	; 0x4ea4 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x10c>
    4e38:	98 2f       	mov	r25, r24
    4e3a:	9b 7f       	andi	r25, 0xFB	; 251
    4e3c:	99 3f       	cpi	r25, 0xF9	; 249
    4e3e:	91 f1       	breq	.+100    	; 0x4ea4 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x10c>
        (inStatus == 0xfD))
    {
        // Data bytes and undefined.
        return InvalidType;
    }
    if (inStatus < 0xf0)
    4e40:	80 3f       	cpi	r24, 0xF0	; 240
    4e42:	08 f0       	brcs	.+2      	; 0x4e46 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0xae>
    4e44:	0f c1       	rjmp	.+542    	; 0x5064 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x2cc>
    {
        // Channel message, remove channel nibble.
        return MidiType(inStatus & 0xf0);
    4e46:	98 2f       	mov	r25, r24
    4e48:	90 7f       	andi	r25, 0xF0	; 240
            // Else: well, we received another status byte,
            // so the running status does not apply here.
            // It will be updated upon completion of this message.
        }

        switch (getTypeFromStatusByte(mPendingMessage[0]))
    4e4a:	49 2f       	mov	r20, r25
    4e4c:	50 e0       	ldi	r21, 0x00	; 0
    4e4e:	fa 01       	movw	r30, r20
    4e50:	e0 58       	subi	r30, 0x80	; 128
    4e52:	f1 09       	sbc	r31, r1
    4e54:	e0 38       	cpi	r30, 0x80	; 128
    4e56:	f1 05       	cpc	r31, r1
    4e58:	28 f5       	brcc	.+74     	; 0x4ea4 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x10c>
    4e5a:	ec 5c       	subi	r30, 0xCC	; 204
    4e5c:	ff 4f       	sbci	r31, 0xFF	; 255
    4e5e:	0c 94 58 37 	jmp	0x6eb0	; 0x6eb0 <__tablejump2__>
    {
        // Channel message, remove channel nibble.
        return MidiType(inStatus & 0xf0);
    }

    return MidiType(inStatus);
    4e62:	98 2f       	mov	r25, r24
            case Clock:
            case ActiveSensing:
            case SystemReset:
            case TuneRequest:
                // Handle the message type directly here.
                mMessage.type    = getTypeFromStatusByte(mPendingMessage[0]);
    4e64:	9e ab       	std	Y+54, r25	; 0x36
                mMessage.channel = 0;
    4e66:	1d aa       	std	Y+53, r1	; 0x35
                mMessage.data1   = 0;
    4e68:	1f aa       	std	Y+55, r1	; 0x37
                mMessage.data2   = 0;
    4e6a:	18 ae       	std	Y+56, r1	; 0x38
                mMessage.valid   = true;
    4e6c:	fe 01       	movw	r30, r28
    4e6e:	e7 54       	subi	r30, 0x47	; 71
    4e70:	ff 4f       	sbci	r31, 0xFF	; 255
    4e72:	81 e0       	ldi	r24, 0x01	; 1
    4e74:	80 83       	st	Z, r24

                // Do not reset all input attributes, Running Status must remain unchanged.
                // We still need to reset these
                mPendingMessageIndex = 0;
    4e76:	1f a6       	std	Y+47, r1	; 0x2f
    4e78:	1e a6       	std	Y+46, r1	; 0x2e
                mPendingMessageExpectedLenght = 0;
    4e7a:	1d a6       	std	Y+45, r1	; 0x2d
    4e7c:	1c a6       	std	Y+44, r1	; 0x2c

                return true;
    4e7e:	0d c1       	rjmp	.+538    	; 0x509a <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x302>
                // 2 bytes messages
            case ProgramChange:
            case AfterTouchChannel:
            case TimeCodeQuarterFrame:
            case SongSelect:
                mPendingMessageExpectedLenght = 2;
    4e80:	22 e0       	ldi	r18, 0x02	; 2
    4e82:	30 e0       	ldi	r19, 0x00	; 0
    4e84:	3d a7       	std	Y+45, r19	; 0x2d
    4e86:	2c a7       	std	Y+44, r18	; 0x2c
                break;
    4e88:	fd c0       	rjmp	.+506    	; 0x5084 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x2ec>
            case NoteOff:
            case ControlChange:
            case PitchBend:
            case AfterTouchPoly:
            case SongPosition:
                mPendingMessageExpectedLenght = 3;
    4e8a:	23 e0       	ldi	r18, 0x03	; 3
    4e8c:	30 e0       	ldi	r19, 0x00	; 0
    4e8e:	3d a7       	std	Y+45, r19	; 0x2d
    4e90:	2c a7       	std	Y+44, r18	; 0x2c
                break;
    4e92:	f8 c0       	rjmp	.+496    	; 0x5084 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x2ec>

            case SystemExclusive:
                // The message can be any lenght
                // between 3 and MidiMessage::sSysExMaxSize bytes
                mPendingMessageExpectedLenght = MidiMessage::sSysExMaxSize;
    4e94:	20 e8       	ldi	r18, 0x80	; 128
    4e96:	30 e0       	ldi	r19, 0x00	; 0
    4e98:	3d a7       	std	Y+45, r19	; 0x2d
    4e9a:	2c a7       	std	Y+44, r18	; 0x2c
                mRunningStatus_RX = InvalidType;
    4e9c:	1f a2       	std	Y+39, r1	; 0x27
                mMessage.sysexArray[0] = SystemExclusive;
    4e9e:	90 ef       	ldi	r25, 0xF0	; 240
    4ea0:	99 af       	std	Y+57, r25	; 0x39
                break;
    4ea2:	f0 c0       	rjmp	.+480    	; 0x5084 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x2ec>

// Private method: reset input attributes
template<class SerialPort, class Settings>
inline void MidiInterface<SerialPort, Settings>::resetInput()
{
    mPendingMessageIndex = 0;
    4ea4:	1f a6       	std	Y+47, r1	; 0x2f
    4ea6:	1e a6       	std	Y+46, r1	; 0x2e
    mPendingMessageExpectedLenght = 0;
    4ea8:	1d a6       	std	Y+45, r1	; 0x2d
    4eaa:	1c a6       	std	Y+44, r1	; 0x2c
    mRunningStatus_RX = InvalidType;
    4eac:	1f a2       	std	Y+39, r1	; 0x27

            case InvalidType:
            default:
                // This is obviously wrong. Let's get the hell out'a here.
                resetInput();
                return false;
    4eae:	80 e0       	ldi	r24, 0x00	; 0
    4eb0:	f4 c0       	rjmp	.+488    	; 0x509a <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x302>
        (inStatus == 0xfD))
    {
        // Data bytes and undefined.
        return InvalidType;
    }
    if (inStatus < 0xf0)
    4eb2:	80 3f       	cpi	r24, 0xF0	; 240
    4eb4:	18 f4       	brcc	.+6      	; 0x4ebc <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x124>
    {
        // Channel message, remove channel nibble.
        return MidiType(inStatus & 0xf0);
    4eb6:	98 2f       	mov	r25, r24
    4eb8:	90 7f       	andi	r25, 0xF0	; 240
    4eba:	01 c0       	rjmp	.+2      	; 0x4ebe <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x126>
    }

    return MidiType(inStatus);
    4ebc:	98 2f       	mov	r25, r24
        }

        if (mPendingMessageIndex >= (mPendingMessageExpectedLenght - 1))
        {
            // Reception complete
            mMessage.type    = getTypeFromStatusByte(mPendingMessage[0]);
    4ebe:	9e ab       	std	Y+54, r25	; 0x36
            mMessage.channel = getChannelFromStatusByte(mPendingMessage[0]);
    4ec0:	8f 70       	andi	r24, 0x0F	; 15
    4ec2:	8f 5f       	subi	r24, 0xFF	; 255
    4ec4:	8d ab       	std	Y+53, r24	; 0x35
            mMessage.data1   = mPendingMessage[1];
    4ec6:	8a a5       	ldd	r24, Y+42	; 0x2a
    4ec8:	8f ab       	std	Y+55, r24	; 0x37
            mMessage.data2   = 0; // Completed new message has 1 data byte
    4eca:	18 ae       	std	Y+56, r1	; 0x38

            mPendingMessageIndex = 0;
    4ecc:	1f a6       	std	Y+47, r1	; 0x2f
    4ece:	1e a6       	std	Y+46, r1	; 0x2e
            mPendingMessageExpectedLenght = 0;
    4ed0:	1d a6       	std	Y+45, r1	; 0x2d
    4ed2:	1c a6       	std	Y+44, r1	; 0x2c
            mMessage.valid = true;
    4ed4:	c7 54       	subi	r28, 0x47	; 71
    4ed6:	df 4f       	sbci	r29, 0xFF	; 255
    4ed8:	81 e0       	ldi	r24, 0x01	; 1
    4eda:	88 83       	st	Y, r24
            return true;
    4edc:	de c0       	rjmp	.+444    	; 0x509a <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x302>
        }
        else
        {
            // Waiting for more data
            mPendingMessageIndex++;
    4ede:	4f 5f       	subi	r20, 0xFF	; 255
    4ee0:	5f 4f       	sbci	r21, 0xFF	; 255
    4ee2:	5f a7       	std	Y+47, r21	; 0x2f
    4ee4:	4e a7       	std	Y+46, r20	; 0x2e
        }

        if (Settings::Use1ByteParsing)
        {
            // Message is not complete.
            return false;
    4ee6:	80 e0       	ldi	r24, 0x00	; 0
    4ee8:	d8 c0       	rjmp	.+432    	; 0x509a <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x302>
        }
    }
    else
    {
        // First, test if this is a status byte
        if (extracted >= 0x80)
    4eea:	88 23       	and	r24, r24
    4eec:	f4 f5       	brge	.+124    	; 0x4f6a <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x1d2>
        {
            // Reception of status bytes in the middle of an uncompleted message
            // are allowed only for interleaved Real Time message or EOX
            switch (extracted)
    4eee:	ac 01       	movw	r20, r24
    4ef0:	55 27       	eor	r21, r21
    4ef2:	4d 3f       	cpi	r20, 0xFD	; 253
    4ef4:	51 05       	cpc	r21, r1
    4ef6:	54 f4       	brge	.+20     	; 0x4f0c <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x174>
    4ef8:	4a 3f       	cpi	r20, 0xFA	; 250
    4efa:	51 05       	cpc	r21, r1
    4efc:	64 f4       	brge	.+24     	; 0x4f16 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x17e>
    4efe:	47 3f       	cpi	r20, 0xF7	; 247
    4f00:	51 05       	cpc	r21, r1
    4f02:	91 f0       	breq	.+36     	; 0x4f28 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x190>
    4f04:	48 3f       	cpi	r20, 0xF8	; 248
    4f06:	51 05       	cpc	r21, r1
    4f08:	81 f5       	brne	.+96     	; 0x4f6a <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x1d2>
    4f0a:	05 c0       	rjmp	.+10     	; 0x4f16 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x17e>
    4f0c:	4e 5f       	subi	r20, 0xFE	; 254
    4f0e:	51 09       	sbc	r21, r1
    4f10:	42 30       	cpi	r20, 0x02	; 2
    4f12:	51 05       	cpc	r21, r1
    4f14:	50 f5       	brcc	.+84     	; 0x4f6a <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x1d2>
                    // the MIDI class, and recompose the message it was
                    // interleaved into. Oh, and without killing the running status..
                    // This is done by leaving the pending message as is,
                    // it will be completed on next calls.

                    mMessage.type    = (MidiType)extracted;
    4f16:	8e ab       	std	Y+54, r24	; 0x36
                    mMessage.data1   = 0;
    4f18:	1f aa       	std	Y+55, r1	; 0x37
                    mMessage.data2   = 0;
    4f1a:	18 ae       	std	Y+56, r1	; 0x38
                    mMessage.channel = 0;
    4f1c:	1d aa       	std	Y+53, r1	; 0x35
                    mMessage.valid   = true;
    4f1e:	c7 54       	subi	r28, 0x47	; 71
    4f20:	df 4f       	sbci	r29, 0xFF	; 255
    4f22:	81 e0       	ldi	r24, 0x01	; 1
    4f24:	88 83       	st	Y, r24
                    return true;
    4f26:	b9 c0       	rjmp	.+370    	; 0x509a <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x302>

                    // End of Exclusive
                case 0xf7:
                    if (mMessage.sysexArray[0] == SystemExclusive)
    4f28:	89 ad       	ldd	r24, Y+57	; 0x39
    4f2a:	80 3f       	cpi	r24, 0xF0	; 240
    4f2c:	b9 f4       	brne	.+46     	; 0x4f5c <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x1c4>
                    {
                        // Store the last byte (EOX)
                        mMessage.sysexArray[mPendingMessageIndex++] = 0xf7;
    4f2e:	c9 01       	movw	r24, r18
    4f30:	01 96       	adiw	r24, 0x01	; 1
    4f32:	fe 01       	movw	r30, r28
    4f34:	e2 0f       	add	r30, r18
    4f36:	f3 1f       	adc	r31, r19
    4f38:	47 ef       	ldi	r20, 0xF7	; 247
    4f3a:	41 af       	std	Z+57, r20	; 0x39
                        mMessage.type = SystemExclusive;
    4f3c:	20 ef       	ldi	r18, 0xF0	; 240
    4f3e:	2e ab       	std	Y+54, r18	; 0x36

                        // Get length
                        mMessage.data1   = mPendingMessageIndex & 0xff; // LSB
    4f40:	8f ab       	std	Y+55, r24	; 0x37
                        mMessage.data2   = mPendingMessageIndex >> 8;   // MSB
    4f42:	98 af       	std	Y+56, r25	; 0x38
                        mMessage.channel = 0;
    4f44:	1d aa       	std	Y+53, r1	; 0x35
                        mMessage.valid   = true;
    4f46:	fe 01       	movw	r30, r28
    4f48:	e7 54       	subi	r30, 0x47	; 71
    4f4a:	ff 4f       	sbci	r31, 0xFF	; 255
    4f4c:	81 e0       	ldi	r24, 0x01	; 1
    4f4e:	80 83       	st	Z, r24

// Private method: reset input attributes
template<class SerialPort, class Settings>
inline void MidiInterface<SerialPort, Settings>::resetInput()
{
    mPendingMessageIndex = 0;
    4f50:	1f a6       	std	Y+47, r1	; 0x2f
    4f52:	1e a6       	std	Y+46, r1	; 0x2e
    mPendingMessageExpectedLenght = 0;
    4f54:	1d a6       	std	Y+45, r1	; 0x2d
    4f56:	1c a6       	std	Y+44, r1	; 0x2c
    mRunningStatus_RX = InvalidType;
    4f58:	1f a2       	std	Y+39, r1	; 0x27
                        mMessage.data2   = mPendingMessageIndex >> 8;   // MSB
                        mMessage.channel = 0;
                        mMessage.valid   = true;

                        resetInput();
                        return true;
    4f5a:	9f c0       	rjmp	.+318    	; 0x509a <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x302>

// Private method: reset input attributes
template<class SerialPort, class Settings>
inline void MidiInterface<SerialPort, Settings>::resetInput()
{
    mPendingMessageIndex = 0;
    4f5c:	1f a6       	std	Y+47, r1	; 0x2f
    4f5e:	1e a6       	std	Y+46, r1	; 0x2e
    mPendingMessageExpectedLenght = 0;
    4f60:	1d a6       	std	Y+45, r1	; 0x2d
    4f62:	1c a6       	std	Y+44, r1	; 0x2c
    mRunningStatus_RX = InvalidType;
    4f64:	1f a2       	std	Y+39, r1	; 0x27
                    }
                    else
                    {
                        // Well well well.. error.
                        resetInput();
                        return false;
    4f66:	80 e0       	ldi	r24, 0x00	; 0
    4f68:	98 c0       	rjmp	.+304    	; 0x509a <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x302>
                    break; // LCOV_EXCL_LINE - Coverage blind spot
            }
        }

        // Add extracted data byte to pending message
        if (mPendingMessage[0] == SystemExclusive)
    4f6a:	49 a5       	ldd	r20, Y+41	; 0x29
    4f6c:	40 3f       	cpi	r20, 0xF0	; 240
    4f6e:	61 f4       	brne	.+24     	; 0x4f88 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x1f0>
            mMessage.sysexArray[mPendingMessageIndex] = extracted;
    4f70:	fe 01       	movw	r30, r28
    4f72:	e2 0f       	add	r30, r18
    4f74:	f3 1f       	adc	r31, r19
    4f76:	81 af       	std	Z+57, r24	; 0x39
        else
            mPendingMessage[mPendingMessageIndex] = extracted;

        // Now we are going to check if we have reached the end of the message
        if (mPendingMessageIndex >= (mPendingMessageExpectedLenght - 1))
    4f78:	8c a5       	ldd	r24, Y+44	; 0x2c
    4f7a:	9d a5       	ldd	r25, Y+45	; 0x2d
    4f7c:	01 97       	sbiw	r24, 0x01	; 1
    4f7e:	28 17       	cp	r18, r24
    4f80:	39 07       	cpc	r19, r25
    4f82:	08 f4       	brcc	.+2      	; 0x4f86 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x1ee>
    4f84:	65 c0       	rjmp	.+202    	; 0x5050 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x2b8>
    4f86:	0f c0       	rjmp	.+30     	; 0x4fa6 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x20e>

        // Add extracted data byte to pending message
        if (mPendingMessage[0] == SystemExclusive)
            mMessage.sysexArray[mPendingMessageIndex] = extracted;
        else
            mPendingMessage[mPendingMessageIndex] = extracted;
    4f88:	fe 01       	movw	r30, r28
    4f8a:	e2 0f       	add	r30, r18
    4f8c:	f3 1f       	adc	r31, r19
    4f8e:	81 a7       	std	Z+41, r24	; 0x29

        // Now we are going to check if we have reached the end of the message
        if (mPendingMessageIndex >= (mPendingMessageExpectedLenght - 1))
    4f90:	4c a5       	ldd	r20, Y+44	; 0x2c
    4f92:	5d a5       	ldd	r21, Y+45	; 0x2d
    4f94:	ca 01       	movw	r24, r20
    4f96:	01 97       	sbiw	r24, 0x01	; 1
    4f98:	28 17       	cp	r18, r24
    4f9a:	39 07       	cpc	r19, r25
    4f9c:	08 f4       	brcc	.+2      	; 0x4fa0 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x208>
    4f9e:	58 c0       	rjmp	.+176    	; 0x5050 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x2b8>
        {
            // "FML" case: fall down here with an overflown SysEx..
            // This means we received the last possible data byte that can fit
            // the buffer. If this happens, try increasing MidiMessage::sSysExMaxSize.
            if (mPendingMessage[0] == SystemExclusive)
    4fa0:	99 a5       	ldd	r25, Y+41	; 0x29
    4fa2:	90 3f       	cpi	r25, 0xF0	; 240
    4fa4:	39 f4       	brne	.+14     	; 0x4fb4 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x21c>

// Private method: reset input attributes
template<class SerialPort, class Settings>
inline void MidiInterface<SerialPort, Settings>::resetInput()
{
    mPendingMessageIndex = 0;
    4fa6:	1f a6       	std	Y+47, r1	; 0x2f
    4fa8:	1e a6       	std	Y+46, r1	; 0x2e
    mPendingMessageExpectedLenght = 0;
    4faa:	1d a6       	std	Y+45, r1	; 0x2d
    4fac:	1c a6       	std	Y+44, r1	; 0x2c
    mRunningStatus_RX = InvalidType;
    4fae:	1f a2       	std	Y+39, r1	; 0x27
            // This means we received the last possible data byte that can fit
            // the buffer. If this happens, try increasing MidiMessage::sSysExMaxSize.
            if (mPendingMessage[0] == SystemExclusive)
            {
                resetInput();
                return false;
    4fb0:	80 e0       	ldi	r24, 0x00	; 0
    4fb2:	73 c0       	rjmp	.+230    	; 0x509a <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x302>
 made public so you can handle MidiTypes more easily.
 */
template<class SerialPort, class Settings>
MidiType MidiInterface<SerialPort, Settings>::getTypeFromStatusByte(byte inStatus)
{
    if ((inStatus  < 0x80) ||
    4fb4:	99 23       	and	r25, r25
    4fb6:	0c f0       	brlt	.+2      	; 0x4fba <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x222>
    4fb8:	62 c0       	rjmp	.+196    	; 0x507e <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x2e6>
    4fba:	8c e0       	ldi	r24, 0x0C	; 12
    4fbc:	89 0f       	add	r24, r25
    4fbe:	82 30       	cpi	r24, 0x02	; 2
    4fc0:	08 f4       	brcc	.+2      	; 0x4fc4 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x22c>
    4fc2:	5d c0       	rjmp	.+186    	; 0x507e <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x2e6>
    4fc4:	89 2f       	mov	r24, r25
    4fc6:	8b 7f       	andi	r24, 0xFB	; 251
    4fc8:	89 3f       	cpi	r24, 0xF9	; 249
    4fca:	09 f4       	brne	.+2      	; 0x4fce <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x236>
    4fcc:	58 c0       	rjmp	.+176    	; 0x507e <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x2e6>
        (inStatus == 0xfD))
    {
        // Data bytes and undefined.
        return InvalidType;
    }
    if (inStatus < 0xf0)
    4fce:	90 3f       	cpi	r25, 0xF0	; 240
    4fd0:	18 f4       	brcc	.+6      	; 0x4fd8 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x240>
    {
        // Channel message, remove channel nibble.
        return MidiType(inStatus & 0xf0);
    4fd2:	89 2f       	mov	r24, r25
    4fd4:	80 7f       	andi	r24, 0xF0	; 240
    4fd6:	01 c0       	rjmp	.+2      	; 0x4fda <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x242>
        if (mPendingMessageIndex >= (mPendingMessageExpectedLenght - 1))
        {
            // "FML" case: fall down here with an overflown SysEx..
            // This means we received the last possible data byte that can fit
            // the buffer. If this happens, try increasing MidiMessage::sSysExMaxSize.
            if (mPendingMessage[0] == SystemExclusive)
    4fd8:	89 2f       	mov	r24, r25
            {
                resetInput();
                return false;
            }

            mMessage.type = getTypeFromStatusByte(mPendingMessage[0]);
    4fda:	8e ab       	std	Y+54, r24	; 0x36
            inType == NoteOn            ||
            inType == ControlChange     ||
            inType == AfterTouchPoly    ||
            inType == AfterTouchChannel ||
            inType == PitchBend         ||
            inType == ProgramChange);
    4fdc:	28 2f       	mov	r18, r24
    4fde:	2f 7e       	andi	r18, 0xEF	; 239
    4fe0:	20 38       	cpi	r18, 0x80	; 128
    4fe2:	41 f0       	breq	.+16     	; 0x4ff4 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x25c>
    4fe4:	20 3a       	cpi	r18, 0xA0	; 160
    4fe6:	31 f0       	breq	.+12     	; 0x4ff4 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x25c>
    4fe8:	80 3d       	cpi	r24, 0xD0	; 208
    4fea:	21 f0       	breq	.+8      	; 0x4ff4 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x25c>
    4fec:	80 3e       	cpi	r24, 0xE0	; 224
    4fee:	11 f0       	breq	.+4      	; 0x4ff4 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x25c>
                return false;
            }

            mMessage.type = getTypeFromStatusByte(mPendingMessage[0]);

            if (isChannelMessage(mMessage.type))
    4ff0:	80 3c       	cpi	r24, 0xC0	; 192
    4ff2:	29 f4       	brne	.+10     	; 0x4ffe <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x266>
                mMessage.channel = getChannelFromStatusByte(mPendingMessage[0]);
    4ff4:	29 2f       	mov	r18, r25
    4ff6:	2f 70       	andi	r18, 0x0F	; 15
    4ff8:	2f 5f       	subi	r18, 0xFF	; 255
    4ffa:	2d ab       	std	Y+53, r18	; 0x35
    4ffc:	01 c0       	rjmp	.+2      	; 0x5000 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x268>
            else
                mMessage.channel = 0;
    4ffe:	1d aa       	std	Y+53, r1	; 0x35

            mMessage.data1 = mPendingMessage[1];
    5000:	2a a5       	ldd	r18, Y+42	; 0x2a
    5002:	2f ab       	std	Y+55, r18	; 0x37

            // Save data2 only if applicable
            mMessage.data2 = mPendingMessageExpectedLenght == 3 ? mPendingMessage[2] : 0;
    5004:	43 30       	cpi	r20, 0x03	; 3
    5006:	51 05       	cpc	r21, r1
    5008:	11 f4       	brne	.+4      	; 0x500e <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x276>
    500a:	2b a5       	ldd	r18, Y+43	; 0x2b
    500c:	01 c0       	rjmp	.+2      	; 0x5010 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x278>
    500e:	20 e0       	ldi	r18, 0x00	; 0
    5010:	28 af       	std	Y+56, r18	; 0x38

            // Reset local variables
            mPendingMessageIndex = 0;
    5012:	1f a6       	std	Y+47, r1	; 0x2f
    5014:	1e a6       	std	Y+46, r1	; 0x2e
            mPendingMessageExpectedLenght = 0;
    5016:	1d a6       	std	Y+45, r1	; 0x2d
    5018:	1c a6       	std	Y+44, r1	; 0x2c

            mMessage.valid = true;
    501a:	21 e0       	ldi	r18, 0x01	; 1
    501c:	fe 01       	movw	r30, r28
    501e:	e7 54       	subi	r30, 0x47	; 71
    5020:	ff 4f       	sbci	r31, 0xFF	; 255
    5022:	20 83       	st	Z, r18

            // Activate running status (if enabled for the received type)
            switch (mMessage.type)
    5024:	80 3b       	cpi	r24, 0xB0	; 176
    5026:	71 f0       	breq	.+28     	; 0x5044 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x2ac>
    5028:	38 f4       	brcc	.+14     	; 0x5038 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x2a0>
    502a:	80 39       	cpi	r24, 0x90	; 144
    502c:	59 f0       	breq	.+22     	; 0x5044 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x2ac>
    502e:	80 3a       	cpi	r24, 0xA0	; 160
    5030:	49 f0       	breq	.+18     	; 0x5044 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x2ac>
    5032:	80 38       	cpi	r24, 0x80	; 128
    5034:	51 f4       	brne	.+20     	; 0x504a <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x2b2>
    5036:	06 c0       	rjmp	.+12     	; 0x5044 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x2ac>
    5038:	80 3d       	cpi	r24, 0xD0	; 208
    503a:	21 f0       	breq	.+8      	; 0x5044 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x2ac>
    503c:	80 3e       	cpi	r24, 0xE0	; 224
    503e:	11 f0       	breq	.+4      	; 0x5044 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x2ac>
    5040:	80 3c       	cpi	r24, 0xC0	; 192
    5042:	19 f4       	brne	.+6      	; 0x504a <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x2b2>
                case ControlChange:
                case ProgramChange:
                case AfterTouchChannel:
                case PitchBend:
                    // Running status enabled: store it from received message
                    mRunningStatus_RX = mPendingMessage[0];
    5044:	9f a3       	std	Y+39, r25	; 0x27
                default:
                    // No running status
                    mRunningStatus_RX = InvalidType;
                    break;
            }
            return true;
    5046:	81 e0       	ldi	r24, 0x01	; 1
                case ProgramChange:
                case AfterTouchChannel:
                case PitchBend:
                    // Running status enabled: store it from received message
                    mRunningStatus_RX = mPendingMessage[0];
                    break;
    5048:	28 c0       	rjmp	.+80     	; 0x509a <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x302>

                default:
                    // No running status
                    mRunningStatus_RX = InvalidType;
    504a:	1f a2       	std	Y+39, r1	; 0x27
                    break;
            }
            return true;
    504c:	81 e0       	ldi	r24, 0x01	; 1
                    break;

                default:
                    // No running status
                    mRunningStatus_RX = InvalidType;
                    break;
    504e:	25 c0       	rjmp	.+74     	; 0x509a <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x302>
            return true;
        }
        else
        {
            // Then update the index of the pending message.
            mPendingMessageIndex++;
    5050:	2f 5f       	subi	r18, 0xFF	; 255
    5052:	3f 4f       	sbci	r19, 0xFF	; 255
    5054:	3f a7       	std	Y+47, r19	; 0x2f
    5056:	2e a7       	std	Y+46, r18	; 0x2e

            if (Settings::Use1ByteParsing)
            {
                // Message is not complete.
                return false;
    5058:	80 e0       	ldi	r24, 0x00	; 0
    505a:	1f c0       	rjmp	.+62     	; 0x509a <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x302>
template<class SerialPort, class Settings>
bool MidiInterface<SerialPort, Settings>::parse()
{
    if (mSerial.available() == 0)
        // No data available.
        return false;
    505c:	80 e0       	ldi	r24, 0x00	; 0
    505e:	1d c0       	rjmp	.+58     	; 0x509a <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x302>
    // Ignore Undefined
    if (extracted == 0xf9 || extracted == 0xfd)
    {
        if (Settings::Use1ByteParsing)
        {
            return false;
    5060:	80 e0       	ldi	r24, 0x00	; 0
    5062:	1b c0       	rjmp	.+54     	; 0x509a <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x302>
            // Else: well, we received another status byte,
            // so the running status does not apply here.
            // It will be updated upon completion of this message.
        }

        switch (getTypeFromStatusByte(mPendingMessage[0]))
    5064:	48 2f       	mov	r20, r24
    5066:	50 e0       	ldi	r21, 0x00	; 0
    5068:	fa 01       	movw	r30, r20
    506a:	e0 58       	subi	r30, 0x80	; 128
    506c:	f1 09       	sbc	r31, r1
    506e:	e0 38       	cpi	r30, 0x80	; 128
    5070:	f1 05       	cpc	r31, r1
    5072:	08 f0       	brcs	.+2      	; 0x5076 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x2de>
    5074:	17 cf       	rjmp	.-466    	; 0x4ea4 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x10c>
    5076:	ec 54       	subi	r30, 0x4C	; 76
    5078:	ff 4f       	sbci	r31, 0xFF	; 255
    507a:	0c 94 58 37 	jmp	0x6eb0	; 0x6eb0 <__tablejump2__>
            {
                resetInput();
                return false;
            }

            mMessage.type = getTypeFromStatusByte(mPendingMessage[0]);
    507e:	1e aa       	std	Y+54, r1	; 0x36
    5080:	80 e0       	ldi	r24, 0x00	; 0
    5082:	bd cf       	rjmp	.-134    	; 0x4ffe <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x266>
                resetInput();
                return false;
                break;
        }

        if (mPendingMessageIndex >= (mPendingMessageExpectedLenght - 1))
    5084:	4e a5       	ldd	r20, Y+46	; 0x2e
    5086:	5f a5       	ldd	r21, Y+47	; 0x2f
    5088:	2c a5       	ldd	r18, Y+44	; 0x2c
    508a:	3d a5       	ldd	r19, Y+45	; 0x2d
    508c:	21 50       	subi	r18, 0x01	; 1
    508e:	31 09       	sbc	r19, r1
    5090:	42 17       	cp	r20, r18
    5092:	53 07       	cpc	r21, r19
    5094:	08 f4       	brcc	.+2      	; 0x5098 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x300>
    5096:	23 cf       	rjmp	.-442    	; 0x4ede <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x146>
    5098:	0c cf       	rjmp	.-488    	; 0x4eb2 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv+0x11a>
                // Call the parser recursively to parse the rest of the message.
                return parse();
            }
        }
    }
}
    509a:	df 91       	pop	r29
    509c:	cf 91       	pop	r28
    509e:	08 95       	ret

000050a0 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE14launchCallbackEv>:
// Private - launch callback function based on received type.
template<class SerialPort, class Settings>
void MidiInterface<SerialPort, Settings>::launchCallback()
{
    // The order is mixed to allow frequent messages to trigger their callback faster.
    switch (mMessage.type)
    50a0:	dc 01       	movw	r26, r24
    50a2:	d6 96       	adiw	r26, 0x36	; 54
    50a4:	ec 91       	ld	r30, X
    50a6:	d6 97       	sbiw	r26, 0x36	; 54
    50a8:	4e 2f       	mov	r20, r30
    50aa:	50 e0       	ldi	r21, 0x00	; 0
    50ac:	fa 01       	movw	r30, r20
    50ae:	e0 58       	subi	r30, 0x80	; 128
    50b0:	f1 09       	sbc	r31, r1
    50b2:	e0 38       	cpi	r30, 0x80	; 128
    50b4:	f1 05       	cpc	r31, r1
    50b6:	08 f0       	brcs	.+2      	; 0x50ba <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE14launchCallbackEv+0x1a>
    50b8:	fa c0       	rjmp	.+500    	; 0x52ae <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE14launchCallbackEv+0x20e>
    50ba:	ec 5c       	subi	r30, 0xCC	; 204
    50bc:	fe 4f       	sbci	r31, 0xFE	; 254
    50be:	0c 94 58 37 	jmp	0x6eb0	; 0x6eb0 <__tablejump2__>
    {
            // Notes
        case NoteOff:               if (mNoteOffCallback != 0)               mNoteOffCallback(mMessage.channel, mMessage.data1, mMessage.data2);   break;
    50c2:	ed 91       	ld	r30, X+
    50c4:	fc 91       	ld	r31, X
    50c6:	11 97       	sbiw	r26, 0x01	; 1
    50c8:	30 97       	sbiw	r30, 0x00	; 0
    50ca:	09 f4       	brne	.+2      	; 0x50ce <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE14launchCallbackEv+0x2e>
    50cc:	f0 c0       	rjmp	.+480    	; 0x52ae <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE14launchCallbackEv+0x20e>
    50ce:	d8 96       	adiw	r26, 0x38	; 56
    50d0:	4c 91       	ld	r20, X
    50d2:	d8 97       	sbiw	r26, 0x38	; 56
    50d4:	d7 96       	adiw	r26, 0x37	; 55
    50d6:	6c 91       	ld	r22, X
    50d8:	d7 97       	sbiw	r26, 0x37	; 55
    50da:	d5 96       	adiw	r26, 0x35	; 53
    50dc:	8c 91       	ld	r24, X
    50de:	09 95       	icall
    50e0:	08 95       	ret
        case NoteOn:                if (mNoteOnCallback != 0)                mNoteOnCallback(mMessage.channel, mMessage.data1, mMessage.data2);    break;
    50e2:	12 96       	adiw	r26, 0x02	; 2
    50e4:	ed 91       	ld	r30, X+
    50e6:	fc 91       	ld	r31, X
    50e8:	13 97       	sbiw	r26, 0x03	; 3
    50ea:	30 97       	sbiw	r30, 0x00	; 0
    50ec:	09 f4       	brne	.+2      	; 0x50f0 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE14launchCallbackEv+0x50>
    50ee:	df c0       	rjmp	.+446    	; 0x52ae <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE14launchCallbackEv+0x20e>
    50f0:	d8 96       	adiw	r26, 0x38	; 56
    50f2:	4c 91       	ld	r20, X
    50f4:	d8 97       	sbiw	r26, 0x38	; 56
    50f6:	d7 96       	adiw	r26, 0x37	; 55
    50f8:	6c 91       	ld	r22, X
    50fa:	d7 97       	sbiw	r26, 0x37	; 55
    50fc:	d5 96       	adiw	r26, 0x35	; 53
    50fe:	8c 91       	ld	r24, X
    5100:	09 95       	icall
    5102:	08 95       	ret

            // Real-time messages
        case Clock:                 if (mClockCallback != 0)                 mClockCallback();           break;
    5104:	58 96       	adiw	r26, 0x18	; 24
    5106:	ed 91       	ld	r30, X+
    5108:	fc 91       	ld	r31, X
    510a:	59 97       	sbiw	r26, 0x19	; 25
    510c:	30 97       	sbiw	r30, 0x00	; 0
    510e:	09 f4       	brne	.+2      	; 0x5112 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE14launchCallbackEv+0x72>
    5110:	ce c0       	rjmp	.+412    	; 0x52ae <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE14launchCallbackEv+0x20e>
    5112:	09 95       	icall
    5114:	08 95       	ret
        case Start:                 if (mStartCallback != 0)                 mStartCallback();           break;
    5116:	5a 96       	adiw	r26, 0x1a	; 26
    5118:	ed 91       	ld	r30, X+
    511a:	fc 91       	ld	r31, X
    511c:	5b 97       	sbiw	r26, 0x1b	; 27
    511e:	30 97       	sbiw	r30, 0x00	; 0
    5120:	09 f4       	brne	.+2      	; 0x5124 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE14launchCallbackEv+0x84>
    5122:	c5 c0       	rjmp	.+394    	; 0x52ae <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE14launchCallbackEv+0x20e>
    5124:	09 95       	icall
    5126:	08 95       	ret
        case Continue:              if (mContinueCallback != 0)              mContinueCallback();        break;
    5128:	5c 96       	adiw	r26, 0x1c	; 28
    512a:	ed 91       	ld	r30, X+
    512c:	fc 91       	ld	r31, X
    512e:	5d 97       	sbiw	r26, 0x1d	; 29
    5130:	30 97       	sbiw	r30, 0x00	; 0
    5132:	09 f4       	brne	.+2      	; 0x5136 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE14launchCallbackEv+0x96>
    5134:	bc c0       	rjmp	.+376    	; 0x52ae <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE14launchCallbackEv+0x20e>
    5136:	09 95       	icall
    5138:	08 95       	ret
        case Stop:                  if (mStopCallback != 0)                  mStopCallback();            break;
    513a:	5e 96       	adiw	r26, 0x1e	; 30
    513c:	ed 91       	ld	r30, X+
    513e:	fc 91       	ld	r31, X
    5140:	5f 97       	sbiw	r26, 0x1f	; 31
    5142:	30 97       	sbiw	r30, 0x00	; 0
    5144:	09 f4       	brne	.+2      	; 0x5148 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE14launchCallbackEv+0xa8>
    5146:	b3 c0       	rjmp	.+358    	; 0x52ae <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE14launchCallbackEv+0x20e>
    5148:	09 95       	icall
    514a:	08 95       	ret
        case ActiveSensing:         if (mActiveSensingCallback != 0)         mActiveSensingCallback();   break;
    514c:	90 96       	adiw	r26, 0x20	; 32
    514e:	ed 91       	ld	r30, X+
    5150:	fc 91       	ld	r31, X
    5152:	91 97       	sbiw	r26, 0x21	; 33
    5154:	30 97       	sbiw	r30, 0x00	; 0
    5156:	09 f4       	brne	.+2      	; 0x515a <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE14launchCallbackEv+0xba>
    5158:	aa c0       	rjmp	.+340    	; 0x52ae <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE14launchCallbackEv+0x20e>
    515a:	09 95       	icall
    515c:	08 95       	ret

            // Continuous controllers
        case ControlChange:         if (mControlChangeCallback != 0)         mControlChangeCallback(mMessage.channel, mMessage.data1, mMessage.data2);    break;
    515e:	16 96       	adiw	r26, 0x06	; 6
    5160:	ed 91       	ld	r30, X+
    5162:	fc 91       	ld	r31, X
    5164:	17 97       	sbiw	r26, 0x07	; 7
    5166:	30 97       	sbiw	r30, 0x00	; 0
    5168:	09 f4       	brne	.+2      	; 0x516c <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE14launchCallbackEv+0xcc>
    516a:	a1 c0       	rjmp	.+322    	; 0x52ae <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE14launchCallbackEv+0x20e>
    516c:	d8 96       	adiw	r26, 0x38	; 56
    516e:	4c 91       	ld	r20, X
    5170:	d8 97       	sbiw	r26, 0x38	; 56
    5172:	d7 96       	adiw	r26, 0x37	; 55
    5174:	6c 91       	ld	r22, X
    5176:	d7 97       	sbiw	r26, 0x37	; 55
    5178:	d5 96       	adiw	r26, 0x35	; 53
    517a:	8c 91       	ld	r24, X
    517c:	09 95       	icall
    517e:	08 95       	ret
        case PitchBend:             if (mPitchBendCallback != 0)             mPitchBendCallback(mMessage.channel, (int)((mMessage.data1 & 0x7f) | ((mMessage.data2 & 0x7f) << 7)) + MIDI_PITCHBEND_MIN); break; // TODO: check this
    5180:	1c 96       	adiw	r26, 0x0c	; 12
    5182:	ed 91       	ld	r30, X+
    5184:	fc 91       	ld	r31, X
    5186:	1d 97       	sbiw	r26, 0x0d	; 13
    5188:	30 97       	sbiw	r30, 0x00	; 0
    518a:	09 f4       	brne	.+2      	; 0x518e <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE14launchCallbackEv+0xee>
    518c:	90 c0       	rjmp	.+288    	; 0x52ae <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE14launchCallbackEv+0x20e>
    518e:	d8 96       	adiw	r26, 0x38	; 56
    5190:	6c 91       	ld	r22, X
    5192:	d8 97       	sbiw	r26, 0x38	; 56
    5194:	6f 77       	andi	r22, 0x7F	; 127
    5196:	20 e8       	ldi	r18, 0x80	; 128
    5198:	62 9f       	mul	r22, r18
    519a:	b0 01       	movw	r22, r0
    519c:	11 24       	eor	r1, r1
    519e:	d7 96       	adiw	r26, 0x37	; 55
    51a0:	8c 91       	ld	r24, X
    51a2:	d7 97       	sbiw	r26, 0x37	; 55
    51a4:	8f 77       	andi	r24, 0x7F	; 127
    51a6:	68 2b       	or	r22, r24
    51a8:	70 52       	subi	r23, 0x20	; 32
    51aa:	d5 96       	adiw	r26, 0x35	; 53
    51ac:	8c 91       	ld	r24, X
    51ae:	09 95       	icall
    51b0:	08 95       	ret
        case AfterTouchPoly:        if (mAfterTouchPolyCallback != 0)        mAfterTouchPolyCallback(mMessage.channel, mMessage.data1, mMessage.data2);    break;
    51b2:	14 96       	adiw	r26, 0x04	; 4
    51b4:	ed 91       	ld	r30, X+
    51b6:	fc 91       	ld	r31, X
    51b8:	15 97       	sbiw	r26, 0x05	; 5
    51ba:	30 97       	sbiw	r30, 0x00	; 0
    51bc:	09 f4       	brne	.+2      	; 0x51c0 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE14launchCallbackEv+0x120>
    51be:	77 c0       	rjmp	.+238    	; 0x52ae <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE14launchCallbackEv+0x20e>
    51c0:	d8 96       	adiw	r26, 0x38	; 56
    51c2:	4c 91       	ld	r20, X
    51c4:	d8 97       	sbiw	r26, 0x38	; 56
    51c6:	d7 96       	adiw	r26, 0x37	; 55
    51c8:	6c 91       	ld	r22, X
    51ca:	d7 97       	sbiw	r26, 0x37	; 55
    51cc:	d5 96       	adiw	r26, 0x35	; 53
    51ce:	8c 91       	ld	r24, X
    51d0:	09 95       	icall
    51d2:	08 95       	ret
        case AfterTouchChannel:     if (mAfterTouchChannelCallback != 0)     mAfterTouchChannelCallback(mMessage.channel, mMessage.data1);    break;
    51d4:	1a 96       	adiw	r26, 0x0a	; 10
    51d6:	ed 91       	ld	r30, X+
    51d8:	fc 91       	ld	r31, X
    51da:	1b 97       	sbiw	r26, 0x0b	; 11
    51dc:	30 97       	sbiw	r30, 0x00	; 0
    51de:	09 f4       	brne	.+2      	; 0x51e2 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE14launchCallbackEv+0x142>
    51e0:	66 c0       	rjmp	.+204    	; 0x52ae <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE14launchCallbackEv+0x20e>
    51e2:	d7 96       	adiw	r26, 0x37	; 55
    51e4:	6c 91       	ld	r22, X
    51e6:	d7 97       	sbiw	r26, 0x37	; 55
    51e8:	d5 96       	adiw	r26, 0x35	; 53
    51ea:	8c 91       	ld	r24, X
    51ec:	09 95       	icall
    51ee:	08 95       	ret

        case ProgramChange:         if (mProgramChangeCallback != 0)         mProgramChangeCallback(mMessage.channel, mMessage.data1);    break;
    51f0:	18 96       	adiw	r26, 0x08	; 8
    51f2:	ed 91       	ld	r30, X+
    51f4:	fc 91       	ld	r31, X
    51f6:	19 97       	sbiw	r26, 0x09	; 9
    51f8:	30 97       	sbiw	r30, 0x00	; 0
    51fa:	09 f4       	brne	.+2      	; 0x51fe <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE14launchCallbackEv+0x15e>
    51fc:	58 c0       	rjmp	.+176    	; 0x52ae <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE14launchCallbackEv+0x20e>
    51fe:	d7 96       	adiw	r26, 0x37	; 55
    5200:	6c 91       	ld	r22, X
    5202:	d7 97       	sbiw	r26, 0x37	; 55
    5204:	d5 96       	adiw	r26, 0x35	; 53
    5206:	8c 91       	ld	r24, X
    5208:	09 95       	icall
    520a:	08 95       	ret
        case SystemExclusive:       if (mSystemExclusiveCallback != 0)       mSystemExclusiveCallback(mMessage.sysexArray, mMessage.getSysExSize());    break;
    520c:	1e 96       	adiw	r26, 0x0e	; 14
    520e:	ed 91       	ld	r30, X+
    5210:	fc 91       	ld	r31, X
    5212:	1f 97       	sbiw	r26, 0x0f	; 15
    5214:	30 97       	sbiw	r30, 0x00	; 0
    5216:	09 f4       	brne	.+2      	; 0x521a <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE14launchCallbackEv+0x17a>
    5218:	4a c0       	rjmp	.+148    	; 0x52ae <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE14launchCallbackEv+0x20e>
    521a:	d8 96       	adiw	r26, 0x38	; 56
    521c:	6c 91       	ld	r22, X
    521e:	d8 97       	sbiw	r26, 0x38	; 56
    5220:	70 e0       	ldi	r23, 0x00	; 0
    5222:	76 2f       	mov	r23, r22
    5224:	66 27       	eor	r22, r22
    5226:	d7 96       	adiw	r26, 0x37	; 55
    5228:	8c 91       	ld	r24, X
    522a:	d7 97       	sbiw	r26, 0x37	; 55
    522c:	68 2b       	or	r22, r24
    522e:	61 38       	cpi	r22, 0x81	; 129
    5230:	71 05       	cpc	r23, r1
    5232:	10 f0       	brcs	.+4      	; 0x5238 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE14launchCallbackEv+0x198>
    5234:	60 e8       	ldi	r22, 0x80	; 128
    5236:	70 e0       	ldi	r23, 0x00	; 0
    5238:	cd 01       	movw	r24, r26
    523a:	c9 96       	adiw	r24, 0x39	; 57
    523c:	09 95       	icall
    523e:	08 95       	ret

            // Occasional messages
        case TimeCodeQuarterFrame:  if (mTimeCodeQuarterFrameCallback != 0)  mTimeCodeQuarterFrameCallback(mMessage.data1);    break;
    5240:	50 96       	adiw	r26, 0x10	; 16
    5242:	ed 91       	ld	r30, X+
    5244:	fc 91       	ld	r31, X
    5246:	51 97       	sbiw	r26, 0x11	; 17
    5248:	30 97       	sbiw	r30, 0x00	; 0
    524a:	89 f1       	breq	.+98     	; 0x52ae <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE14launchCallbackEv+0x20e>
    524c:	d7 96       	adiw	r26, 0x37	; 55
    524e:	8c 91       	ld	r24, X
    5250:	09 95       	icall
    5252:	08 95       	ret
        case SongPosition:          if (mSongPositionCallback != 0)          mSongPositionCallback((mMessage.data1 & 0x7f) | ((mMessage.data2 & 0x7f) << 7));    break;
    5254:	52 96       	adiw	r26, 0x12	; 18
    5256:	ed 91       	ld	r30, X+
    5258:	fc 91       	ld	r31, X
    525a:	53 97       	sbiw	r26, 0x13	; 19
    525c:	30 97       	sbiw	r30, 0x00	; 0
    525e:	39 f1       	breq	.+78     	; 0x52ae <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE14launchCallbackEv+0x20e>
    5260:	d8 96       	adiw	r26, 0x38	; 56
    5262:	8c 91       	ld	r24, X
    5264:	d8 97       	sbiw	r26, 0x38	; 56
    5266:	8f 77       	andi	r24, 0x7F	; 127
    5268:	20 e8       	ldi	r18, 0x80	; 128
    526a:	82 9f       	mul	r24, r18
    526c:	c0 01       	movw	r24, r0
    526e:	11 24       	eor	r1, r1
    5270:	d7 96       	adiw	r26, 0x37	; 55
    5272:	2c 91       	ld	r18, X
    5274:	2f 77       	andi	r18, 0x7F	; 127
    5276:	82 2b       	or	r24, r18
    5278:	09 95       	icall
    527a:	08 95       	ret
        case SongSelect:            if (mSongSelectCallback != 0)            mSongSelectCallback(mMessage.data1);    break;
    527c:	54 96       	adiw	r26, 0x14	; 20
    527e:	ed 91       	ld	r30, X+
    5280:	fc 91       	ld	r31, X
    5282:	55 97       	sbiw	r26, 0x15	; 21
    5284:	30 97       	sbiw	r30, 0x00	; 0
    5286:	99 f0       	breq	.+38     	; 0x52ae <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE14launchCallbackEv+0x20e>
    5288:	d7 96       	adiw	r26, 0x37	; 55
    528a:	8c 91       	ld	r24, X
    528c:	09 95       	icall
    528e:	08 95       	ret
        case TuneRequest:           if (mTuneRequestCallback != 0)           mTuneRequestCallback();    break;
    5290:	56 96       	adiw	r26, 0x16	; 22
    5292:	ed 91       	ld	r30, X+
    5294:	fc 91       	ld	r31, X
    5296:	57 97       	sbiw	r26, 0x17	; 23
    5298:	30 97       	sbiw	r30, 0x00	; 0
    529a:	49 f0       	breq	.+18     	; 0x52ae <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE14launchCallbackEv+0x20e>
    529c:	09 95       	icall
    529e:	08 95       	ret

        case SystemReset:           if (mSystemResetCallback != 0)           mSystemResetCallback();    break;
    52a0:	92 96       	adiw	r26, 0x22	; 34
    52a2:	ed 91       	ld	r30, X+
    52a4:	fc 91       	ld	r31, X
    52a6:	93 97       	sbiw	r26, 0x23	; 35
    52a8:	30 97       	sbiw	r30, 0x00	; 0
    52aa:	09 f0       	breq	.+2      	; 0x52ae <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE14launchCallbackEv+0x20e>
    52ac:	09 95       	icall
    52ae:	08 95       	ret

000052b0 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh>:
// - All system messages (System Exclusive, Common and Real Time) are passed
//   to output unless filter is set to Off.
// - Channel messages are passed to the output whether their channel
//   is matching the input channel and the filter setting
template<class SerialPort, class Settings>
void MidiInterface<SerialPort, Settings>::thruFilter(Channel inChannel)
    52b0:	ef 92       	push	r14
    52b2:	ff 92       	push	r15
    52b4:	0f 93       	push	r16
    52b6:	1f 93       	push	r17
    52b8:	cf 93       	push	r28
    52ba:	df 93       	push	r29
    52bc:	fc 01       	movw	r30, r24
{
    // If the feature is disabled, don't do anything.
    if (!mThruActivated || (mThruFilterMode == Thru::Off))
    52be:	94 a9       	ldd	r25, Z+52	; 0x34
    52c0:	29 2f       	mov	r18, r25
    52c2:	21 70       	andi	r18, 0x01	; 1
    52c4:	90 ff       	sbrs	r25, 0
    52c6:	ea c0       	rjmp	.+468    	; 0x549c <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh+0x1ec>
    52c8:	89 2f       	mov	r24, r25
    52ca:	8e 7f       	andi	r24, 0xFE	; 254
    52cc:	09 f4       	brne	.+2      	; 0x52d0 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh+0x20>
    52ce:	e6 c0       	rjmp	.+460    	; 0x549c <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh+0x1ec>
    52d0:	ef 01       	movw	r28, r30
        return;

    // First, check if the received message is Channel
    if (mMessage.type >= NoteOff && mMessage.type <= PitchBend)
    52d2:	36 a9       	ldd	r19, Z+54	; 0x36
    52d4:	80 e8       	ldi	r24, 0x80	; 128
    52d6:	83 0f       	add	r24, r19
    52d8:	81 36       	cpi	r24, 0x61	; 97
    52da:	48 f5       	brcc	.+82     	; 0x532e <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh+0x7e>
    {
        const bool filter_condition = ((mMessage.channel == inChannel) ||
    52dc:	05 a9       	ldd	r16, Z+53	; 0x35
                                       (inChannel == MIDI_CHANNEL_OMNI));
    52de:	06 17       	cp	r16, r22
    52e0:	09 f4       	brne	.+2      	; 0x52e4 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh+0x34>
    52e2:	d1 c0       	rjmp	.+418    	; 0x5486 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh+0x1d6>

        // Now let's pass it to the output
        switch (mThruFilterMode)
    52e4:	89 2f       	mov	r24, r25
    52e6:	86 95       	lsr	r24
    52e8:	82 30       	cpi	r24, 0x02	; 2
    52ea:	61 f0       	breq	.+24     	; 0x5304 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh+0x54>
    52ec:	83 30       	cpi	r24, 0x03	; 3
    52ee:	99 f0       	breq	.+38     	; 0x5316 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh+0x66>
    52f0:	81 30       	cpi	r24, 0x01	; 1
    52f2:	09 f0       	breq	.+2      	; 0x52f6 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh+0x46>
    52f4:	d3 c0       	rjmp	.+422    	; 0x549c <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh+0x1ec>
        {
            case Thru::Full:
                send(mMessage.type,
    52f6:	28 ad       	ldd	r18, Y+56	; 0x38
    52f8:	4f a9       	ldd	r20, Y+55	; 0x37
    52fa:	63 2f       	mov	r22, r19
    52fc:	ce 01       	movw	r24, r28
    52fe:	0e 94 1c 26 	call	0x4c38	; 0x4c38 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE4sendENS_8MidiTypeEhhh>
                     mMessage.data1,
                     mMessage.data2,
                     mMessage.channel);
                break;
    5302:	cc c0       	rjmp	.+408    	; 0x549c <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh+0x1ec>

            case Thru::SameChannel:
                if (filter_condition)
    5304:	61 11       	cpse	r22, r1
    5306:	ca c0       	rjmp	.+404    	; 0x549c <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh+0x1ec>
                {
                    send(mMessage.type,
    5308:	28 ad       	ldd	r18, Y+56	; 0x38
    530a:	4f a9       	ldd	r20, Y+55	; 0x37
    530c:	63 2f       	mov	r22, r19
    530e:	ce 01       	movw	r24, r28
    5310:	0e 94 1c 26 	call	0x4c38	; 0x4c38 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE4sendENS_8MidiTypeEhhh>
    5314:	c3 c0       	rjmp	.+390    	; 0x549c <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh+0x1ec>

    // First, check if the received message is Channel
    if (mMessage.type >= NoteOff && mMessage.type <= PitchBend)
    {
        const bool filter_condition = ((mMessage.channel == inChannel) ||
                                       (inChannel == MIDI_CHANNEL_OMNI));
    5316:	21 e0       	ldi	r18, 0x01	; 1
    5318:	61 11       	cpse	r22, r1
    531a:	20 e0       	ldi	r18, 0x00	; 0
                         mMessage.channel);
                }
                break;

            case Thru::DifferentChannel:
                if (!filter_condition)
    531c:	21 11       	cpse	r18, r1
    531e:	be c0       	rjmp	.+380    	; 0x549c <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh+0x1ec>
                {
                    send(mMessage.type,
    5320:	28 ad       	ldd	r18, Y+56	; 0x38
    5322:	4f a9       	ldd	r20, Y+55	; 0x37
    5324:	63 2f       	mov	r22, r19
    5326:	ce 01       	movw	r24, r28
    5328:	0e 94 1c 26 	call	0x4c38	; 0x4c38 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE4sendENS_8MidiTypeEhhh>
    532c:	b7 c0       	rjmp	.+366    	; 0x549c <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh+0x1ec>
        }
    }
    else
    {
        // Send the message to the output
        switch (mMessage.type)
    532e:	83 2f       	mov	r24, r19
    5330:	90 e0       	ldi	r25, 0x00	; 0
    5332:	fc 01       	movw	r30, r24
    5334:	e0 5f       	subi	r30, 0xF0	; 240
    5336:	f1 09       	sbc	r31, r1
    5338:	e0 31       	cpi	r30, 0x10	; 16
    533a:	f1 05       	cpc	r31, r1
    533c:	08 f0       	brcs	.+2      	; 0x5340 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh+0x90>
    533e:	ae c0       	rjmp	.+348    	; 0x549c <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh+0x1ec>
    5340:	ec 54       	subi	r30, 0x4C	; 76
    5342:	fe 4f       	sbci	r31, 0xFE	; 254
    5344:	0c 94 58 37 	jmp	0x6eb0	; 0x6eb0 <__tablejump2__>
void MidiInterface<SerialPort, Settings>::sendRealTime(MidiType inType)
{
    // Do not invalidate Running Status for real-time messages
    // as they can be interleaved within any message.

    switch (inType)
    5348:	3d 3f       	cpi	r19, 0xFD	; 253
    534a:	30 f4       	brcc	.+12     	; 0x5358 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh+0xa8>
    534c:	3a 3f       	cpi	r19, 0xFA	; 250
    534e:	38 f4       	brcc	.+14     	; 0x535e <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh+0xae>
    5350:	38 3f       	cpi	r19, 0xF8	; 248
    5352:	09 f0       	breq	.+2      	; 0x5356 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh+0xa6>
    5354:	a3 c0       	rjmp	.+326    	; 0x549c <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh+0x1ec>
    5356:	03 c0       	rjmp	.+6      	; 0x535e <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh+0xae>
    5358:	3e 3f       	cpi	r19, 0xFE	; 254
    535a:	08 f4       	brcc	.+2      	; 0x535e <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh+0xae>
    535c:	9f c0       	rjmp	.+318    	; 0x549c <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh+0x1ec>
        case Start:
        case Stop:
        case Continue:
        case ActiveSensing:
        case SystemReset:
            mSerial.write((byte)inType);
    535e:	8c a1       	ldd	r24, Y+36	; 0x24
    5360:	9d a1       	ldd	r25, Y+37	; 0x25
    5362:	dc 01       	movw	r26, r24
    5364:	ed 91       	ld	r30, X+
    5366:	fc 91       	ld	r31, X
    5368:	01 90       	ld	r0, Z+
    536a:	f0 81       	ld	r31, Z
    536c:	e0 2d       	mov	r30, r0
    536e:	63 2f       	mov	r22, r19
    5370:	09 95       	icall
    5372:	94 c0       	rjmp	.+296    	; 0x549c <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh+0x1ec>
 @see getSysExArrayLength to get the array's length in bytes.
 */
template<class SerialPort, class Settings>
inline const byte* MidiInterface<SerialPort, Settings>::getSysExArray() const
{
    return mMessage.sysexArray;
    5374:	7e 01       	movw	r14, r28
    5376:	b9 e3       	ldi	r27, 0x39	; 57
    5378:	eb 0e       	add	r14, r27
    537a:	f1 1c       	adc	r15, r1
    537c:	88 ad       	ldd	r24, Y+56	; 0x38
    537e:	90 e0       	ldi	r25, 0x00	; 0
    5380:	98 2f       	mov	r25, r24
    5382:	88 27       	eor	r24, r24
    5384:	2f a9       	ldd	r18, Y+55	; 0x37
    5386:	82 2b       	or	r24, r18
    5388:	81 38       	cpi	r24, 0x81	; 129
    538a:	91 05       	cpc	r25, r1
    538c:	10 f0       	brcs	.+4      	; 0x5392 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh+0xe2>
    538e:	80 e8       	ldi	r24, 0x80	; 128
    5390:	90 e0       	ldi	r25, 0x00	; 0
    if (writeBeginEndBytes)
    {
        mSerial.write(0xf0);
    }

    for (unsigned i = 0; i < inLength; ++i)
    5392:	00 97       	sbiw	r24, 0x00	; 0
    5394:	09 f4       	brne	.+2      	; 0x5398 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh+0xe8>
    5396:	82 c0       	rjmp	.+260    	; 0x549c <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh+0x1ec>
    5398:	87 01       	movw	r16, r14
    539a:	e8 0e       	add	r14, r24
    539c:	f9 1e       	adc	r15, r25
    {
        mSerial.write(inArray[i]);
    539e:	8c a1       	ldd	r24, Y+36	; 0x24
    53a0:	9d a1       	ldd	r25, Y+37	; 0x25
    53a2:	f8 01       	movw	r30, r16
    53a4:	61 91       	ld	r22, Z+
    53a6:	8f 01       	movw	r16, r30
    53a8:	dc 01       	movw	r26, r24
    53aa:	ed 91       	ld	r30, X+
    53ac:	fc 91       	ld	r31, X
    53ae:	01 90       	ld	r0, Z+
    53b0:	f0 81       	ld	r31, Z
    53b2:	e0 2d       	mov	r30, r0
    53b4:	09 95       	icall
    if (writeBeginEndBytes)
    {
        mSerial.write(0xf0);
    }

    for (unsigned i = 0; i < inLength; ++i)
    53b6:	e0 16       	cp	r14, r16
    53b8:	f1 06       	cpc	r15, r17
    53ba:	89 f7       	brne	.-30     	; 0x539e <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh+0xee>
    53bc:	6f c0       	rjmp	.+222    	; 0x549c <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh+0x1ec>
                // Send SysEx (0xf0 and 0xf7 are included in the buffer)
                sendSysEx(getSysExArrayLength(), getSysExArray(), true);
                break;

            case SongSelect:
                sendSongSelect(mMessage.data1);
    53be:	1f a9       	ldd	r17, Y+55	; 0x37

/*! \brief Send a Song Select message */
template<class SerialPort, class Settings>
void MidiInterface<SerialPort, Settings>::sendSongSelect(DataByte inSongNumber)
{
    mSerial.write((byte)SongSelect);
    53c0:	8c a1       	ldd	r24, Y+36	; 0x24
    53c2:	9d a1       	ldd	r25, Y+37	; 0x25
    53c4:	dc 01       	movw	r26, r24
    53c6:	ed 91       	ld	r30, X+
    53c8:	fc 91       	ld	r31, X
    53ca:	01 90       	ld	r0, Z+
    53cc:	f0 81       	ld	r31, Z
    53ce:	e0 2d       	mov	r30, r0
    53d0:	63 ef       	ldi	r22, 0xF3	; 243
    53d2:	09 95       	icall
    mSerial.write(inSongNumber & 0x7f);
    53d4:	8c a1       	ldd	r24, Y+36	; 0x24
    53d6:	9d a1       	ldd	r25, Y+37	; 0x25
    virtual void flush(void);
    virtual size_t write(uint8_t);
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    53d8:	61 2f       	mov	r22, r17
    53da:	6f 77       	andi	r22, 0x7F	; 127
    53dc:	dc 01       	movw	r26, r24
    53de:	ed 91       	ld	r30, X+
    53e0:	fc 91       	ld	r31, X
    53e2:	01 90       	ld	r0, Z+
    53e4:	f0 81       	ld	r31, Z
    53e6:	e0 2d       	mov	r30, r0
    53e8:	09 95       	icall
    53ea:	58 c0       	rjmp	.+176    	; 0x549c <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh+0x1ec>
            case SongSelect:
                sendSongSelect(mMessage.data1);
                break;

            case SongPosition:
                sendSongPosition(mMessage.data1 | ((unsigned)mMessage.data2 << 7));
    53ec:	08 ad       	ldd	r16, Y+56	; 0x38
    53ee:	b0 e8       	ldi	r27, 0x80	; 128
    53f0:	0b 9f       	mul	r16, r27
    53f2:	80 01       	movw	r16, r0
    53f4:	11 24       	eor	r1, r1
    53f6:	8f a9       	ldd	r24, Y+55	; 0x37
    53f8:	08 2b       	or	r16, r24
 \param inBeats    The number of beats since the start of the song.
 */
template<class SerialPort, class Settings>
void MidiInterface<SerialPort, Settings>::sendSongPosition(unsigned inBeats)
{
    mSerial.write((byte)SongPosition);
    53fa:	8c a1       	ldd	r24, Y+36	; 0x24
    53fc:	9d a1       	ldd	r25, Y+37	; 0x25
    53fe:	dc 01       	movw	r26, r24
    5400:	ed 91       	ld	r30, X+
    5402:	fc 91       	ld	r31, X
    5404:	01 90       	ld	r0, Z+
    5406:	f0 81       	ld	r31, Z
    5408:	e0 2d       	mov	r30, r0
    540a:	62 ef       	ldi	r22, 0xF2	; 242
    540c:	09 95       	icall
    mSerial.write(inBeats & 0x7f);
    540e:	8c a1       	ldd	r24, Y+36	; 0x24
    5410:	9d a1       	ldd	r25, Y+37	; 0x25
    virtual int availableForWrite(void);
    virtual void flush(void);
    virtual size_t write(uint8_t);
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    5412:	b8 01       	movw	r22, r16
    5414:	6f 77       	andi	r22, 0x7F	; 127
    5416:	77 27       	eor	r23, r23
    5418:	dc 01       	movw	r26, r24
    541a:	ed 91       	ld	r30, X+
    541c:	fc 91       	ld	r31, X
    541e:	01 90       	ld	r0, Z+
    5420:	f0 81       	ld	r31, Z
    5422:	e0 2d       	mov	r30, r0
    5424:	09 95       	icall
    mSerial.write((inBeats >> 7) & 0x7f);
    5426:	8c a1       	ldd	r24, Y+36	; 0x24
    5428:	9d a1       	ldd	r25, Y+37	; 0x25
    542a:	b8 01       	movw	r22, r16
    542c:	66 0f       	add	r22, r22
    542e:	67 2f       	mov	r22, r23
    5430:	66 1f       	adc	r22, r22
    5432:	77 0b       	sbc	r23, r23
    5434:	71 95       	neg	r23
    5436:	6f 77       	andi	r22, 0x7F	; 127
    5438:	77 27       	eor	r23, r23
    543a:	dc 01       	movw	r26, r24
    543c:	ed 91       	ld	r30, X+
    543e:	fc 91       	ld	r31, X
    5440:	01 90       	ld	r0, Z+
    5442:	f0 81       	ld	r31, Z
    5444:	e0 2d       	mov	r30, r0
    5446:	09 95       	icall
    5448:	29 c0       	rjmp	.+82     	; 0x549c <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh+0x1ec>
 */
template<class SerialPort, class Settings>
void MidiInterface<SerialPort, Settings>::sendTimeCodeQuarterFrame(DataByte inTypeNibble,
                                                                   DataByte inValuesNibble)
{
    const byte data = (((inTypeNibble & 0x07) << 4) | (inValuesNibble & 0x0f));
    544a:	8f a9       	ldd	r24, Y+55	; 0x37
    544c:	87 70       	andi	r24, 0x07	; 7
    544e:	b0 e1       	ldi	r27, 0x10	; 16
    5450:	8b 9f       	mul	r24, r27
    5452:	c0 01       	movw	r24, r0
    5454:	11 24       	eor	r1, r1
    5456:	18 ad       	ldd	r17, Y+56	; 0x38
    5458:	1f 70       	andi	r17, 0x0F	; 15
    545a:	18 2b       	or	r17, r24
                you can send the byte here.
 */
template<class SerialPort, class Settings>
void MidiInterface<SerialPort, Settings>::sendTimeCodeQuarterFrame(DataByte inData)
{
    mSerial.write((byte)TimeCodeQuarterFrame);
    545c:	8c a1       	ldd	r24, Y+36	; 0x24
    545e:	9d a1       	ldd	r25, Y+37	; 0x25
    5460:	dc 01       	movw	r26, r24
    5462:	ed 91       	ld	r30, X+
    5464:	fc 91       	ld	r31, X
    5466:	01 90       	ld	r0, Z+
    5468:	f0 81       	ld	r31, Z
    546a:	e0 2d       	mov	r30, r0
    546c:	61 ef       	ldi	r22, 0xF1	; 241
    546e:	09 95       	icall
    mSerial.write(inData);
    5470:	8c a1       	ldd	r24, Y+36	; 0x24
    5472:	9d a1       	ldd	r25, Y+37	; 0x25
    5474:	dc 01       	movw	r26, r24
    5476:	ed 91       	ld	r30, X+
    5478:	fc 91       	ld	r31, X
    547a:	01 90       	ld	r0, Z+
    547c:	f0 81       	ld	r31, Z
    547e:	e0 2d       	mov	r30, r0
    5480:	61 2f       	mov	r22, r17
    5482:	09 95       	icall
    5484:	0b c0       	rjmp	.+22     	; 0x549c <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh+0x1ec>
    {
        const bool filter_condition = ((mMessage.channel == inChannel) ||
                                       (inChannel == MIDI_CHANNEL_OMNI));

        // Now let's pass it to the output
        switch (mThruFilterMode)
    5486:	84 a9       	ldd	r24, Z+52	; 0x34
    5488:	86 95       	lsr	r24
    548a:	82 30       	cpi	r24, 0x02	; 2
    548c:	09 f4       	brne	.+2      	; 0x5490 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh+0x1e0>
    548e:	3c cf       	rjmp	.-392    	; 0x5308 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh+0x58>
    5490:	83 30       	cpi	r24, 0x03	; 3
    5492:	09 f4       	brne	.+2      	; 0x5496 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh+0x1e6>
    5494:	43 cf       	rjmp	.-378    	; 0x531c <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh+0x6c>
    5496:	81 30       	cpi	r24, 0x01	; 1
    5498:	09 f4       	brne	.+2      	; 0x549c <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh+0x1ec>
    549a:	2d cf       	rjmp	.-422    	; 0x52f6 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh+0x46>

            default:
                break; // LCOV_EXCL_LINE - Unreacheable code, but prevents unhandled case warning.
        }
    }
}
    549c:	df 91       	pop	r29
    549e:	cf 91       	pop	r28
    54a0:	1f 91       	pop	r17
    54a2:	0f 91       	pop	r16
    54a4:	ff 90       	pop	r15
    54a6:	ef 90       	pop	r14
    54a8:	08 95       	ret

000054aa <_Z12getSplitNoteRhRb>:
	tft.stroke(0,0,0);
	tft.textSize(2);	
}

void getSplitNote(byte &splitNote, bool &split)
{
    54aa:	cf 92       	push	r12
    54ac:	df 92       	push	r13
    54ae:	ef 92       	push	r14
    54b0:	ff 92       	push	r15
    54b2:	0f 93       	push	r16
    54b4:	1f 93       	push	r17
    54b6:	cf 93       	push	r28
    54b8:	df 93       	push	r29
    54ba:	6c 01       	movw	r12, r24
    54bc:	7b 01       	movw	r14, r22
 @see see setInputChannel()
 */
template<class SerialPort, class Settings>
inline bool MidiInterface<SerialPort, Settings>::read()
{
    return read(mInputChannel);
    54be:	cb e1       	ldi	r28, 0x1B	; 27
    54c0:	d3 e0       	ldi	r29, 0x03	; 3
inline void MidiInterface<SerialPort, Settings>::handleNullVelocityNoteOnAsNoteOff()
{
    if (Settings::HandleNullVelocityNoteOnAsNoteOff &&
        getType() == NoteOn && getData2() == 0)
    {
        mMessage.type = NoteOff;
    54c2:	00 e8       	ldi	r16, 0x80	; 128
	while(digitalRead(PIN_BTN1) == HIGH){
    54c4:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <PIN_BTN1>
    54c8:	0e 94 ec 36 	call	0x6dd8	; 0x6dd8 <digitalRead>
    54cc:	01 97       	sbiw	r24, 0x01	; 1
    54ce:	79 f5       	brne	.+94     	; 0x552e <_Z12getSplitNoteRhRb+0x84>
 @see see setInputChannel()
 */
template<class SerialPort, class Settings>
inline bool MidiInterface<SerialPort, Settings>::read()
{
    return read(mInputChannel);
    54d0:	1e a1       	ldd	r17, Y+38	; 0x26
/*! \brief Read messages on a specified channel.
 */
template<class SerialPort, class Settings>
inline bool MidiInterface<SerialPort, Settings>::read(Channel inChannel)
{
    if (inChannel >= MIDI_CHANNEL_OFF)
    54d2:	11 31       	cpi	r17, 0x11	; 17
    54d4:	b8 f7       	brcc	.-18     	; 0x54c4 <_Z12getSplitNoteRhRb+0x1a>
        return false; // MIDI Input disabled.

    if (!parse())
    54d6:	ce 01       	movw	r24, r28
    54d8:	0e 94 cc 26 	call	0x4d98	; 0x4d98 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv>
    54dc:	88 23       	and	r24, r24
    54de:	91 f3       	breq	.-28     	; 0x54c4 <_Z12getSplitNoteRhRb+0x1a>
 Returns an enumerated type. @see MidiType
 */
template<class SerialPort, class Settings>
inline MidiType MidiInterface<SerialPort, Settings>::getType() const
{
    return mMessage.type;
    54e0:	8e a9       	ldd	r24, Y+54	; 0x36

// Private method, see midi_Settings.h for documentation
template<class SerialPort, class Settings>
inline void MidiInterface<SerialPort, Settings>::handleNullVelocityNoteOnAsNoteOff()
{
    if (Settings::HandleNullVelocityNoteOnAsNoteOff &&
    54e2:	80 39       	cpi	r24, 0x90	; 144
    54e4:	29 f4       	brne	.+10     	; 0x54f0 <_Z12getSplitNoteRhRb+0x46>
    54e6:	88 ad       	ldd	r24, Y+56	; 0x38
    54e8:	81 11       	cpse	r24, r1
    54ea:	05 c0       	rjmp	.+10     	; 0x54f6 <_Z12getSplitNoteRhRb+0x4c>
        getType() == NoteOn && getData2() == 0)
    {
        mMessage.type = NoteOff;
    54ec:	0e ab       	std	Y+54, r16	; 0x36
    54ee:	03 c0       	rjmp	.+6      	; 0x54f6 <_Z12getSplitNoteRhRb+0x4c>
{
    // This method handles recognition of channel
    // (to know if the message is destinated to the Arduino)

    // First, check if the received message is Channel
    if (mMessage.type >= NoteOff && mMessage.type <= PitchBend)
    54f0:	80 58       	subi	r24, 0x80	; 128
    54f2:	81 36       	cpi	r24, 0x61	; 97
    54f4:	28 f4       	brcc	.+10     	; 0x5500 <_Z12getSplitNoteRhRb+0x56>
    {
        // Then we need to know if we listen to it
        if ((mMessage.channel == inChannel) ||
    54f6:	8d a9       	ldd	r24, Y+53	; 0x35
    54f8:	18 17       	cp	r17, r24
    54fa:	11 f0       	breq	.+4      	; 0x5500 <_Z12getSplitNoteRhRb+0x56>
        return false;

    handleNullVelocityNoteOnAsNoteOff();
    const bool channelMatch = inputFilter(inChannel);

    if (channelMatch)
    54fc:	11 11       	cpse	r17, r1
    54fe:	12 c0       	rjmp	.+36     	; 0x5524 <_Z12getSplitNoteRhRb+0x7a>
    {
        launchCallback();
    5500:	ce 01       	movw	r24, r28
    5502:	0e 94 50 28 	call	0x50a0	; 0x50a0 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE14launchCallbackEv>
    }

    thruFilter(inChannel);
    5506:	61 2f       	mov	r22, r17
    5508:	ce 01       	movw	r24, r28
    550a:	0e 94 58 29 	call	0x52b0	; 0x52b0 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh>
	if(MIDI.read() && MIDI.getType() == midi::NoteOn){
    550e:	8e a9       	ldd	r24, Y+54	; 0x36
    5510:	80 39       	cpi	r24, 0x90	; 144
    5512:	c1 f6       	brne	.-80     	; 0x54c4 <_Z12getSplitNoteRhRb+0x1a>

/*! \brief Get the first data byte of the last received message. */
template<class SerialPort, class Settings>
inline DataByte MidiInterface<SerialPort, Settings>::getData1() const
{
    return mMessage.data1;
    5514:	80 91 52 03 	lds	r24, 0x0352	; 0x800352 <MIDI+0x37>
			splitNote = MIDI.getData1();							
    5518:	f6 01       	movw	r30, r12
    551a:	80 83       	st	Z, r24
			split = true;
    551c:	81 e0       	ldi	r24, 0x01	; 1
    551e:	f7 01       	movw	r30, r14
    5520:	80 83       	st	Z, r24
			break;
		}
	}	
}
    5522:	05 c0       	rjmp	.+10     	; 0x552e <_Z12getSplitNoteRhRb+0x84>
    if (channelMatch)
    {
        launchCallback();
    }

    thruFilter(inChannel);
    5524:	61 2f       	mov	r22, r17
    5526:	ce 01       	movw	r24, r28
    5528:	0e 94 58 29 	call	0x52b0	; 0x52b0 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh>
    552c:	cb cf       	rjmp	.-106    	; 0x54c4 <_Z12getSplitNoteRhRb+0x1a>
    552e:	df 91       	pop	r29
    5530:	cf 91       	pop	r28
    5532:	1f 91       	pop	r17
    5534:	0f 91       	pop	r16
    5536:	ff 90       	pop	r15
    5538:	ef 90       	pop	r14
    553a:	df 90       	pop	r13
    553c:	cf 90       	pop	r12
    553e:	08 95       	ret

00005540 <_Z13processEventsv>:
	MIDI.sendControlChange(midi::BankSelect,currentBank[RIGHT],1);
	MIDI.sendProgramChange(currentProgram[RIGHT],1);
}

void processEvents()
{
    5540:	cf 92       	push	r12
    5542:	df 92       	push	r13
    5544:	ef 92       	push	r14
    5546:	ff 92       	push	r15
    5548:	0f 93       	push	r16
    554a:	1f 93       	push	r17
    554c:	cf 93       	push	r28
    554e:	df 93       	push	r29
	static uint8_t currentHand = RIGHT;
	static bool split = false;
	static bool midiThru = false;
	static uint8_t currentPreset = 0;
	
	readinputs(&newdata,NUM_OF_FAMILIES,family_sounds[currentFamily[currentHand]]);
    5550:	e0 91 1a 03 	lds	r30, 0x031A	; 0x80031a <_ZZ13processEventsvE13currentFamily+0x1>
    5554:	f0 e0       	ldi	r31, 0x00	; 0
    5556:	e0 50       	subi	r30, 0x00	; 0
    5558:	ff 4f       	sbci	r31, 0xFF	; 255
    555a:	40 81       	ld	r20, Z
    555c:	6d e0       	ldi	r22, 0x0D	; 13
    555e:	86 e1       	ldi	r24, 0x16	; 22
    5560:	94 e0       	ldi	r25, 0x04	; 4
    5562:	0e 94 6f 18 	call	0x30de	; 0x30de <_Z10readinputsP11inputStateshh>
	currentInput = compareinputs(&lastdata,&newdata);
    5566:	66 e1       	ldi	r22, 0x16	; 22
    5568:	74 e0       	ldi	r23, 0x04	; 4
    556a:	8c e1       	ldi	r24, 0x1C	; 28
    556c:	94 e0       	ldi	r25, 0x04	; 4
    556e:	0e 94 20 19 	call	0x3240	; 0x3240 <_Z13compareinputsP11inputStatesS0_>
	
	if(currentInput != NONE){
    5572:	8f 3f       	cpi	r24, 0xFF	; 255
    5574:	09 f4       	brne	.+2      	; 0x5578 <_Z13processEventsv+0x38>
    5576:	da c1       	rjmp	.+948    	; 0x592c <_Z13processEventsv+0x3ec>
				
		switch(currentInput){
    5578:	82 30       	cpi	r24, 0x02	; 2
    557a:	09 f4       	brne	.+2      	; 0x557e <_Z13processEventsv+0x3e>
    557c:	e4 c0       	rjmp	.+456    	; 0x5746 <_Z13processEventsv+0x206>
    557e:	30 f4       	brcc	.+12     	; 0x558c <_Z13processEventsv+0x4c>
    5580:	88 23       	and	r24, r24
    5582:	69 f1       	breq	.+90     	; 0x55de <_Z13processEventsv+0x9e>
    5584:	81 30       	cpi	r24, 0x01	; 1
    5586:	09 f4       	brne	.+2      	; 0x558a <_Z13processEventsv+0x4a>
    5588:	75 c0       	rjmp	.+234    	; 0x5674 <_Z13processEventsv+0x134>
    558a:	7a c1       	rjmp	.+756    	; 0x5880 <_Z13processEventsv+0x340>
    558c:	84 30       	cpi	r24, 0x04	; 4
    558e:	29 f0       	breq	.+10     	; 0x559a <_Z13processEventsv+0x5a>
    5590:	a8 f0       	brcs	.+42     	; 0x55bc <_Z13processEventsv+0x7c>
    5592:	85 30       	cpi	r24, 0x05	; 5
    5594:	09 f4       	brne	.+2      	; 0x5598 <_Z13processEventsv+0x58>
    5596:	23 c1       	rjmp	.+582    	; 0x57de <_Z13processEventsv+0x29e>
    5598:	73 c1       	rjmp	.+742    	; 0x5880 <_Z13processEventsv+0x340>
			case POT1: 
					if(currentMode == FAMILY_SELECT_RIGHT)
    559a:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <_ZZ13processEventsvE11currentMode>
    559e:	81 30       	cpi	r24, 0x01	; 1
    55a0:	29 f4       	brne	.+10     	; 0x55ac <_Z13processEventsv+0x6c>
						currentFamily[RIGHT] = newdata.pot[1];
    55a2:	80 91 1b 04 	lds	r24, 0x041B	; 0x80041b <newdata+0x5>
    55a6:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <_ZZ13processEventsvE13currentFamily+0x1>
    55aa:	49 c2       	rjmp	.+1170   	; 0x5a3e <_Z13processEventsv+0x4fe>
					else if(currentMode == FAMILY_SELECT_LEFT)
    55ac:	83 30       	cpi	r24, 0x03	; 3
    55ae:	09 f0       	breq	.+2      	; 0x55b2 <_Z13processEventsv+0x72>
    55b0:	46 c2       	rjmp	.+1164   	; 0x5a3e <_Z13processEventsv+0x4fe>
						currentFamily[LEFT] = newdata.pot[1];
    55b2:	80 91 1b 04 	lds	r24, 0x041B	; 0x80041b <newdata+0x5>
    55b6:	80 93 19 03 	sts	0x0319, r24	; 0x800319 <_ZZ13processEventsvE13currentFamily>
    55ba:	41 c2       	rjmp	.+1154   	; 0x5a3e <_Z13processEventsv+0x4fe>
					break;
			case POT0:  
					if(currentMode == SOUND_SELECT_RIGHT)
    55bc:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <_ZZ13processEventsvE11currentMode>
    55c0:	82 30       	cpi	r24, 0x02	; 2
    55c2:	29 f4       	brne	.+10     	; 0x55ce <_Z13processEventsv+0x8e>
						currentFamilyIndex[RIGHT] = newdata.pot[0];
    55c4:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <newdata+0x4>
    55c8:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <_ZZ13processEventsvE18currentFamilyIndex+0x1>
    55cc:	38 c2       	rjmp	.+1136   	; 0x5a3e <_Z13processEventsv+0x4fe>
					else if(currentMode == SOUND_SELECT_LEFT)
    55ce:	84 30       	cpi	r24, 0x04	; 4
    55d0:	09 f0       	breq	.+2      	; 0x55d4 <_Z13processEventsv+0x94>
    55d2:	35 c2       	rjmp	.+1130   	; 0x5a3e <_Z13processEventsv+0x4fe>
						currentFamilyIndex[LEFT] = newdata.pot[0];
    55d4:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <newdata+0x4>
    55d8:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <_ZZ13processEventsvE18currentFamilyIndex>
    55dc:	30 c2       	rjmp	.+1120   	; 0x5a3e <_Z13processEventsv+0x4fe>
					break;
			case BUTTON0:
					if(currentMode == PRESET_SELECT){
    55de:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <_ZZ13processEventsvE11currentMode>
    55e2:	85 30       	cpi	r24, 0x05	; 5
    55e4:	11 f5       	brne	.+68     	; 0x562a <_Z13processEventsv+0xea>
						currentPreset = PREV_PRESET(currentPreset);
    55e6:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <_ZZ13processEventsvE13currentPreset>
    55ea:	81 11       	cpse	r24, r1
    55ec:	81 50       	subi	r24, 0x01	; 1
    55ee:	80 93 15 03 	sts	0x0315, r24	; 0x800315 <_ZZ13processEventsvE13currentPreset>
						loadPreset(currentPreset,currentFamily,currentFamilyIndex,currentBank,currentProgram,&split,&splitNote);						
    55f2:	0f 2e       	mov	r0, r31
    55f4:	ff e0       	ldi	r31, 0x0F	; 15
    55f6:	cf 2e       	mov	r12, r31
    55f8:	f3 e0       	ldi	r31, 0x03	; 3
    55fa:	df 2e       	mov	r13, r31
    55fc:	f0 2d       	mov	r31, r0
    55fe:	0f 2e       	mov	r0, r31
    5600:	f0 e1       	ldi	r31, 0x10	; 16
    5602:	ef 2e       	mov	r14, r31
    5604:	f3 e0       	ldi	r31, 0x03	; 3
    5606:	ff 2e       	mov	r15, r31
    5608:	f0 2d       	mov	r31, r0
    560a:	01 e1       	ldi	r16, 0x11	; 17
    560c:	13 e0       	ldi	r17, 0x03	; 3
    560e:	23 e1       	ldi	r18, 0x13	; 19
    5610:	33 e0       	ldi	r19, 0x03	; 3
    5612:	46 e1       	ldi	r20, 0x16	; 22
    5614:	53 e0       	ldi	r21, 0x03	; 3
    5616:	69 e1       	ldi	r22, 0x19	; 25
    5618:	73 e0       	ldi	r23, 0x03	; 3
    561a:	0e 94 90 26 	call	0x4d20	; 0x4d20 <_Z10loadPresethPhS_S_S_PbS_>
						showPresetList(currentPreset,BUTTON0);						
    561e:	60 e0       	ldi	r22, 0x00	; 0
    5620:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <_ZZ13processEventsvE13currentPreset>
    5624:	0e 94 9f 32 	call	0x653e	; 0x653e <_Z14showPresetListhh>
						break;
    5628:	81 c1       	rjmp	.+770    	; 0x592c <_Z13processEventsv+0x3ec>
					}
					currentMode = getNextMode(currentMode,split);
    562a:	60 91 10 03 	lds	r22, 0x0310	; 0x800310 <_ZZ13processEventsvE5split>
    562e:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <_Z11getNextModehh>
    5632:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <_ZZ13processEventsvE11currentMode>
					showScreenPart(currentFamily,currentProgram,currentBank,currentMode,RIGHT,midiThru);
    5636:	e0 90 0e 03 	lds	r14, 0x030E	; 0x80030e <_ZZ13processEventsvE8midiThru>
    563a:	01 e0       	ldi	r16, 0x01	; 1
    563c:	28 2f       	mov	r18, r24
    563e:	43 e1       	ldi	r20, 0x13	; 19
    5640:	53 e0       	ldi	r21, 0x03	; 3
    5642:	61 e1       	ldi	r22, 0x11	; 17
    5644:	73 e0       	ldi	r23, 0x03	; 3
    5646:	89 e1       	ldi	r24, 0x19	; 25
    5648:	93 e0       	ldi	r25, 0x03	; 3
    564a:	0e 94 78 32 	call	0x64f0	; 0x64f0 <_Z14showScreenPartPhS_S_hhb>
					if(split == true)
    564e:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <_ZZ13processEventsvE5split>
    5652:	88 23       	and	r24, r24
    5654:	09 f4       	brne	.+2      	; 0x5658 <_Z13processEventsv+0x118>
    5656:	6a c1       	rjmp	.+724    	; 0x592c <_Z13processEventsv+0x3ec>
						showScreenPart(currentFamily,currentProgram,currentBank,currentMode,LEFT,midiThru);							
    5658:	e0 90 0e 03 	lds	r14, 0x030E	; 0x80030e <_ZZ13processEventsvE8midiThru>
    565c:	00 e0       	ldi	r16, 0x00	; 0
    565e:	20 91 18 03 	lds	r18, 0x0318	; 0x800318 <_ZZ13processEventsvE11currentMode>
    5662:	43 e1       	ldi	r20, 0x13	; 19
    5664:	53 e0       	ldi	r21, 0x03	; 3
    5666:	61 e1       	ldi	r22, 0x11	; 17
    5668:	73 e0       	ldi	r23, 0x03	; 3
    566a:	89 e1       	ldi	r24, 0x19	; 25
    566c:	93 e0       	ldi	r25, 0x03	; 3
    566e:	0e 94 78 32 	call	0x64f0	; 0x64f0 <_Z14showScreenPartPhS_S_hhb>
    5672:	5c c1       	rjmp	.+696    	; 0x592c <_Z13processEventsv+0x3ec>
					break;				
			case BUTTON1:
					tft.background(ST7735_MAGENTA);
    5674:	6f e1       	ldi	r22, 0x1F	; 31
    5676:	78 ef       	ldi	r23, 0xF8	; 248
    5678:	8f ed       	ldi	r24, 0xDF	; 223
    567a:	93 e0       	ldi	r25, 0x03	; 3
    567c:	0e 94 13 1f 	call	0x3e26	; 0x3e26 <_ZN12Adafruit_GFX10backgroundEj>
					if(currentMode == PRESET_SELECT){
    5680:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <_ZZ13processEventsvE11currentMode>
    5684:	85 30       	cpi	r24, 0x05	; 5
    5686:	09 f5       	brne	.+66     	; 0x56ca <_Z13processEventsv+0x18a>
						currentMode = NONE_SELECT;
    5688:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <_ZZ13processEventsvE11currentMode>
						showScreenPart(currentFamily,currentProgram,currentBank,currentMode,RIGHT,midiThru);
    568c:	e0 90 0e 03 	lds	r14, 0x030E	; 0x80030e <_ZZ13processEventsvE8midiThru>
    5690:	01 e0       	ldi	r16, 0x01	; 1
    5692:	20 e0       	ldi	r18, 0x00	; 0
    5694:	43 e1       	ldi	r20, 0x13	; 19
    5696:	53 e0       	ldi	r21, 0x03	; 3
    5698:	61 e1       	ldi	r22, 0x11	; 17
    569a:	73 e0       	ldi	r23, 0x03	; 3
    569c:	89 e1       	ldi	r24, 0x19	; 25
    569e:	93 e0       	ldi	r25, 0x03	; 3
    56a0:	0e 94 78 32 	call	0x64f0	; 0x64f0 <_Z14showScreenPartPhS_S_hhb>
						if(split == true)
    56a4:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <_ZZ13processEventsvE5split>
    56a8:	88 23       	and	r24, r24
    56aa:	09 f4       	brne	.+2      	; 0x56ae <_Z13processEventsv+0x16e>
    56ac:	3f c1       	rjmp	.+638    	; 0x592c <_Z13processEventsv+0x3ec>
							showScreenPart(currentFamily,currentProgram,currentBank,currentMode,LEFT,midiThru);
    56ae:	e0 90 0e 03 	lds	r14, 0x030E	; 0x80030e <_ZZ13processEventsvE8midiThru>
    56b2:	00 e0       	ldi	r16, 0x00	; 0
    56b4:	20 91 18 03 	lds	r18, 0x0318	; 0x800318 <_ZZ13processEventsvE11currentMode>
    56b8:	43 e1       	ldi	r20, 0x13	; 19
    56ba:	53 e0       	ldi	r21, 0x03	; 3
    56bc:	61 e1       	ldi	r22, 0x11	; 17
    56be:	73 e0       	ldi	r23, 0x03	; 3
    56c0:	89 e1       	ldi	r24, 0x19	; 25
    56c2:	93 e0       	ldi	r25, 0x03	; 3
    56c4:	0e 94 78 32 	call	0x64f0	; 0x64f0 <_Z14showScreenPartPhS_S_hhb>
    56c8:	31 c1       	rjmp	.+610    	; 0x592c <_Z13processEventsv+0x3ec>
						break;
					}
					split = false;
    56ca:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <_ZZ13processEventsvE5split>
					splitNote = 0;					
    56ce:	10 92 0f 03 	sts	0x030F, r1	; 0x80030f <_ZZ13processEventsvE9splitNote>
					tft.text("Press note:",0,20);
    56d2:	24 e1       	ldi	r18, 0x14	; 20
    56d4:	30 e0       	ldi	r19, 0x00	; 0
    56d6:	40 e0       	ldi	r20, 0x00	; 0
    56d8:	50 e0       	ldi	r21, 0x00	; 0
    56da:	60 e0       	ldi	r22, 0x00	; 0
    56dc:	72 e0       	ldi	r23, 0x02	; 2
    56de:	8f ed       	ldi	r24, 0xDF	; 223
    56e0:	93 e0       	ldi	r25, 0x03	; 3
    56e2:	0e 94 39 1f 	call	0x3e72	; 0x3e72 <_ZN12Adafruit_GFX4textEPKcii>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    56e6:	2f ef       	ldi	r18, 0xFF	; 255
    56e8:	89 e6       	ldi	r24, 0x69	; 105
    56ea:	98 e1       	ldi	r25, 0x18	; 24
    56ec:	21 50       	subi	r18, 0x01	; 1
    56ee:	80 40       	sbci	r24, 0x00	; 0
    56f0:	90 40       	sbci	r25, 0x00	; 0
    56f2:	e1 f7       	brne	.-8      	; 0x56ec <_Z13processEventsv+0x1ac>
    56f4:	00 c0       	rjmp	.+0      	; 0x56f6 <_Z13processEventsv+0x1b6>
    56f6:	00 00       	nop
					_delay_ms(500);
					getSplitNote(splitNote, split);
    56f8:	60 e1       	ldi	r22, 0x10	; 16
    56fa:	73 e0       	ldi	r23, 0x03	; 3
    56fc:	8f e0       	ldi	r24, 0x0F	; 15
    56fe:	93 e0       	ldi	r25, 0x03	; 3
    5700:	0e 94 55 2a 	call	0x54aa	; 0x54aa <_Z12getSplitNoteRhRb>
					currentMode = NONE_SELECT;				
    5704:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <_ZZ13processEventsvE11currentMode>
					showScreenPart(currentFamily,currentProgram,currentBank,currentMode,RIGHT,midiThru);
    5708:	e0 90 0e 03 	lds	r14, 0x030E	; 0x80030e <_ZZ13processEventsvE8midiThru>
    570c:	01 e0       	ldi	r16, 0x01	; 1
    570e:	20 e0       	ldi	r18, 0x00	; 0
    5710:	43 e1       	ldi	r20, 0x13	; 19
    5712:	53 e0       	ldi	r21, 0x03	; 3
    5714:	61 e1       	ldi	r22, 0x11	; 17
    5716:	73 e0       	ldi	r23, 0x03	; 3
    5718:	89 e1       	ldi	r24, 0x19	; 25
    571a:	93 e0       	ldi	r25, 0x03	; 3
    571c:	0e 94 78 32 	call	0x64f0	; 0x64f0 <_Z14showScreenPartPhS_S_hhb>
					if(split == true)
    5720:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <_ZZ13processEventsvE5split>
    5724:	88 23       	and	r24, r24
    5726:	09 f4       	brne	.+2      	; 0x572a <_Z13processEventsv+0x1ea>
    5728:	01 c1       	rjmp	.+514    	; 0x592c <_Z13processEventsv+0x3ec>
						showScreenPart(currentFamily,currentProgram,currentBank,currentMode,LEFT,midiThru);					
    572a:	e0 90 0e 03 	lds	r14, 0x030E	; 0x80030e <_ZZ13processEventsvE8midiThru>
    572e:	00 e0       	ldi	r16, 0x00	; 0
    5730:	20 91 18 03 	lds	r18, 0x0318	; 0x800318 <_ZZ13processEventsvE11currentMode>
    5734:	43 e1       	ldi	r20, 0x13	; 19
    5736:	53 e0       	ldi	r21, 0x03	; 3
    5738:	61 e1       	ldi	r22, 0x11	; 17
    573a:	73 e0       	ldi	r23, 0x03	; 3
    573c:	89 e1       	ldi	r24, 0x19	; 25
    573e:	93 e0       	ldi	r25, 0x03	; 3
    5740:	0e 94 78 32 	call	0x64f0	; 0x64f0 <_Z14showScreenPartPhS_S_hhb>
    5744:	f3 c0       	rjmp	.+486    	; 0x592c <_Z13processEventsv+0x3ec>
					break;
			case BUTTON2:
					if(currentMode == PRESET_SELECT){
    5746:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <_ZZ13processEventsvE11currentMode>
    574a:	85 30       	cpi	r24, 0x05	; 5
    574c:	19 f5       	brne	.+70     	; 0x5794 <_Z13processEventsv+0x254>
						currentPreset = NEXT_PRESET(currentPreset);
    574e:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <_ZZ13processEventsvE13currentPreset>
    5752:	85 30       	cpi	r24, 0x05	; 5
    5754:	08 f4       	brcc	.+2      	; 0x5758 <_Z13processEventsv+0x218>
    5756:	8f 5f       	subi	r24, 0xFF	; 255
    5758:	80 93 15 03 	sts	0x0315, r24	; 0x800315 <_ZZ13processEventsvE13currentPreset>
						loadPreset(currentPreset,currentFamily,currentFamilyIndex,currentBank,currentProgram,&split,&splitNote);						
    575c:	0f 2e       	mov	r0, r31
    575e:	ff e0       	ldi	r31, 0x0F	; 15
    5760:	cf 2e       	mov	r12, r31
    5762:	f3 e0       	ldi	r31, 0x03	; 3
    5764:	df 2e       	mov	r13, r31
    5766:	f0 2d       	mov	r31, r0
    5768:	0f 2e       	mov	r0, r31
    576a:	f0 e1       	ldi	r31, 0x10	; 16
    576c:	ef 2e       	mov	r14, r31
    576e:	f3 e0       	ldi	r31, 0x03	; 3
    5770:	ff 2e       	mov	r15, r31
    5772:	f0 2d       	mov	r31, r0
    5774:	01 e1       	ldi	r16, 0x11	; 17
    5776:	13 e0       	ldi	r17, 0x03	; 3
    5778:	23 e1       	ldi	r18, 0x13	; 19
    577a:	33 e0       	ldi	r19, 0x03	; 3
    577c:	46 e1       	ldi	r20, 0x16	; 22
    577e:	53 e0       	ldi	r21, 0x03	; 3
    5780:	69 e1       	ldi	r22, 0x19	; 25
    5782:	73 e0       	ldi	r23, 0x03	; 3
    5784:	0e 94 90 26 	call	0x4d20	; 0x4d20 <_Z10loadPresethPhS_S_S_PbS_>
						showPresetList(currentPreset,BUTTON2);
    5788:	62 e0       	ldi	r22, 0x02	; 2
    578a:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <_ZZ13processEventsvE13currentPreset>
    578e:	0e 94 9f 32 	call	0x653e	; 0x653e <_Z14showPresetListhh>
						break;
    5792:	cc c0       	rjmp	.+408    	; 0x592c <_Z13processEventsv+0x3ec>
					}
					if(midiThru == false){
    5794:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <_ZZ13processEventsvE8midiThru>
    5798:	81 11       	cpse	r24, r1
    579a:	0f c0       	rjmp	.+30     	; 0x57ba <_Z13processEventsv+0x27a>
template<class SerialPort, class Settings>
void MidiInterface<SerialPort, Settings>::sendControlChange(DataByte inControlNumber,
                                                            DataByte inControlValue,
                                                            Channel inChannel)
{
    send(ControlChange, inControlNumber, inControlValue, inChannel);
    579c:	01 e0       	ldi	r16, 0x01	; 1
    579e:	20 e0       	ldi	r18, 0x00	; 0
    57a0:	40 e0       	ldi	r20, 0x00	; 0
    57a2:	60 eb       	ldi	r22, 0xB0	; 176
    57a4:	8b e1       	ldi	r24, 0x1B	; 27
    57a6:	93 e0       	ldi	r25, 0x03	; 3
    57a8:	0e 94 1c 26 	call	0x4c38	; 0x4c38 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE4sendENS_8MidiTypeEhhh>

template<class SerialPort, class Settings>
inline void MidiInterface<SerialPort, Settings>::turnThruOn(Thru::Mode inThruFilterMode)
{
    mThruActivated = true;
    mThruFilterMode = inThruFilterMode;
    57ac:	83 e0       	ldi	r24, 0x03	; 3
    57ae:	80 93 4f 03 	sts	0x034F, r24	; 0x80034f <MIDI+0x34>
						MIDI.sendControlChange(midi::BankSelect,0,1);
						MIDI.turnThruOn();
						midiThru = true;																
    57b2:	81 e0       	ldi	r24, 0x01	; 1
    57b4:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <_ZZ13processEventsvE8midiThru>
    57b8:	0a c0       	rjmp	.+20     	; 0x57ce <_Z13processEventsv+0x28e>

template<class SerialPort, class Settings>
inline void MidiInterface<SerialPort, Settings>::turnThruOff()
{
    mThruActivated = false;
    mThruFilterMode = Thru::Off;
    57ba:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <MIDI+0x34>
					}
					else{
						MIDI.turnThruOff();
						midiThru = false;						
    57be:	10 92 0e 03 	sts	0x030E, r1	; 0x80030e <_ZZ13processEventsvE8midiThru>
						loadSounds(currentBank,currentProgram);	
    57c2:	61 e1       	ldi	r22, 0x11	; 17
    57c4:	73 e0       	ldi	r23, 0x03	; 3
    57c6:	83 e1       	ldi	r24, 0x13	; 19
    57c8:	93 e0       	ldi	r25, 0x03	; 3
    57ca:	0e 94 78 26 	call	0x4cf0	; 0x4cf0 <_Z10loadSoundsPhS_>
										
					}	
					showCurrentMode(currentMode,RIGHT,midiThru);					
    57ce:	40 91 0e 03 	lds	r20, 0x030E	; 0x80030e <_ZZ13processEventsvE8midiThru>
    57d2:	61 e0       	ldi	r22, 0x01	; 1
    57d4:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <_ZZ13processEventsvE11currentMode>
    57d8:	0e 94 f5 31 	call	0x63ea	; 0x63ea <_Z15showCurrentModehhb>
					break;
    57dc:	a7 c0       	rjmp	.+334    	; 0x592c <_Z13processEventsv+0x3ec>
			case BUTTON3:
					tft.background(ST7735_MAGENTA);
    57de:	6f e1       	ldi	r22, 0x1F	; 31
    57e0:	78 ef       	ldi	r23, 0xF8	; 248
    57e2:	8f ed       	ldi	r24, 0xDF	; 223
    57e4:	93 e0       	ldi	r25, 0x03	; 3
    57e6:	0e 94 13 1f 	call	0x3e26	; 0x3e26 <_ZN12Adafruit_GFX10backgroundEj>
					for(delayCount = 0; delayCount < 4; delayCount++){
    57ea:	c0 e0       	ldi	r28, 0x00	; 0
    57ec:	d0 e0       	ldi	r29, 0x00	; 0
						if(digitalRead(PIN_BTN3) == HIGH)
    57ee:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <PIN_BTN3>
    57f2:	0e 94 ec 36 	call	0x6dd8	; 0x6dd8 <digitalRead>
    57f6:	01 97       	sbiw	r24, 0x01	; 1
    57f8:	71 f0       	breq	.+28     	; 0x5816 <_Z13processEventsv+0x2d6>
    57fa:	2f ef       	ldi	r18, 0xFF	; 255
    57fc:	89 e6       	ldi	r24, 0x69	; 105
    57fe:	98 e1       	ldi	r25, 0x18	; 24
    5800:	21 50       	subi	r18, 0x01	; 1
    5802:	80 40       	sbci	r24, 0x00	; 0
    5804:	90 40       	sbci	r25, 0x00	; 0
    5806:	e1 f7       	brne	.-8      	; 0x5800 <_Z13processEventsv+0x2c0>
    5808:	00 c0       	rjmp	.+0      	; 0x580a <_Z13processEventsv+0x2ca>
    580a:	00 00       	nop
					}	
					showCurrentMode(currentMode,RIGHT,midiThru);					
					break;
			case BUTTON3:
					tft.background(ST7735_MAGENTA);
					for(delayCount = 0; delayCount < 4; delayCount++){
    580c:	21 96       	adiw	r28, 0x01	; 1
    580e:	c4 30       	cpi	r28, 0x04	; 4
    5810:	d1 05       	cpc	r29, r1
    5812:	69 f7       	brne	.-38     	; 0x57ee <_Z13processEventsv+0x2ae>
    5814:	02 c0       	rjmp	.+4      	; 0x581a <_Z13processEventsv+0x2da>
						if(digitalRead(PIN_BTN3) == HIGH)
							break;
						_delay_ms(500);
					}
					
					if(delayCount == TWO_SECONDS){											
    5816:	24 97       	sbiw	r28, 0x04	; 4
    5818:	21 f5       	brne	.+72     	; 0x5862 <_Z13processEventsv+0x322>
						if(savePreset(currentPreset,currentFamily,currentFamilyIndex,split,splitNote) == true)
    581a:	00 91 0f 03 	lds	r16, 0x030F	; 0x80030f <_ZZ13processEventsvE9splitNote>
    581e:	20 91 10 03 	lds	r18, 0x0310	; 0x800310 <_ZZ13processEventsvE5split>
    5822:	46 e1       	ldi	r20, 0x16	; 22
    5824:	53 e0       	ldi	r21, 0x03	; 3
    5826:	69 e1       	ldi	r22, 0x19	; 25
    5828:	73 e0       	ldi	r23, 0x03	; 3
    582a:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <_ZZ13processEventsvE13currentPreset>
    582e:	0e 94 68 2f 	call	0x5ed0	; 0x5ed0 <_Z10savePresethPhS_bh>
    5832:	88 23       	and	r24, r24
    5834:	59 f0       	breq	.+22     	; 0x584c <_Z13processEventsv+0x30c>
							tft.text("Saved",0,0);
    5836:	20 e0       	ldi	r18, 0x00	; 0
    5838:	30 e0       	ldi	r19, 0x00	; 0
    583a:	40 e0       	ldi	r20, 0x00	; 0
    583c:	50 e0       	ldi	r21, 0x00	; 0
    583e:	6c e0       	ldi	r22, 0x0C	; 12
    5840:	72 e0       	ldi	r23, 0x02	; 2
    5842:	8f ed       	ldi	r24, 0xDF	; 223
    5844:	93 e0       	ldi	r25, 0x03	; 3
    5846:	0e 94 39 1f 	call	0x3e72	; 0x3e72 <_ZN12Adafruit_GFX4textEPKcii>
    584a:	70 c0       	rjmp	.+224    	; 0x592c <_Z13processEventsv+0x3ec>
						else
							tft.text("Save failed",0,0);						
    584c:	20 e0       	ldi	r18, 0x00	; 0
    584e:	30 e0       	ldi	r19, 0x00	; 0
    5850:	40 e0       	ldi	r20, 0x00	; 0
    5852:	50 e0       	ldi	r21, 0x00	; 0
    5854:	62 e1       	ldi	r22, 0x12	; 18
    5856:	72 e0       	ldi	r23, 0x02	; 2
    5858:	8f ed       	ldi	r24, 0xDF	; 223
    585a:	93 e0       	ldi	r25, 0x03	; 3
    585c:	0e 94 39 1f 	call	0x3e72	; 0x3e72 <_ZN12Adafruit_GFX4textEPKcii>
    5860:	65 c0       	rjmp	.+202    	; 0x592c <_Z13processEventsv+0x3ec>
					}
					else{
						tft.background(ST7735_MAGENTA);
    5862:	6f e1       	ldi	r22, 0x1F	; 31
    5864:	78 ef       	ldi	r23, 0xF8	; 248
    5866:	8f ed       	ldi	r24, 0xDF	; 223
    5868:	93 e0       	ldi	r25, 0x03	; 3
    586a:	0e 94 13 1f 	call	0x3e26	; 0x3e26 <_ZN12Adafruit_GFX10backgroundEj>
						currentMode = PRESET_SELECT;						
    586e:	85 e0       	ldi	r24, 0x05	; 5
    5870:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <_ZZ13processEventsvE11currentMode>
						showPresetList(currentPreset,NONE);
    5874:	6f ef       	ldi	r22, 0xFF	; 255
    5876:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <_ZZ13processEventsvE13currentPreset>
    587a:	0e 94 9f 32 	call	0x653e	; 0x653e <_Z14showPresetListhh>
    587e:	56 c0       	rjmp	.+172    	; 0x592c <_Z13processEventsv+0x3ec>
					break;
				
			}	// end of switch			
		
		
		if(midiThru == false && (currentInput == POT0 || currentInput == POT1)){			
    5880:	90 91 0e 03 	lds	r25, 0x030E	; 0x80030e <_ZZ13processEventsvE8midiThru>
    5884:	91 11       	cpse	r25, r1
    5886:	52 c0       	rjmp	.+164    	; 0x592c <_Z13processEventsv+0x3ec>
    5888:	83 50       	subi	r24, 0x03	; 3
    588a:	82 30       	cpi	r24, 0x02	; 2
    588c:	08 f0       	brcs	.+2      	; 0x5890 <_Z13processEventsv+0x350>
    588e:	4e c0       	rjmp	.+156    	; 0x592c <_Z13processEventsv+0x3ec>
			getBankProgram(currentFamily,currentFamilyIndex,currentBank,currentProgram);
    5890:	21 e1       	ldi	r18, 0x11	; 17
    5892:	33 e0       	ldi	r19, 0x03	; 3
    5894:	43 e1       	ldi	r20, 0x13	; 19
    5896:	53 e0       	ldi	r21, 0x03	; 3
    5898:	66 e1       	ldi	r22, 0x16	; 22
    589a:	73 e0       	ldi	r23, 0x03	; 3
    589c:	89 e1       	ldi	r24, 0x19	; 25
    589e:	93 e0       	ldi	r25, 0x03	; 3
    58a0:	0e 94 5c 2e 	call	0x5cb8	; 0x5cb8 <_Z14getBankProgramPhS_S_S_>
			switch(currentMode){
    58a4:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <_ZZ13processEventsvE11currentMode>
    58a8:	82 30       	cpi	r24, 0x02	; 2
    58aa:	c9 f0       	breq	.+50     	; 0x58de <_Z13processEventsv+0x39e>
    58ac:	18 f4       	brcc	.+6      	; 0x58b4 <_Z13processEventsv+0x374>
    58ae:	81 30       	cpi	r24, 0x01	; 1
    58b0:	31 f0       	breq	.+12     	; 0x58be <_Z13processEventsv+0x37e>
    58b2:	36 c0       	rjmp	.+108    	; 0x5920 <_Z13processEventsv+0x3e0>
    58b4:	83 30       	cpi	r24, 0x03	; 3
    58b6:	e1 f0       	breq	.+56     	; 0x58f0 <_Z13processEventsv+0x3b0>
    58b8:	84 30       	cpi	r24, 0x04	; 4
    58ba:	51 f1       	breq	.+84     	; 0x5910 <_Z13processEventsv+0x3d0>
    58bc:	31 c0       	rjmp	.+98     	; 0x5920 <_Z13processEventsv+0x3e0>
				case FAMILY_SELECT_RIGHT:	showFamilyName(currentFamily,RIGHT,currentMode); 
    58be:	41 e0       	ldi	r20, 0x01	; 1
    58c0:	61 e0       	ldi	r22, 0x01	; 1
    58c2:	89 e1       	ldi	r24, 0x19	; 25
    58c4:	93 e0       	ldi	r25, 0x03	; 3
    58c6:	0e 94 5c 30 	call	0x60b8	; 0x60b8 <_Z14showFamilyNamePhhh>
											showInstrumentName(currentBank,currentProgram,RIGHT,currentMode);
    58ca:	20 91 18 03 	lds	r18, 0x0318	; 0x800318 <_ZZ13processEventsvE11currentMode>
    58ce:	41 e0       	ldi	r20, 0x01	; 1
    58d0:	61 e1       	ldi	r22, 0x11	; 17
    58d2:	73 e0       	ldi	r23, 0x03	; 3
    58d4:	83 e1       	ldi	r24, 0x13	; 19
    58d6:	93 e0       	ldi	r25, 0x03	; 3
    58d8:	0e 94 dc 30 	call	0x61b8	; 0x61b8 <_Z18showInstrumentNamePhS_hh>
											break;
    58dc:	21 c0       	rjmp	.+66     	; 0x5920 <_Z13processEventsv+0x3e0>
				case SOUND_SELECT_RIGHT:	showInstrumentName(currentBank,currentProgram,RIGHT,currentMode);										 
    58de:	22 e0       	ldi	r18, 0x02	; 2
    58e0:	41 e0       	ldi	r20, 0x01	; 1
    58e2:	61 e1       	ldi	r22, 0x11	; 17
    58e4:	73 e0       	ldi	r23, 0x03	; 3
    58e6:	83 e1       	ldi	r24, 0x13	; 19
    58e8:	93 e0       	ldi	r25, 0x03	; 3
    58ea:	0e 94 dc 30 	call	0x61b8	; 0x61b8 <_Z18showInstrumentNamePhS_hh>
											break;
    58ee:	18 c0       	rjmp	.+48     	; 0x5920 <_Z13processEventsv+0x3e0>
				case FAMILY_SELECT_LEFT:	showFamilyName(currentFamily,LEFT,currentMode);
    58f0:	43 e0       	ldi	r20, 0x03	; 3
    58f2:	60 e0       	ldi	r22, 0x00	; 0
    58f4:	89 e1       	ldi	r24, 0x19	; 25
    58f6:	93 e0       	ldi	r25, 0x03	; 3
    58f8:	0e 94 5c 30 	call	0x60b8	; 0x60b8 <_Z14showFamilyNamePhhh>
											showInstrumentName(currentBank,currentProgram,LEFT,currentMode);
    58fc:	20 91 18 03 	lds	r18, 0x0318	; 0x800318 <_ZZ13processEventsvE11currentMode>
    5900:	40 e0       	ldi	r20, 0x00	; 0
    5902:	61 e1       	ldi	r22, 0x11	; 17
    5904:	73 e0       	ldi	r23, 0x03	; 3
    5906:	83 e1       	ldi	r24, 0x13	; 19
    5908:	93 e0       	ldi	r25, 0x03	; 3
    590a:	0e 94 dc 30 	call	0x61b8	; 0x61b8 <_Z18showInstrumentNamePhS_hh>
											break;
    590e:	08 c0       	rjmp	.+16     	; 0x5920 <_Z13processEventsv+0x3e0>
				case SOUND_SELECT_LEFT:		showInstrumentName(currentBank,currentProgram,LEFT,currentMode);
    5910:	24 e0       	ldi	r18, 0x04	; 4
    5912:	40 e0       	ldi	r20, 0x00	; 0
    5914:	61 e1       	ldi	r22, 0x11	; 17
    5916:	73 e0       	ldi	r23, 0x03	; 3
    5918:	83 e1       	ldi	r24, 0x13	; 19
    591a:	93 e0       	ldi	r25, 0x03	; 3
    591c:	0e 94 dc 30 	call	0x61b8	; 0x61b8 <_Z18showInstrumentNamePhS_hh>
											break;
				
			}			
			
			loadSounds(currentBank, currentProgram);
    5920:	61 e1       	ldi	r22, 0x11	; 17
    5922:	73 e0       	ldi	r23, 0x03	; 3
    5924:	83 e1       	ldi	r24, 0x13	; 19
    5926:	93 e0       	ldi	r25, 0x03	; 3
    5928:	0e 94 78 26 	call	0x4cf0	; 0x4cf0 <_Z10loadSoundsPhS_>
 @see see setInputChannel()
 */
template<class SerialPort, class Settings>
inline bool MidiInterface<SerialPort, Settings>::read()
{
    return read(mInputChannel);
    592c:	c0 91 41 03 	lds	r28, 0x0341	; 0x800341 <MIDI+0x26>
/*! \brief Read messages on a specified channel.
 */
template<class SerialPort, class Settings>
inline bool MidiInterface<SerialPort, Settings>::read(Channel inChannel)
{
    if (inChannel >= MIDI_CHANNEL_OFF)
    5930:	c1 31       	cpi	r28, 0x11	; 17
    5932:	08 f0       	brcs	.+2      	; 0x5936 <_Z13processEventsv+0x3f6>
    5934:	7f c0       	rjmp	.+254    	; 0x5a34 <_Z13processEventsv+0x4f4>
        return false; // MIDI Input disabled.

    if (!parse())
    5936:	8b e1       	ldi	r24, 0x1B	; 27
    5938:	93 e0       	ldi	r25, 0x03	; 3
    593a:	0e 94 cc 26 	call	0x4d98	; 0x4d98 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE5parseEv>
    593e:	88 23       	and	r24, r24
    5940:	09 f4       	brne	.+2      	; 0x5944 <_Z13processEventsv+0x404>
    5942:	78 c0       	rjmp	.+240    	; 0x5a34 <_Z13processEventsv+0x4f4>
 Returns an enumerated type. @see MidiType
 */
template<class SerialPort, class Settings>
inline MidiType MidiInterface<SerialPort, Settings>::getType() const
{
    return mMessage.type;
    5944:	80 91 51 03 	lds	r24, 0x0351	; 0x800351 <MIDI+0x36>

// Private method, see midi_Settings.h for documentation
template<class SerialPort, class Settings>
inline void MidiInterface<SerialPort, Settings>::handleNullVelocityNoteOnAsNoteOff()
{
    if (Settings::HandleNullVelocityNoteOnAsNoteOff &&
    5948:	80 39       	cpi	r24, 0x90	; 144
    594a:	41 f4       	brne	.+16     	; 0x595c <_Z13processEventsv+0x41c>
    594c:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <MIDI+0x38>
    5950:	81 11       	cpse	r24, r1
    5952:	07 c0       	rjmp	.+14     	; 0x5962 <_Z13processEventsv+0x422>
        getType() == NoteOn && getData2() == 0)
    {
        mMessage.type = NoteOff;
    5954:	80 e8       	ldi	r24, 0x80	; 128
    5956:	80 93 51 03 	sts	0x0351, r24	; 0x800351 <MIDI+0x36>
    595a:	03 c0       	rjmp	.+6      	; 0x5962 <_Z13processEventsv+0x422>
{
    // This method handles recognition of channel
    // (to know if the message is destinated to the Arduino)

    // First, check if the received message is Channel
    if (mMessage.type >= NoteOff && mMessage.type <= PitchBend)
    595c:	80 58       	subi	r24, 0x80	; 128
    595e:	81 36       	cpi	r24, 0x61	; 97
    5960:	30 f4       	brcc	.+12     	; 0x596e <_Z13processEventsv+0x42e>
    {
        // Then we need to know if we listen to it
        if ((mMessage.channel == inChannel) ||
    5962:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <MIDI+0x35>
    5966:	c8 17       	cp	r28, r24
    5968:	11 f0       	breq	.+4      	; 0x596e <_Z13processEventsv+0x42e>
        return false;

    handleNullVelocityNoteOnAsNoteOff();
    const bool channelMatch = inputFilter(inChannel);

    if (channelMatch)
    596a:	c1 11       	cpse	r28, r1
    596c:	6d c0       	rjmp	.+218    	; 0x5a48 <_Z13processEventsv+0x508>
    {
        launchCallback();
    596e:	8b e1       	ldi	r24, 0x1B	; 27
    5970:	93 e0       	ldi	r25, 0x03	; 3
    5972:	0e 94 50 28 	call	0x50a0	; 0x50a0 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE14launchCallbackEv>
    }

    thruFilter(inChannel);
    5976:	6c 2f       	mov	r22, r28
    5978:	8b e1       	ldi	r24, 0x1B	; 27
    597a:	93 e0       	ldi	r25, 0x03	; 3
    597c:	0e 94 58 29 	call	0x52b0	; 0x52b0 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh>
		
	}	// end of input		
	
			
	if(MIDI.read()){
		if(midiThru == true)
    5980:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <_ZZ13processEventsvE8midiThru>
    5984:	81 11       	cpse	r24, r1
    5986:	66 c0       	rjmp	.+204    	; 0x5a54 <_Z13processEventsv+0x514>

/*! \brief Get the first data byte of the last received message. */
template<class SerialPort, class Settings>
inline DataByte MidiInterface<SerialPort, Settings>::getData1() const
{
    return mMessage.data1;
    5988:	eb e1       	ldi	r30, 0x1B	; 27
    598a:	f3 e0       	ldi	r31, 0x03	; 3
    598c:	47 a9       	ldd	r20, Z+55	; 0x37
			return;
		data1 = MIDI.getData1();
    598e:	40 93 15 04 	sts	0x0415, r20	; 0x800415 <data1>

/*! \brief Get the second data byte of the last received message. */
template<class SerialPort, class Settings>
inline DataByte MidiInterface<SerialPort, Settings>::getData2() const
{
    return mMessage.data2;
    5992:	20 ad       	ldd	r18, Z+56	; 0x38
		data2 = MIDI.getData2();
    5994:	20 93 14 04 	sts	0x0414, r18	; 0x800414 <data2>
 For non-channel messages, this will return 0.
 */
template<class SerialPort, class Settings>
inline Channel MidiInterface<SerialPort, Settings>::getChannel() const
{
    return mMessage.channel;
    5998:	05 a9       	ldd	r16, Z+53	; 0x35
		channel = MIDI.getChannel();
    599a:	00 93 13 04 	sts	0x0413, r16	; 0x800413 <channel>
		switch(MIDI.getType()){
    599e:	86 a9       	ldd	r24, Z+54	; 0x36
    59a0:	80 39       	cpi	r24, 0x90	; 144
    59a2:	61 f0       	breq	.+24     	; 0x59bc <_Z13processEventsv+0x47c>
    59a4:	80 3b       	cpi	r24, 0xB0	; 176
    59a6:	21 f0       	breq	.+8      	; 0x59b0 <_Z13processEventsv+0x470>
    59a8:	80 38       	cpi	r24, 0x80	; 128
    59aa:	09 f0       	breq	.+2      	; 0x59ae <_Z13processEventsv+0x46e>
    59ac:	43 c0       	rjmp	.+134    	; 0x5a34 <_Z13processEventsv+0x4f4>
    59ae:	3d c0       	rjmp	.+122    	; 0x5a2a <_Z13processEventsv+0x4ea>
template<class SerialPort, class Settings>
void MidiInterface<SerialPort, Settings>::sendControlChange(DataByte inControlNumber,
                                                            DataByte inControlValue,
                                                            Channel inChannel)
{
    send(ControlChange, inControlNumber, inControlValue, inChannel);
    59b0:	60 eb       	ldi	r22, 0xB0	; 176
    59b2:	8b e1       	ldi	r24, 0x1B	; 27
    59b4:	93 e0       	ldi	r25, 0x03	; 3
    59b6:	0e 94 1c 26 	call	0x4c38	; 0x4c38 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE4sendENS_8MidiTypeEhhh>
    59ba:	3c c0       	rjmp	.+120    	; 0x5a34 <_Z13processEventsv+0x4f4>
			case midi::ControlChange: MIDI.sendControlChange(data1,data2,channel);
									  break;
			case midi::NoteOn: 
			if(split == true){ 
    59bc:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <_ZZ13processEventsvE5split>
    59c0:	88 23       	and	r24, r24
    59c2:	39 f1       	breq	.+78     	; 0x5a12 <_Z13processEventsv+0x4d2>
				if(data1 < splitNote){
    59c4:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <_ZZ13processEventsvE9splitNote>
    59c8:	48 17       	cp	r20, r24
    59ca:	90 f4       	brcc	.+36     	; 0x59f0 <_Z13processEventsv+0x4b0>
    59cc:	01 e0       	ldi	r16, 0x01	; 1
    59ce:	20 91 13 03 	lds	r18, 0x0313	; 0x800313 <_ZZ13processEventsvE11currentBank>
    59d2:	40 e0       	ldi	r20, 0x00	; 0
    59d4:	60 eb       	ldi	r22, 0xB0	; 176
    59d6:	8b e1       	ldi	r24, 0x1B	; 27
    59d8:	93 e0       	ldi	r25, 0x03	; 3
    59da:	0e 94 1c 26 	call	0x4c38	; 0x4c38 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE4sendENS_8MidiTypeEhhh>
 */
template<class SerialPort, class Settings>
void MidiInterface<SerialPort, Settings>::sendProgramChange(DataByte inProgramNumber,
                                                            Channel inChannel)
{
    send(ProgramChange, inProgramNumber, 0, inChannel);
    59de:	20 e0       	ldi	r18, 0x00	; 0
    59e0:	40 91 11 03 	lds	r20, 0x0311	; 0x800311 <_ZZ13processEventsvE14currentProgram>
    59e4:	60 ec       	ldi	r22, 0xC0	; 192
    59e6:	8b e1       	ldi	r24, 0x1B	; 27
    59e8:	93 e0       	ldi	r25, 0x03	; 3
    59ea:	0e 94 1c 26 	call	0x4c38	; 0x4c38 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE4sendENS_8MidiTypeEhhh>
    59ee:	11 c0       	rjmp	.+34     	; 0x5a12 <_Z13processEventsv+0x4d2>
template<class SerialPort, class Settings>
void MidiInterface<SerialPort, Settings>::sendControlChange(DataByte inControlNumber,
                                                            DataByte inControlValue,
                                                            Channel inChannel)
{
    send(ControlChange, inControlNumber, inControlValue, inChannel);
    59f0:	01 e0       	ldi	r16, 0x01	; 1
    59f2:	20 91 14 03 	lds	r18, 0x0314	; 0x800314 <_ZZ13processEventsvE11currentBank+0x1>
    59f6:	40 e0       	ldi	r20, 0x00	; 0
    59f8:	60 eb       	ldi	r22, 0xB0	; 176
    59fa:	8b e1       	ldi	r24, 0x1B	; 27
    59fc:	93 e0       	ldi	r25, 0x03	; 3
    59fe:	0e 94 1c 26 	call	0x4c38	; 0x4c38 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE4sendENS_8MidiTypeEhhh>
 */
template<class SerialPort, class Settings>
void MidiInterface<SerialPort, Settings>::sendProgramChange(DataByte inProgramNumber,
                                                            Channel inChannel)
{
    send(ProgramChange, inProgramNumber, 0, inChannel);
    5a02:	20 e0       	ldi	r18, 0x00	; 0
    5a04:	40 91 12 03 	lds	r20, 0x0312	; 0x800312 <_ZZ13processEventsvE14currentProgram+0x1>
    5a08:	60 ec       	ldi	r22, 0xC0	; 192
    5a0a:	8b e1       	ldi	r24, 0x1B	; 27
    5a0c:	93 e0       	ldi	r25, 0x03	; 3
    5a0e:	0e 94 1c 26 	call	0x4c38	; 0x4c38 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE4sendENS_8MidiTypeEhhh>
template<class SerialPort, class Settings>
void MidiInterface<SerialPort, Settings>::sendNoteOn(DataByte inNoteNumber,
                                                     DataByte inVelocity,
                                                     Channel inChannel)
{
    send(NoteOn, inNoteNumber, inVelocity, inChannel);
    5a12:	00 91 13 04 	lds	r16, 0x0413	; 0x800413 <channel>
    5a16:	20 91 14 04 	lds	r18, 0x0414	; 0x800414 <data2>
    5a1a:	40 91 15 04 	lds	r20, 0x0415	; 0x800415 <data1>
    5a1e:	60 e9       	ldi	r22, 0x90	; 144
    5a20:	8b e1       	ldi	r24, 0x1B	; 27
    5a22:	93 e0       	ldi	r25, 0x03	; 3
    5a24:	0e 94 1c 26 	call	0x4c38	; 0x4c38 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE4sendENS_8MidiTypeEhhh>
    5a28:	05 c0       	rjmp	.+10     	; 0x5a34 <_Z13processEventsv+0x4f4>
template<class SerialPort, class Settings>
void MidiInterface<SerialPort, Settings>::sendNoteOff(DataByte inNoteNumber,
                                                      DataByte inVelocity,
                                                      Channel inChannel)
{
    send(NoteOff, inNoteNumber, inVelocity, inChannel);
    5a2a:	60 e8       	ldi	r22, 0x80	; 128
    5a2c:	8b e1       	ldi	r24, 0x1B	; 27
    5a2e:	93 e0       	ldi	r25, 0x03	; 3
    5a30:	0e 94 1c 26 	call	0x4c38	; 0x4c38 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE4sendENS_8MidiTypeEhhh>
				break;
			
		}
	
	}
	updateLEDs(&newdata);
    5a34:	86 e1       	ldi	r24, 0x16	; 22
    5a36:	94 e0       	ldi	r25, 0x04	; 4
    5a38:	0e 94 2b 2e 	call	0x5c56	; 0x5c56 <_Z10updateLEDsP11inputStates>
    5a3c:	0b c0       	rjmp	.+22     	; 0x5a54 <_Z13processEventsv+0x514>
					break;
				
			}	// end of switch			
		
		
		if(midiThru == false && (currentInput == POT0 || currentInput == POT1)){			
    5a3e:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <_ZZ13processEventsvE8midiThru>
    5a42:	81 11       	cpse	r24, r1
    5a44:	73 cf       	rjmp	.-282    	; 0x592c <_Z13processEventsv+0x3ec>
    5a46:	24 cf       	rjmp	.-440    	; 0x5890 <_Z13processEventsv+0x350>
    if (channelMatch)
    {
        launchCallback();
    }

    thruFilter(inChannel);
    5a48:	6c 2f       	mov	r22, r28
    5a4a:	8b e1       	ldi	r24, 0x1B	; 27
    5a4c:	93 e0       	ldi	r25, 0x03	; 3
    5a4e:	0e 94 58 29 	call	0x52b0	; 0x52b0 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE10thruFilterEh>
    5a52:	f0 cf       	rjmp	.-32     	; 0x5a34 <_Z13processEventsv+0x4f4>
		}
	
	}
	updateLEDs(&newdata);
	
}
    5a54:	df 91       	pop	r29
    5a56:	cf 91       	pop	r28
    5a58:	1f 91       	pop	r17
    5a5a:	0f 91       	pop	r16
    5a5c:	ff 90       	pop	r15
    5a5e:	ef 90       	pop	r14
    5a60:	df 90       	pop	r13
    5a62:	cf 90       	pop	r12
    5a64:	08 95       	ret

00005a66 <_GLOBAL__sub_I_csPin>:
		getBankProgram(family,famIndex,bank,prog);
		loadSounds(bank,prog);		
	}
	else
		tft.text("Failed:",0,0);
    5a66:	cf 93       	push	r28
    5a68:	df 93       	push	r29
byte channel;


// how many sounds there are in each family
uint8_t family_sounds[NUM_OF_FAMILIES] = {35,25,35,18,78,64,36,48,52,35,39,57,47};
TFT tft = TFT(TFT_CS, TFT_DC, TFT_RST);
    5a6a:	28 e0       	ldi	r18, 0x08	; 8
    5a6c:	49 e0       	ldi	r20, 0x09	; 9
    5a6e:	6a e0       	ldi	r22, 0x0A	; 10
    5a70:	8f ed       	ldi	r24, 0xDF	; 223
    5a72:	93 e0       	ldi	r25, 0x03	; 3
    5a74:	0e 94 b2 1b 	call	0x3764	; 0x3764 <_ZN3TFTC1Ehhh>
DataFlash dataflash;
    5a78:	85 ed       	ldi	r24, 0xD5	; 213
    5a7a:	93 e0       	ldi	r25, 0x03	; 3
    5a7c:	0e 94 69 18 	call	0x30d2	; 0x30d2 <_ZN9DataFlashC1Ev>
    , mPendingMessageExpectedLenght(0)
    , mPendingMessageIndex(0)
    , mCurrentRpnNumber(0xffff)
    , mCurrentNrpnNumber(0xffff)
    , mThruActivated(true)
    , mThruFilterMode(Thru::Full)
    5a80:	eb e1       	ldi	r30, 0x1B	; 27
    5a82:	f3 e0       	ldi	r31, 0x03	; 3
    5a84:	83 e3       	ldi	r24, 0x33	; 51
    5a86:	94 e0       	ldi	r25, 0x04	; 4
    5a88:	95 a3       	std	Z+37, r25	; 0x25
    5a8a:	84 a3       	std	Z+36, r24	; 0x24
    5a8c:	16 a2       	std	Z+38, r1	; 0x26
    5a8e:	17 a2       	std	Z+39, r1	; 0x27
    5a90:	10 a6       	std	Z+40, r1	; 0x28
    5a92:	15 a6       	std	Z+45, r1	; 0x2d
    5a94:	14 a6       	std	Z+44, r1	; 0x2c
    5a96:	17 a6       	std	Z+47, r1	; 0x2f
    5a98:	16 a6       	std	Z+46, r1	; 0x2e
    5a9a:	8f ef       	ldi	r24, 0xFF	; 255
    5a9c:	9f ef       	ldi	r25, 0xFF	; 255
    5a9e:	91 ab       	std	Z+49, r25	; 0x31
    5aa0:	80 ab       	std	Z+48, r24	; 0x30
    5aa2:	93 ab       	std	Z+51, r25	; 0x33
    5aa4:	82 ab       	std	Z+50, r24	; 0x32
    5aa6:	83 e0       	ldi	r24, 0x03	; 3
    5aa8:	80 93 4f 03 	sts	0x034F, r24	; 0x80034f <MIDI+0x34>
    inline Message()
        : channel(0)
        , type(midi::InvalidType)
        , data1(0)
        , data2(0)
        , valid(false)
    5aac:	15 aa       	std	Z+53, r1	; 0x35
    5aae:	16 aa       	std	Z+54, r1	; 0x36
    5ab0:	17 aa       	std	Z+55, r1	; 0x37
    5ab2:	10 ae       	std	Z+56, r1	; 0x38
    5ab4:	10 92 d4 03 	sts	0x03D4, r1	; 0x8003d4 <MIDI+0xb9>
    {
        memset(sysexArray, 0, sSysExMaxSize * sizeof(DataByte));
    5ab8:	80 e8       	ldi	r24, 0x80	; 128
    5aba:	a4 e5       	ldi	r26, 0x54	; 84
    5abc:	b3 e0       	ldi	r27, 0x03	; 3
    5abe:	ed 01       	movw	r28, r26
    5ac0:	19 92       	st	Y+, r1
    5ac2:	8a 95       	dec	r24
    5ac4:	e9 f7       	brne	.-6      	; 0x5ac0 <_GLOBAL__sub_I_csPin+0x5a>
{
    mNoteOffCallback                = 0;
    5ac6:	11 82       	std	Z+1, r1	; 0x01
    5ac8:	10 82       	st	Z, r1
    mNoteOnCallback                 = 0;
    5aca:	13 82       	std	Z+3, r1	; 0x03
    5acc:	12 82       	std	Z+2, r1	; 0x02
    mAfterTouchPolyCallback         = 0;
    5ace:	15 82       	std	Z+5, r1	; 0x05
    5ad0:	14 82       	std	Z+4, r1	; 0x04
    mControlChangeCallback          = 0;
    5ad2:	17 82       	std	Z+7, r1	; 0x07
    5ad4:	16 82       	std	Z+6, r1	; 0x06
    mProgramChangeCallback          = 0;
    5ad6:	11 86       	std	Z+9, r1	; 0x09
    5ad8:	10 86       	std	Z+8, r1	; 0x08
    mAfterTouchChannelCallback      = 0;
    5ada:	13 86       	std	Z+11, r1	; 0x0b
    5adc:	12 86       	std	Z+10, r1	; 0x0a
    mPitchBendCallback              = 0;
    5ade:	15 86       	std	Z+13, r1	; 0x0d
    5ae0:	14 86       	std	Z+12, r1	; 0x0c
    mSystemExclusiveCallback        = 0;
    5ae2:	17 86       	std	Z+15, r1	; 0x0f
    5ae4:	16 86       	std	Z+14, r1	; 0x0e
    mTimeCodeQuarterFrameCallback   = 0;
    5ae6:	11 8a       	std	Z+17, r1	; 0x11
    5ae8:	10 8a       	std	Z+16, r1	; 0x10
    mSongPositionCallback           = 0;
    5aea:	13 8a       	std	Z+19, r1	; 0x13
    5aec:	12 8a       	std	Z+18, r1	; 0x12
    mSongSelectCallback             = 0;
    5aee:	15 8a       	std	Z+21, r1	; 0x15
    5af0:	14 8a       	std	Z+20, r1	; 0x14
    mTuneRequestCallback            = 0;
    5af2:	17 8a       	std	Z+23, r1	; 0x17
    5af4:	16 8a       	std	Z+22, r1	; 0x16
    mClockCallback                  = 0;
    5af6:	11 8e       	std	Z+25, r1	; 0x19
    5af8:	10 8e       	std	Z+24, r1	; 0x18
    mStartCallback                  = 0;
    5afa:	13 8e       	std	Z+27, r1	; 0x1b
    5afc:	12 8e       	std	Z+26, r1	; 0x1a
    mContinueCallback               = 0;
    5afe:	15 8e       	std	Z+29, r1	; 0x1d
    5b00:	14 8e       	std	Z+28, r1	; 0x1c
    mStopCallback                   = 0;
    5b02:	17 8e       	std	Z+31, r1	; 0x1f
    5b04:	16 8e       	std	Z+30, r1	; 0x1e
    mActiveSensingCallback          = 0;
    5b06:	11 a2       	std	Z+33, r1	; 0x21
    5b08:	10 a2       	std	Z+32, r1	; 0x20
    mSystemResetCallback            = 0;
    5b0a:	13 a2       	std	Z+35, r1	; 0x23
    5b0c:	12 a2       	std	Z+34, r1	; 0x22
		getBankProgram(family,famIndex,bank,prog);
		loadSounds(bank,prog);		
	}
	else
		tft.text("Failed:",0,0);
    5b0e:	df 91       	pop	r29
    5b10:	cf 91       	pop	r28
    5b12:	08 95       	ret

00005b14 <_GLOBAL__sub_D_csPin>:


// how many sounds there are in each family
uint8_t family_sounds[NUM_OF_FAMILIES] = {35,25,35,18,78,64,36,48,52,35,39,57,47};
TFT tft = TFT(TFT_CS, TFT_DC, TFT_RST);
DataFlash dataflash;
    5b14:	85 ed       	ldi	r24, 0xD5	; 213
    5b16:	93 e0       	ldi	r25, 0x03	; 3
    5b18:	0e 94 6e 18 	call	0x30dc	; 0x30dc <_ZN9DataFlashD1Ev>
    5b1c:	08 95       	ret

00005b1e <setup>:
	
}


void setup()
{
    5b1e:	cf 93       	push	r28
    5b20:	df 93       	push	r29
	DataFlash::ID id;
	SPI.begin();	
    5b22:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <_ZN8SPIClass5beginEv>
	//dataflash.setup(csPin, resetPin, wpPin);	
	//dataflash.begin();
	
	pinMode(PIN_BTN0, INPUT_PULLUP);
    5b26:	62 e0       	ldi	r22, 0x02	; 2
    5b28:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <PIN_BTN0>
    5b2c:	0e 94 81 36 	call	0x6d02	; 0x6d02 <pinMode>
	pinMode(PIN_BTN1, INPUT_PULLUP);
    5b30:	62 e0       	ldi	r22, 0x02	; 2
    5b32:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <PIN_BTN1>
    5b36:	0e 94 81 36 	call	0x6d02	; 0x6d02 <pinMode>
	pinMode(PIN_BTN2, INPUT_PULLUP);
    5b3a:	62 e0       	ldi	r22, 0x02	; 2
    5b3c:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <PIN_BTN2>
    5b40:	0e 94 81 36 	call	0x6d02	; 0x6d02 <pinMode>
	pinMode(PIN_BTN3,INPUT_PULLUP);
    5b44:	62 e0       	ldi	r22, 0x02	; 2
    5b46:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <PIN_BTN3>
    5b4a:	0e 94 81 36 	call	0x6d02	; 0x6d02 <pinMode>
	pinMode(PIN_LED_GRN, OUTPUT);
    5b4e:	61 e0       	ldi	r22, 0x01	; 1
    5b50:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <PIN_LED_GRN>
    5b54:	0e 94 81 36 	call	0x6d02	; 0x6d02 <pinMode>
	pinMode(PIN_LED_RED, OUTPUT);
    5b58:	61 e0       	ldi	r22, 0x01	; 1
    5b5a:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <PIN_LED_RED>
    5b5e:	0e 94 81 36 	call	0x6d02	; 0x6d02 <pinMode>
{
    // Initialise the Serial port
#if defined(FSE_AVR)
    mSerial. template open<Settings::BaudRate>();
#else
    mSerial.begin(Settings::BaudRate);
    5b62:	cb e1       	ldi	r28, 0x1B	; 27
    5b64:	d3 e0       	ldi	r29, 0x03	; 3
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    5b66:	26 e0       	ldi	r18, 0x06	; 6
    5b68:	42 e1       	ldi	r20, 0x12	; 18
    5b6a:	5a e7       	ldi	r21, 0x7A	; 122
    5b6c:	60 e0       	ldi	r22, 0x00	; 0
    5b6e:	70 e0       	ldi	r23, 0x00	; 0
    5b70:	8c a1       	ldd	r24, Y+36	; 0x24
    5b72:	9d a1       	ldd	r25, Y+37	; 0x25
    5b74:	0e 94 2a 34 	call	0x6854	; 0x6854 <_ZN14HardwareSerial5beginEmh>
#endif

    mInputChannel = inChannel;
    5b78:	1e a2       	std	Y+38, r1	; 0x26
    mRunningStatus_TX = InvalidType;
    5b7a:	18 a6       	std	Y+40, r1	; 0x28
    mRunningStatus_RX = InvalidType;
    5b7c:	1f a2       	std	Y+39, r1	; 0x27

    mPendingMessageIndex = 0;
    5b7e:	1f a6       	std	Y+47, r1	; 0x2f
    5b80:	1e a6       	std	Y+46, r1	; 0x2e
    mPendingMessageExpectedLenght = 0;
    5b82:	1d a6       	std	Y+45, r1	; 0x2d
    5b84:	1c a6       	std	Y+44, r1	; 0x2c

    mCurrentRpnNumber  = 0xffff;
    5b86:	8f ef       	ldi	r24, 0xFF	; 255
    5b88:	9f ef       	ldi	r25, 0xFF	; 255
    5b8a:	99 ab       	std	Y+49, r25	; 0x31
    5b8c:	88 ab       	std	Y+48, r24	; 0x30
    mCurrentNrpnNumber = 0xffff;
    5b8e:	9b ab       	std	Y+51, r25	; 0x33
    5b90:	8a ab       	std	Y+50, r24	; 0x32

    mMessage.valid   = false;
    5b92:	10 92 d4 03 	sts	0x03D4, r1	; 0x8003d4 <MIDI+0xb9>
    mMessage.type    = InvalidType;
    5b96:	1e aa       	std	Y+54, r1	; 0x36
    mMessage.channel = 0;
    5b98:	1d aa       	std	Y+53, r1	; 0x35
    mMessage.data1   = 0;
    5b9a:	1f aa       	std	Y+55, r1	; 0x37
    mMessage.data2   = 0;
    5b9c:	18 ae       	std	Y+56, r1	; 0x38

template<class SerialPort, class Settings>
inline void MidiInterface<SerialPort, Settings>::turnThruOff()
{
    mThruActivated = false;
    mThruFilterMode = Thru::Off;
    5b9e:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <MIDI+0x34>

		
	MIDI.begin(MIDI_CHANNEL_OMNI);
	MIDI.turnThruOff();
	
	tft.begin();
    5ba2:	8f ed       	ldi	r24, 0xDF	; 223
    5ba4:	93 e0       	ldi	r25, 0x03	; 3
    5ba6:	0e 94 c6 1b 	call	0x378c	; 0x378c <_ZN3TFT5beginEv>
	tft.fillScreen(ST7735_MAGENTA);
    5baa:	6f e1       	ldi	r22, 0x1F	; 31
    5bac:	78 ef       	ldi	r23, 0xF8	; 248
    5bae:	8f ed       	ldi	r24, 0xDF	; 223
    5bb0:	93 e0       	ldi	r25, 0x03	; 3
    5bb2:	0e 94 55 1f 	call	0x3eaa	; 0x3eaa <_ZN15Adafruit_ST773510fillScreenEj>
	tft.stroke(0,0,0);
    5bb6:	20 e0       	ldi	r18, 0x00	; 0
    5bb8:	40 e0       	ldi	r20, 0x00	; 0
    5bba:	60 e0       	ldi	r22, 0x00	; 0
    5bbc:	8f ed       	ldi	r24, 0xDF	; 223
    5bbe:	93 e0       	ldi	r25, 0x03	; 3
    5bc0:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <_ZN12Adafruit_GFX6strokeEhhh>
	tft.textSize(2);	
    5bc4:	62 e0       	ldi	r22, 0x02	; 2
    5bc6:	8f ed       	ldi	r24, 0xDF	; 223
    5bc8:	93 e0       	ldi	r25, 0x03	; 3
    5bca:	0e 94 4f 1f 	call	0x3e9e	; 0x3e9e <_ZN12Adafruit_GFX8textSizeEh>
}
    5bce:	df 91       	pop	r29
    5bd0:	cf 91       	pop	r28
    5bd2:	08 95       	ret

00005bd4 <main>:
DataFlash dataflash;
MIDI_CREATE_DEFAULT_INSTANCE();


int main(void)
{
    5bd4:	cf 93       	push	r28
    5bd6:	df 93       	push	r29
    5bd8:	00 d0       	rcall	.+0      	; 0x5bda <main+0x6>
    5bda:	cd b7       	in	r28, 0x3d	; 61
    5bdc:	de b7       	in	r29, 0x3e	; 62
    init();		// initialize Arduino wiring
    5bde:	0e 94 00 36 	call	0x6c00	; 0x6c00 <init>
    setup();	// local setup	
    5be2:	0e 94 8f 2d 	call	0x5b1e	; 0x5b1e <setup>
	 *
	 * @return     Error status
	 */
	inline result checkLibVersion() {
		uint16_t dummy;
		return checkLibVersion(dummy);
    5be6:	ce 01       	movw	r24, r28
    5be8:	01 96       	adiw	r24, 0x01	; 1
    5bea:	0e 94 b7 19 	call	0x336e	; 0x336e <_ZN4OSFS15checkLibVersionERj>
	
	if(OSFS::checkLibVersion() == OSFS::result::UNFORMATTED){
    5bee:	05 97       	sbiw	r24, 0x05	; 5
    5bf0:	69 f4       	brne	.+26     	; 0x5c0c <main+0x38>
		OSFS::format();
    5bf2:	0e 94 31 1b 	call	0x3662	; 0x3662 <_ZN4OSFS6formatEv>
		tft.text("Not formatted",0,0);
    5bf6:	20 e0       	ldi	r18, 0x00	; 0
    5bf8:	30 e0       	ldi	r19, 0x00	; 0
    5bfa:	40 e0       	ldi	r20, 0x00	; 0
    5bfc:	50 e0       	ldi	r21, 0x00	; 0
    5bfe:	6e e1       	ldi	r22, 0x1E	; 30
    5c00:	72 e0       	ldi	r23, 0x02	; 2
    5c02:	8f ed       	ldi	r24, 0xDF	; 223
    5c04:	93 e0       	ldi	r25, 0x03	; 3
    5c06:	0e 94 39 1f 	call	0x3e72	; 0x3e72 <_ZN12Adafruit_GFX4textEPKcii>
    5c0a:	ff cf       	rjmp	.-2      	; 0x5c0a <main+0x36>
		while(1)
			continue;
	}
	showCurrentMode(NONE_SELECT,RIGHT,false);	
    5c0c:	40 e0       	ldi	r20, 0x00	; 0
    5c0e:	61 e0       	ldi	r22, 0x01	; 1
    5c10:	80 e0       	ldi	r24, 0x00	; 0
    5c12:	0e 94 f5 31 	call	0x63ea	; 0x63ea <_Z15showCurrentModehhb>
	showFamilyName(0,RIGHT,NONE_SELECT);
    5c16:	40 e0       	ldi	r20, 0x00	; 0
    5c18:	61 e0       	ldi	r22, 0x01	; 1
    5c1a:	80 e0       	ldi	r24, 0x00	; 0
    5c1c:	90 e0       	ldi	r25, 0x00	; 0
    5c1e:	0e 94 5c 30 	call	0x60b8	; 0x60b8 <_Z14showFamilyNamePhhh>
	showInstrumentName(0,0,RIGHT,NONE_SELECT);	
    5c22:	20 e0       	ldi	r18, 0x00	; 0
    5c24:	41 e0       	ldi	r20, 0x01	; 1
    5c26:	60 e0       	ldi	r22, 0x00	; 0
    5c28:	70 e0       	ldi	r23, 0x00	; 0
    5c2a:	80 e0       	ldi	r24, 0x00	; 0
    5c2c:	90 e0       	ldi	r25, 0x00	; 0
    5c2e:	0e 94 dc 30 	call	0x61b8	; 0x61b8 <_Z18showInstrumentNamePhS_hh>
template<class SerialPort, class Settings>
void MidiInterface<SerialPort, Settings>::sendControlChange(DataByte inControlNumber,
                                                            DataByte inControlValue,
                                                            Channel inChannel)
{
    send(ControlChange, inControlNumber, inControlValue, inChannel);
    5c32:	01 e0       	ldi	r16, 0x01	; 1
    5c34:	20 e0       	ldi	r18, 0x00	; 0
    5c36:	40 e0       	ldi	r20, 0x00	; 0
    5c38:	60 eb       	ldi	r22, 0xB0	; 176
    5c3a:	8b e1       	ldi	r24, 0x1B	; 27
    5c3c:	93 e0       	ldi	r25, 0x03	; 3
    5c3e:	0e 94 1c 26 	call	0x4c38	; 0x4c38 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE4sendENS_8MidiTypeEhhh>
 */
template<class SerialPort, class Settings>
void MidiInterface<SerialPort, Settings>::sendProgramChange(DataByte inProgramNumber,
                                                            Channel inChannel)
{
    send(ProgramChange, inProgramNumber, 0, inChannel);
    5c42:	20 e0       	ldi	r18, 0x00	; 0
    5c44:	40 e0       	ldi	r20, 0x00	; 0
    5c46:	60 ec       	ldi	r22, 0xC0	; 192
    5c48:	8b e1       	ldi	r24, 0x1B	; 27
    5c4a:	93 e0       	ldi	r25, 0x03	; 3
    5c4c:	0e 94 1c 26 	call	0x4c38	; 0x4c38 <_ZN4midi13MidiInterfaceI14HardwareSerialNS_15DefaultSettingsEE4sendENS_8MidiTypeEhhh>
	
	MIDI.sendControlChange(midi::BankSelect,0,1);
	MIDI.sendProgramChange(0,1);
    while (1) 
    {
		processEvents();
    5c50:	0e 94 a0 2a 	call	0x5540	; 0x5540 <_Z13processEventsv>
    5c54:	fd cf       	rjmp	.-6      	; 0x5c50 <main+0x7c>

00005c56 <_Z10updateLEDsP11inputStates>:

void showSplitPoint(byte data){
	sprintf(lcdline,"%d\n",data);
	tft.fillRect(0,40,ST7735_TFTHEIGHT,20,ST7735_MAGENTA);
	tft.text(lcdline,0,40);
}
    5c56:	cf 93       	push	r28
    5c58:	df 93       	push	r29
    5c5a:	ec 01       	movw	r28, r24
    5c5c:	61 e0       	ldi	r22, 0x01	; 1
    5c5e:	88 81       	ld	r24, Y
    5c60:	81 11       	cpse	r24, r1
    5c62:	60 e0       	ldi	r22, 0x00	; 0
    5c64:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <PIN_LED_GRN>
    5c68:	0e 94 bd 36 	call	0x6d7a	; 0x6d7a <digitalWrite>
    5c6c:	61 e0       	ldi	r22, 0x01	; 1
    5c6e:	89 81       	ldd	r24, Y+1	; 0x01
    5c70:	81 11       	cpse	r24, r1
    5c72:	60 e0       	ldi	r22, 0x00	; 0
    5c74:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <PIN_LED_RED>
    5c78:	0e 94 bd 36 	call	0x6d7a	; 0x6d7a <digitalWrite>
    5c7c:	df 91       	pop	r29
    5c7e:	cf 91       	pop	r28
    5c80:	08 95       	ret

00005c82 <_Z11getNextModehh>:
    5c82:	88 23       	and	r24, r24
    5c84:	99 f0       	breq	.+38     	; 0x5cac <_Z11getNextModehh+0x2a>
    5c86:	81 30       	cpi	r24, 0x01	; 1
    5c88:	11 f4       	brne	.+4      	; 0x5c8e <_Z11getNextModehh+0xc>
    5c8a:	82 e0       	ldi	r24, 0x02	; 2
    5c8c:	08 95       	ret
    5c8e:	61 30       	cpi	r22, 0x01	; 1
    5c90:	79 f4       	brne	.+30     	; 0x5cb0 <_Z11getNextModehh+0x2e>
    5c92:	83 30       	cpi	r24, 0x03	; 3
    5c94:	29 f0       	breq	.+10     	; 0x5ca0 <_Z11getNextModehh+0x1e>
    5c96:	84 30       	cpi	r24, 0x04	; 4
    5c98:	39 f0       	breq	.+14     	; 0x5ca8 <_Z11getNextModehh+0x26>
    5c9a:	82 30       	cpi	r24, 0x02	; 2
    5c9c:	19 f4       	brne	.+6      	; 0x5ca4 <_Z11getNextModehh+0x22>
    5c9e:	0a c0       	rjmp	.+20     	; 0x5cb4 <_Z11getNextModehh+0x32>
    5ca0:	84 e0       	ldi	r24, 0x04	; 4
    5ca2:	08 95       	ret
    5ca4:	80 e0       	ldi	r24, 0x00	; 0
    5ca6:	08 95       	ret
    5ca8:	80 e0       	ldi	r24, 0x00	; 0
    5caa:	08 95       	ret
    5cac:	81 e0       	ldi	r24, 0x01	; 1
    5cae:	08 95       	ret
    5cb0:	80 e0       	ldi	r24, 0x00	; 0
    5cb2:	08 95       	ret
    5cb4:	83 e0       	ldi	r24, 0x03	; 3
    5cb6:	08 95       	ret

00005cb8 <_Z14getBankProgramPhS_S_S_>:
    5cb8:	ff 92       	push	r15
    5cba:	0f 93       	push	r16
    5cbc:	1f 93       	push	r17
    5cbe:	cf 93       	push	r28
    5cc0:	df 93       	push	r29
    5cc2:	d9 01       	movw	r26, r18
    5cc4:	c6 2f       	mov	r28, r22
    5cc6:	d7 2f       	mov	r29, r23
    5cc8:	04 2f       	mov	r16, r20
    5cca:	15 2f       	mov	r17, r21
    5ccc:	2e 5f       	subi	r18, 0xFE	; 254
    5cce:	3f 4f       	sbci	r19, 0xFF	; 255
    5cd0:	68 94       	set
    5cd2:	ff 24       	eor	r15, r15
    5cd4:	f2 f8       	bld	r15, 2
    5cd6:	fc 01       	movw	r30, r24
    5cd8:	41 91       	ld	r20, Z+
    5cda:	cf 01       	movw	r24, r30
    5cdc:	50 e0       	ldi	r21, 0x00	; 0
    5cde:	4d 30       	cpi	r20, 0x0D	; 13
    5ce0:	51 05       	cpc	r21, r1
    5ce2:	08 f0       	brcs	.+2      	; 0x5ce6 <_Z14getBankProgramPhS_S_S_+0x2e>
    5ce4:	e5 c0       	rjmp	.+458    	; 0x5eb0 <_Z14getBankProgramPhS_S_S_+0x1f8>
    5ce6:	fa 01       	movw	r30, r20
    5ce8:	ec 53       	subi	r30, 0x3C	; 60
    5cea:	fe 4f       	sbci	r31, 0xFE	; 254
    5cec:	0c 94 58 37 	jmp	0x6eb0	; 0x6eb0 <__tablejump2__>
    5cf0:	e8 81       	ld	r30, Y
    5cf2:	f0 e0       	ldi	r31, 0x00	; 0
    5cf4:	ee 0f       	add	r30, r30
    5cf6:	ff 1f       	adc	r31, r31
    5cf8:	e8 51       	subi	r30, 0x18	; 24
    5cfa:	f3 4f       	sbci	r31, 0xF3	; 243
    5cfc:	44 91       	lpm	r20, Z
    5cfe:	f8 01       	movw	r30, r16
    5d00:	40 83       	st	Z, r20
    5d02:	e8 81       	ld	r30, Y
    5d04:	f0 e0       	ldi	r31, 0x00	; 0
    5d06:	ee 0f       	add	r30, r30
    5d08:	ff 1f       	adc	r31, r31
    5d0a:	e7 51       	subi	r30, 0x17	; 23
    5d0c:	f3 4f       	sbci	r31, 0xF3	; 243
    5d0e:	e4 91       	lpm	r30, Z
    5d10:	ec 93       	st	X, r30
    5d12:	ce c0       	rjmp	.+412    	; 0x5eb0 <_Z14getBankProgramPhS_S_S_+0x1f8>
    5d14:	e8 81       	ld	r30, Y
    5d16:	f0 e0       	ldi	r31, 0x00	; 0
    5d18:	ee 0f       	add	r30, r30
    5d1a:	ff 1f       	adc	r31, r31
    5d1c:	ea 54       	subi	r30, 0x4A	; 74
    5d1e:	f3 4f       	sbci	r31, 0xF3	; 243
    5d20:	44 91       	lpm	r20, Z
    5d22:	f8 01       	movw	r30, r16
    5d24:	40 83       	st	Z, r20
    5d26:	e8 81       	ld	r30, Y
    5d28:	f0 e0       	ldi	r31, 0x00	; 0
    5d2a:	ee 0f       	add	r30, r30
    5d2c:	ff 1f       	adc	r31, r31
    5d2e:	e9 54       	subi	r30, 0x49	; 73
    5d30:	f3 4f       	sbci	r31, 0xF3	; 243
    5d32:	e4 91       	lpm	r30, Z
    5d34:	ec 93       	st	X, r30
    5d36:	bc c0       	rjmp	.+376    	; 0x5eb0 <_Z14getBankProgramPhS_S_S_+0x1f8>
    5d38:	e8 81       	ld	r30, Y
    5d3a:	f0 e0       	ldi	r31, 0x00	; 0
    5d3c:	ee 0f       	add	r30, r30
    5d3e:	ff 1f       	adc	r31, r31
    5d40:	e0 59       	subi	r30, 0x90	; 144
    5d42:	f3 4f       	sbci	r31, 0xF3	; 243
    5d44:	44 91       	lpm	r20, Z
    5d46:	f8 01       	movw	r30, r16
    5d48:	40 83       	st	Z, r20
    5d4a:	e8 81       	ld	r30, Y
    5d4c:	f0 e0       	ldi	r31, 0x00	; 0
    5d4e:	ee 0f       	add	r30, r30
    5d50:	ff 1f       	adc	r31, r31
    5d52:	ef 58       	subi	r30, 0x8F	; 143
    5d54:	f3 4f       	sbci	r31, 0xF3	; 243
    5d56:	e4 91       	lpm	r30, Z
    5d58:	ec 93       	st	X, r30
    5d5a:	aa c0       	rjmp	.+340    	; 0x5eb0 <_Z14getBankProgramPhS_S_S_+0x1f8>
    5d5c:	e8 81       	ld	r30, Y
    5d5e:	f0 e0       	ldi	r31, 0x00	; 0
    5d60:	ee 0f       	add	r30, r30
    5d62:	ff 1f       	adc	r31, r31
    5d64:	e4 5b       	subi	r30, 0xB4	; 180
    5d66:	f3 4f       	sbci	r31, 0xF3	; 243
    5d68:	44 91       	lpm	r20, Z
    5d6a:	f8 01       	movw	r30, r16
    5d6c:	40 83       	st	Z, r20
    5d6e:	e8 81       	ld	r30, Y
    5d70:	f0 e0       	ldi	r31, 0x00	; 0
    5d72:	ee 0f       	add	r30, r30
    5d74:	ff 1f       	adc	r31, r31
    5d76:	e3 5b       	subi	r30, 0xB3	; 179
    5d78:	f3 4f       	sbci	r31, 0xF3	; 243
    5d7a:	e4 91       	lpm	r30, Z
    5d7c:	ec 93       	st	X, r30
    5d7e:	98 c0       	rjmp	.+304    	; 0x5eb0 <_Z14getBankProgramPhS_S_S_+0x1f8>
    5d80:	e8 81       	ld	r30, Y
    5d82:	f0 e0       	ldi	r31, 0x00	; 0
    5d84:	ee 0f       	add	r30, r30
    5d86:	ff 1f       	adc	r31, r31
    5d88:	ec 53       	subi	r30, 0x3C	; 60
    5d8a:	f4 4f       	sbci	r31, 0xF4	; 244
    5d8c:	44 91       	lpm	r20, Z
    5d8e:	f8 01       	movw	r30, r16
    5d90:	40 83       	st	Z, r20
    5d92:	e8 81       	ld	r30, Y
    5d94:	f0 e0       	ldi	r31, 0x00	; 0
    5d96:	ee 0f       	add	r30, r30
    5d98:	ff 1f       	adc	r31, r31
    5d9a:	eb 53       	subi	r30, 0x3B	; 59
    5d9c:	f4 4f       	sbci	r31, 0xF4	; 244
    5d9e:	e4 91       	lpm	r30, Z
    5da0:	ec 93       	st	X, r30
    5da2:	86 c0       	rjmp	.+268    	; 0x5eb0 <_Z14getBankProgramPhS_S_S_+0x1f8>
    5da4:	e8 81       	ld	r30, Y
    5da6:	f0 e0       	ldi	r31, 0x00	; 0
    5da8:	ee 0f       	add	r30, r30
    5daa:	ff 1f       	adc	r31, r31
    5dac:	ec 5b       	subi	r30, 0xBC	; 188
    5dae:	f4 4f       	sbci	r31, 0xF4	; 244
    5db0:	44 91       	lpm	r20, Z
    5db2:	f8 01       	movw	r30, r16
    5db4:	40 83       	st	Z, r20
    5db6:	e8 81       	ld	r30, Y
    5db8:	f0 e0       	ldi	r31, 0x00	; 0
    5dba:	ee 0f       	add	r30, r30
    5dbc:	ff 1f       	adc	r31, r31
    5dbe:	eb 5b       	subi	r30, 0xBB	; 187
    5dc0:	f4 4f       	sbci	r31, 0xF4	; 244
    5dc2:	e4 91       	lpm	r30, Z
    5dc4:	ec 93       	st	X, r30
    5dc6:	74 c0       	rjmp	.+232    	; 0x5eb0 <_Z14getBankProgramPhS_S_S_+0x1f8>
    5dc8:	e8 81       	ld	r30, Y
    5dca:	f0 e0       	ldi	r31, 0x00	; 0
    5dcc:	ee 0f       	add	r30, r30
    5dce:	ff 1f       	adc	r31, r31
    5dd0:	e4 50       	subi	r30, 0x04	; 4
    5dd2:	f5 4f       	sbci	r31, 0xF5	; 245
    5dd4:	44 91       	lpm	r20, Z
    5dd6:	f8 01       	movw	r30, r16
    5dd8:	40 83       	st	Z, r20
    5dda:	e8 81       	ld	r30, Y
    5ddc:	f0 e0       	ldi	r31, 0x00	; 0
    5dde:	ee 0f       	add	r30, r30
    5de0:	ff 1f       	adc	r31, r31
    5de2:	e3 50       	subi	r30, 0x03	; 3
    5de4:	f5 4f       	sbci	r31, 0xF5	; 245
    5de6:	e4 91       	lpm	r30, Z
    5de8:	ec 93       	st	X, r30
    5dea:	62 c0       	rjmp	.+196    	; 0x5eb0 <_Z14getBankProgramPhS_S_S_+0x1f8>
    5dec:	e8 81       	ld	r30, Y
    5dee:	f0 e0       	ldi	r31, 0x00	; 0
    5df0:	ee 0f       	add	r30, r30
    5df2:	ff 1f       	adc	r31, r31
    5df4:	e4 56       	subi	r30, 0x64	; 100
    5df6:	f5 4f       	sbci	r31, 0xF5	; 245
    5df8:	44 91       	lpm	r20, Z
    5dfa:	f8 01       	movw	r30, r16
    5dfc:	40 83       	st	Z, r20
    5dfe:	e8 81       	ld	r30, Y
    5e00:	f0 e0       	ldi	r31, 0x00	; 0
    5e02:	ee 0f       	add	r30, r30
    5e04:	ff 1f       	adc	r31, r31
    5e06:	e3 56       	subi	r30, 0x63	; 99
    5e08:	f5 4f       	sbci	r31, 0xF5	; 245
    5e0a:	e4 91       	lpm	r30, Z
    5e0c:	ec 93       	st	X, r30
    5e0e:	50 c0       	rjmp	.+160    	; 0x5eb0 <_Z14getBankProgramPhS_S_S_+0x1f8>
    5e10:	e8 81       	ld	r30, Y
    5e12:	f0 e0       	ldi	r31, 0x00	; 0
    5e14:	ee 0f       	add	r30, r30
    5e16:	ff 1f       	adc	r31, r31
    5e18:	ec 5c       	subi	r30, 0xCC	; 204
    5e1a:	f5 4f       	sbci	r31, 0xF5	; 245
    5e1c:	44 91       	lpm	r20, Z
    5e1e:	f8 01       	movw	r30, r16
    5e20:	40 83       	st	Z, r20
    5e22:	e8 81       	ld	r30, Y
    5e24:	f0 e0       	ldi	r31, 0x00	; 0
    5e26:	ee 0f       	add	r30, r30
    5e28:	ff 1f       	adc	r31, r31
    5e2a:	eb 5c       	subi	r30, 0xCB	; 203
    5e2c:	f5 4f       	sbci	r31, 0xF5	; 245
    5e2e:	e4 91       	lpm	r30, Z
    5e30:	ec 93       	st	X, r30
    5e32:	3e c0       	rjmp	.+124    	; 0x5eb0 <_Z14getBankProgramPhS_S_S_+0x1f8>
    5e34:	e8 81       	ld	r30, Y
    5e36:	f0 e0       	ldi	r31, 0x00	; 0
    5e38:	ee 0f       	add	r30, r30
    5e3a:	ff 1f       	adc	r31, r31
    5e3c:	e2 51       	subi	r30, 0x12	; 18
    5e3e:	f6 4f       	sbci	r31, 0xF6	; 246
    5e40:	44 91       	lpm	r20, Z
    5e42:	f8 01       	movw	r30, r16
    5e44:	40 83       	st	Z, r20
    5e46:	e8 81       	ld	r30, Y
    5e48:	f0 e0       	ldi	r31, 0x00	; 0
    5e4a:	ee 0f       	add	r30, r30
    5e4c:	ff 1f       	adc	r31, r31
    5e4e:	e1 51       	subi	r30, 0x11	; 17
    5e50:	f6 4f       	sbci	r31, 0xF6	; 246
    5e52:	e4 91       	lpm	r30, Z
    5e54:	ec 93       	st	X, r30
    5e56:	2c c0       	rjmp	.+88     	; 0x5eb0 <_Z14getBankProgramPhS_S_S_+0x1f8>
    5e58:	e8 81       	ld	r30, Y
    5e5a:	f0 e0       	ldi	r31, 0x00	; 0
    5e5c:	ee 0f       	add	r30, r30
    5e5e:	ff 1f       	adc	r31, r31
    5e60:	e0 56       	subi	r30, 0x60	; 96
    5e62:	f6 4f       	sbci	r31, 0xF6	; 246
    5e64:	44 91       	lpm	r20, Z
    5e66:	f8 01       	movw	r30, r16
    5e68:	40 83       	st	Z, r20
    5e6a:	e8 81       	ld	r30, Y
    5e6c:	f0 e0       	ldi	r31, 0x00	; 0
    5e6e:	ee 0f       	add	r30, r30
    5e70:	ff 1f       	adc	r31, r31
    5e72:	ef 55       	subi	r30, 0x5F	; 95
    5e74:	f6 4f       	sbci	r31, 0xF6	; 246
    5e76:	e4 91       	lpm	r30, Z
    5e78:	ec 93       	st	X, r30
    5e7a:	1a c0       	rjmp	.+52     	; 0x5eb0 <_Z14getBankProgramPhS_S_S_+0x1f8>
    5e7c:	e8 81       	ld	r30, Y
    5e7e:	f0 e0       	ldi	r31, 0x00	; 0
    5e80:	ee 0f       	add	r30, r30
    5e82:	ff 1f       	adc	r31, r31
    5e84:	e2 5d       	subi	r30, 0xD2	; 210
    5e86:	f6 4f       	sbci	r31, 0xF6	; 246
    5e88:	44 91       	lpm	r20, Z
    5e8a:	f8 01       	movw	r30, r16
    5e8c:	40 83       	st	Z, r20
    5e8e:	e8 81       	ld	r30, Y
    5e90:	f0 e0       	ldi	r31, 0x00	; 0
    5e92:	ee 0f       	add	r30, r30
    5e94:	ff 1f       	adc	r31, r31
    5e96:	e1 5d       	subi	r30, 0xD1	; 209
    5e98:	f6 4f       	sbci	r31, 0xF6	; 246
    5e9a:	e4 91       	lpm	r30, Z
    5e9c:	ec 93       	st	X, r30
    5e9e:	08 c0       	rjmp	.+16     	; 0x5eb0 <_Z14getBankProgramPhS_S_S_+0x1f8>
    5ea0:	f8 01       	movw	r30, r16
    5ea2:	f0 82       	st	Z, r15
    5ea4:	e8 81       	ld	r30, Y
    5ea6:	f0 e0       	ldi	r31, 0x00	; 0
    5ea8:	e1 50       	subi	r30, 0x01	; 1
    5eaa:	f7 4f       	sbci	r31, 0xF7	; 247
    5eac:	e4 91       	lpm	r30, Z
    5eae:	ec 93       	st	X, r30
    5eb0:	4c 91       	ld	r20, X
    5eb2:	41 50       	subi	r20, 0x01	; 1
    5eb4:	4d 93       	st	X+, r20
    5eb6:	21 96       	adiw	r28, 0x01	; 1
    5eb8:	0f 5f       	subi	r16, 0xFF	; 255
    5eba:	1f 4f       	sbci	r17, 0xFF	; 255
    5ebc:	a2 17       	cp	r26, r18
    5ebe:	b3 07       	cpc	r27, r19
    5ec0:	09 f0       	breq	.+2      	; 0x5ec4 <_Z14getBankProgramPhS_S_S_+0x20c>
    5ec2:	09 cf       	rjmp	.-494    	; 0x5cd6 <_Z14getBankProgramPhS_S_S_+0x1e>
    5ec4:	df 91       	pop	r29
    5ec6:	cf 91       	pop	r28
    5ec8:	1f 91       	pop	r17
    5eca:	0f 91       	pop	r16
    5ecc:	ff 90       	pop	r15
    5ece:	08 95       	ret

00005ed0 <_Z10savePresethPhS_bh>:
    5ed0:	0f 93       	push	r16
    5ed2:	cf 93       	push	r28
    5ed4:	df 93       	push	r29
    5ed6:	00 d0       	rcall	.+0      	; 0x5ed8 <_Z10savePresethPhS_bh+0x8>
    5ed8:	00 d0       	rcall	.+0      	; 0x5eda <_Z10savePresethPhS_bh+0xa>
    5eda:	00 d0       	rcall	.+0      	; 0x5edc <_Z10savePresethPhS_bh+0xc>
    5edc:	cd b7       	in	r28, 0x3d	; 61
    5ede:	de b7       	in	r29, 0x3e	; 62
    5ee0:	86 30       	cpi	r24, 0x06	; 6
    5ee2:	10 f5       	brcc	.+68     	; 0x5f28 <_Z10savePresethPhS_bh+0x58>
    5ee4:	fa 01       	movw	r30, r20
    5ee6:	db 01       	movw	r26, r22
    5ee8:	9c 91       	ld	r25, X
    5eea:	99 83       	std	Y+1, r25	; 0x01
    5eec:	90 81       	ld	r25, Z
    5eee:	9a 83       	std	Y+2, r25	; 0x02
    5ef0:	11 96       	adiw	r26, 0x01	; 1
    5ef2:	9c 91       	ld	r25, X
    5ef4:	9b 83       	std	Y+3, r25	; 0x03
    5ef6:	91 81       	ldd	r25, Z+1	; 0x01
    5ef8:	9c 83       	std	Y+4, r25	; 0x04
    5efa:	2d 83       	std	Y+5, r18	; 0x05
    5efc:	0e 83       	std	Y+6, r16	; 0x06
    5efe:	e8 2f       	mov	r30, r24
    5f00:	f0 e0       	ldi	r31, 0x00	; 0
    5f02:	ee 0f       	add	r30, r30
    5f04:	ff 1f       	adc	r31, r31
    5f06:	e4 51       	subi	r30, 0x14	; 20
    5f08:	fd 4f       	sbci	r31, 0xFD	; 253
    5f0a:	21 e0       	ldi	r18, 0x01	; 1
    5f0c:	46 e0       	ldi	r20, 0x06	; 6
    5f0e:	50 e0       	ldi	r21, 0x00	; 0
    5f10:	be 01       	movw	r22, r28
    5f12:	6f 5f       	subi	r22, 0xFF	; 255
    5f14:	7f 4f       	sbci	r23, 0xFF	; 255
    5f16:	80 81       	ld	r24, Z
    5f18:	91 81       	ldd	r25, Z+1	; 0x01
    5f1a:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <_ZN4OSFS7newFileEPKcPvjb>
    5f1e:	21 e0       	ldi	r18, 0x01	; 1
    5f20:	89 2b       	or	r24, r25
    5f22:	19 f0       	breq	.+6      	; 0x5f2a <_Z10savePresethPhS_bh+0x5a>
    5f24:	20 e0       	ldi	r18, 0x00	; 0
    5f26:	01 c0       	rjmp	.+2      	; 0x5f2a <_Z10savePresethPhS_bh+0x5a>
    5f28:	20 e0       	ldi	r18, 0x00	; 0
    5f2a:	82 2f       	mov	r24, r18
    5f2c:	26 96       	adiw	r28, 0x06	; 6
    5f2e:	0f b6       	in	r0, 0x3f	; 63
    5f30:	f8 94       	cli
    5f32:	de bf       	out	0x3e, r29	; 62
    5f34:	0f be       	out	0x3f, r0	; 63
    5f36:	cd bf       	out	0x3d, r28	; 61
    5f38:	df 91       	pop	r29
    5f3a:	cf 91       	pop	r28
    5f3c:	0f 91       	pop	r16
    5f3e:	08 95       	ret

00005f40 <_Z10readPresethPhS_PbS_>:
    5f40:	8f 92       	push	r8
    5f42:	9f 92       	push	r9
    5f44:	af 92       	push	r10
    5f46:	bf 92       	push	r11
    5f48:	cf 92       	push	r12
    5f4a:	df 92       	push	r13
    5f4c:	ef 92       	push	r14
    5f4e:	ff 92       	push	r15
    5f50:	0f 93       	push	r16
    5f52:	1f 93       	push	r17
    5f54:	cf 93       	push	r28
    5f56:	df 93       	push	r29
    5f58:	cd b7       	in	r28, 0x3d	; 61
    5f5a:	de b7       	in	r29, 0x3e	; 62
    5f5c:	2a 97       	sbiw	r28, 0x0a	; 10
    5f5e:	0f b6       	in	r0, 0x3f	; 63
    5f60:	f8 94       	cli
    5f62:	de bf       	out	0x3e, r29	; 62
    5f64:	0f be       	out	0x3f, r0	; 63
    5f66:	cd bf       	out	0x3d, r28	; 61
    5f68:	86 30       	cpi	r24, 0x06	; 6
    5f6a:	08 f0       	brcs	.+2      	; 0x5f6e <_Z10readPresethPhS_PbS_+0x2e>
    5f6c:	46 c0       	rjmp	.+140    	; 0x5ffa <_Z10readPresethPhS_PbS_+0xba>
    5f6e:	59 01       	movw	r10, r18
    5f70:	7a 01       	movw	r14, r20
    5f72:	6b 01       	movw	r12, r22
    5f74:	e8 2f       	mov	r30, r24
    5f76:	f0 e0       	ldi	r31, 0x00	; 0
    5f78:	ee 0f       	add	r30, r30
    5f7a:	ff 1f       	adc	r31, r31
    5f7c:	e4 51       	subi	r30, 0x14	; 20
    5f7e:	fd 4f       	sbci	r31, 0xFD	; 253
    5f80:	80 80       	ld	r8, Z
    5f82:	91 80       	ldd	r9, Z+1	; 0x01
    5f84:	20 e0       	ldi	r18, 0x00	; 0
    5f86:	30 e0       	ldi	r19, 0x00	; 0
    5f88:	40 e0       	ldi	r20, 0x00	; 0
    5f8a:	50 e0       	ldi	r21, 0x00	; 0
    5f8c:	b4 01       	movw	r22, r8
    5f8e:	8f ed       	ldi	r24, 0xDF	; 223
    5f90:	93 e0       	ldi	r25, 0x03	; 3
    5f92:	0e 94 39 1f 	call	0x3e72	; 0x3e72 <_ZN12Adafruit_GFX4textEPKcii>
    5f96:	ae 01       	movw	r20, r28
    5f98:	49 5f       	subi	r20, 0xF9	; 249
    5f9a:	5f 4f       	sbci	r21, 0xFF	; 255
    5f9c:	be 01       	movw	r22, r28
    5f9e:	67 5f       	subi	r22, 0xF7	; 247
    5fa0:	7f 4f       	sbci	r23, 0xFF	; 255
    5fa2:	c4 01       	movw	r24, r8
    5fa4:	0e 94 07 1a 	call	0x340e	; 0x340e <_ZN4OSFS11getFileInfoEPKcRjS2_>
    5fa8:	89 2b       	or	r24, r25
    5faa:	59 f5       	brne	.+86     	; 0x6002 <_Z10readPresethPhS_PbS_+0xc2>
    5fac:	8f 81       	ldd	r24, Y+7	; 0x07
    5fae:	98 85       	ldd	r25, Y+8	; 0x08
    5fb0:	06 97       	sbiw	r24, 0x06	; 6
    5fb2:	39 f5       	brne	.+78     	; 0x6002 <_Z10readPresethPhS_PbS_+0xc2>
    5fb4:	ae 01       	movw	r20, r28
    5fb6:	4f 5f       	subi	r20, 0xFF	; 255
    5fb8:	5f 4f       	sbci	r21, 0xFF	; 255
    5fba:	66 e0       	ldi	r22, 0x06	; 6
    5fbc:	70 e0       	ldi	r23, 0x00	; 0
    5fbe:	89 85       	ldd	r24, Y+9	; 0x09
    5fc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    5fc2:	0e 94 8f 19 	call	0x331e	; 0x331e <_ZN4OSFS13readNBytesChkEjjPv>
    5fc6:	89 2b       	or	r24, r25
    5fc8:	d1 f4       	brne	.+52     	; 0x5ffe <_Z10readPresethPhS_PbS_+0xbe>
    5fca:	89 81       	ldd	r24, Y+1	; 0x01
    5fcc:	f6 01       	movw	r30, r12
    5fce:	80 83       	st	Z, r24
    5fd0:	8a 81       	ldd	r24, Y+2	; 0x02
    5fd2:	f7 01       	movw	r30, r14
    5fd4:	80 83       	st	Z, r24
    5fd6:	8b 81       	ldd	r24, Y+3	; 0x03
    5fd8:	f6 01       	movw	r30, r12
    5fda:	81 83       	std	Z+1, r24	; 0x01
    5fdc:	8c 81       	ldd	r24, Y+4	; 0x04
    5fde:	f7 01       	movw	r30, r14
    5fe0:	81 83       	std	Z+1, r24	; 0x01
    5fe2:	81 e0       	ldi	r24, 0x01	; 1
    5fe4:	9d 81       	ldd	r25, Y+5	; 0x05
    5fe6:	91 11       	cpse	r25, r1
    5fe8:	01 c0       	rjmp	.+2      	; 0x5fec <_Z10readPresethPhS_PbS_+0xac>
    5fea:	80 e0       	ldi	r24, 0x00	; 0
    5fec:	f5 01       	movw	r30, r10
    5fee:	80 83       	st	Z, r24
    5ff0:	8e 81       	ldd	r24, Y+6	; 0x06
    5ff2:	f8 01       	movw	r30, r16
    5ff4:	80 83       	st	Z, r24
    5ff6:	81 e0       	ldi	r24, 0x01	; 1
    5ff8:	05 c0       	rjmp	.+10     	; 0x6004 <_Z10readPresethPhS_PbS_+0xc4>
    5ffa:	80 e0       	ldi	r24, 0x00	; 0
    5ffc:	03 c0       	rjmp	.+6      	; 0x6004 <_Z10readPresethPhS_PbS_+0xc4>
    5ffe:	80 e0       	ldi	r24, 0x00	; 0
    6000:	01 c0       	rjmp	.+2      	; 0x6004 <_Z10readPresethPhS_PbS_+0xc4>
    6002:	80 e0       	ldi	r24, 0x00	; 0
    6004:	2a 96       	adiw	r28, 0x0a	; 10
    6006:	0f b6       	in	r0, 0x3f	; 63
    6008:	f8 94       	cli
    600a:	de bf       	out	0x3e, r29	; 62
    600c:	0f be       	out	0x3f, r0	; 63
    600e:	cd bf       	out	0x3d, r28	; 61
    6010:	df 91       	pop	r29
    6012:	cf 91       	pop	r28
    6014:	1f 91       	pop	r17
    6016:	0f 91       	pop	r16
    6018:	ff 90       	pop	r15
    601a:	ef 90       	pop	r14
    601c:	df 90       	pop	r13
    601e:	cf 90       	pop	r12
    6020:	bf 90       	pop	r11
    6022:	af 90       	pop	r10
    6024:	9f 90       	pop	r9
    6026:	8f 90       	pop	r8
    6028:	08 95       	ret

0000602a <_ZN4OSFS10readNBytesEjjPh>:
    602a:	ef 92       	push	r14
    602c:	ff 92       	push	r15
    602e:	0f 93       	push	r16
    6030:	1f 93       	push	r17
    6032:	cf 93       	push	r28
    6034:	df 93       	push	r29
    6036:	ec 01       	movw	r28, r24
    6038:	8a 01       	movw	r16, r20
    603a:	7c 01       	movw	r14, r24
    603c:	e6 0e       	add	r14, r22
    603e:	f7 1e       	adc	r15, r23
    6040:	8e 15       	cp	r24, r14
    6042:	9f 05       	cpc	r25, r15
    6044:	50 f4       	brcc	.+20     	; 0x605a <_ZN4OSFS10readNBytesEjjPh+0x30>
    6046:	ce 01       	movw	r24, r28
    6048:	0e 94 85 37 	call	0x6f0a	; 0x6f0a <eeprom_read_byte>
    604c:	f8 01       	movw	r30, r16
    604e:	81 93       	st	Z+, r24
    6050:	8f 01       	movw	r16, r30
    6052:	21 96       	adiw	r28, 0x01	; 1
    6054:	ce 15       	cp	r28, r14
    6056:	df 05       	cpc	r29, r15
    6058:	b1 f7       	brne	.-20     	; 0x6046 <_ZN4OSFS10readNBytesEjjPh+0x1c>
    605a:	df 91       	pop	r29
    605c:	cf 91       	pop	r28
    605e:	1f 91       	pop	r17
    6060:	0f 91       	pop	r16
    6062:	ff 90       	pop	r15
    6064:	ef 90       	pop	r14
    6066:	08 95       	ret

00006068 <_ZN4OSFS11writeNBytesEjjPKh>:
    6068:	cf 92       	push	r12
    606a:	df 92       	push	r13
    606c:	ef 92       	push	r14
    606e:	ff 92       	push	r15
    6070:	1f 93       	push	r17
    6072:	cf 93       	push	r28
    6074:	df 93       	push	r29
    6076:	ec 01       	movw	r28, r24
    6078:	6c 01       	movw	r12, r24
    607a:	c6 0e       	add	r12, r22
    607c:	d7 1e       	adc	r13, r23
    607e:	8c 15       	cp	r24, r12
    6080:	9d 05       	cpc	r25, r13
    6082:	90 f4       	brcc	.+36     	; 0x60a8 <_ZN4OSFS11writeNBytesEjjPKh+0x40>
    6084:	e4 2e       	mov	r14, r20
    6086:	f5 2e       	mov	r15, r21
    6088:	f7 01       	movw	r30, r14
    608a:	11 91       	ld	r17, Z+
    608c:	7f 01       	movw	r14, r30
    608e:	ce 01       	movw	r24, r28
    6090:	0e 94 85 37 	call	0x6f0a	; 0x6f0a <eeprom_read_byte>
    6094:	18 17       	cp	r17, r24
    6096:	21 f0       	breq	.+8      	; 0x60a0 <_ZN4OSFS11writeNBytesEjjPKh+0x38>
    6098:	61 2f       	mov	r22, r17
    609a:	ce 01       	movw	r24, r28
    609c:	0e 94 8d 37 	call	0x6f1a	; 0x6f1a <eeprom_write_byte>
    60a0:	21 96       	adiw	r28, 0x01	; 1
    60a2:	cc 15       	cp	r28, r12
    60a4:	dd 05       	cpc	r29, r13
    60a6:	80 f3       	brcs	.-32     	; 0x6088 <_ZN4OSFS11writeNBytesEjjPKh+0x20>
    60a8:	df 91       	pop	r29
    60aa:	cf 91       	pop	r28
    60ac:	1f 91       	pop	r17
    60ae:	ff 90       	pop	r15
    60b0:	ef 90       	pop	r14
    60b2:	df 90       	pop	r13
    60b4:	cf 90       	pop	r12
    60b6:	08 95       	ret

000060b8 <_Z14showFamilyNamePhhh>:
	showCurrentMode(mod,hand,midiThru);
	showFamilyName(family,hand,mod);
	showInstrumentName(bank,program,hand,mod);
}

void showFamilyName(uint8_t *ind,uint8_t hand,uint8_t currentMode){
    60b8:	ef 92       	push	r14
    60ba:	ff 92       	push	r15
    60bc:	0f 93       	push	r16
    60be:	1f 93       	push	r17
    60c0:	cf 93       	push	r28
    60c2:	df 93       	push	r29
    60c4:	ec 01       	movw	r28, r24
	switch(hand){
    60c6:	66 23       	and	r22, r22
    60c8:	d1 f1       	breq	.+116    	; 0x613e <_Z14showFamilyNamePhhh+0x86>
    60ca:	61 30       	cpi	r22, 0x01	; 1
    60cc:	09 f0       	breq	.+2      	; 0x60d0 <_Z14showFamilyNamePhhh+0x18>
    60ce:	6d c0       	rjmp	.+218    	; 0x61aa <_Z14showFamilyNamePhhh+0xf2>
		case RIGHT: if(currentMode == FAMILY_SELECT_RIGHT)
    60d0:	41 30       	cpi	r20, 0x01	; 1
    60d2:	91 f4       	brne	.+36     	; 0x60f8 <_Z14showFamilyNamePhhh+0x40>
						tft.fillRect(0,20,ST7735_TFTHEIGHT,20,ST7735_BLUE);
    60d4:	0f 2e       	mov	r0, r31
    60d6:	ff e1       	ldi	r31, 0x1F	; 31
    60d8:	ef 2e       	mov	r14, r31
    60da:	f1 2c       	mov	r15, r1
    60dc:	f0 2d       	mov	r31, r0
    60de:	04 e1       	ldi	r16, 0x14	; 20
    60e0:	10 e0       	ldi	r17, 0x00	; 0
    60e2:	20 ea       	ldi	r18, 0xA0	; 160
    60e4:	30 e0       	ldi	r19, 0x00	; 0
    60e6:	44 e1       	ldi	r20, 0x14	; 20
    60e8:	50 e0       	ldi	r21, 0x00	; 0
    60ea:	60 e0       	ldi	r22, 0x00	; 0
    60ec:	70 e0       	ldi	r23, 0x00	; 0
    60ee:	8f ed       	ldi	r24, 0xDF	; 223
    60f0:	93 e0       	ldi	r25, 0x03	; 3
    60f2:	0e 94 be 24 	call	0x497c	; 0x497c <_ZN15Adafruit_ST77358fillRectEiiiij>
    60f6:	12 c0       	rjmp	.+36     	; 0x611c <_Z14showFamilyNamePhhh+0x64>
					else
						tft.fillRect(0,20,ST7735_TFTHEIGHT,20,ST7735_MAGENTA);
    60f8:	0f 2e       	mov	r0, r31
    60fa:	ff e1       	ldi	r31, 0x1F	; 31
    60fc:	ef 2e       	mov	r14, r31
    60fe:	f8 ef       	ldi	r31, 0xF8	; 248
    6100:	ff 2e       	mov	r15, r31
    6102:	f0 2d       	mov	r31, r0
    6104:	04 e1       	ldi	r16, 0x14	; 20
    6106:	10 e0       	ldi	r17, 0x00	; 0
    6108:	20 ea       	ldi	r18, 0xA0	; 160
    610a:	30 e0       	ldi	r19, 0x00	; 0
    610c:	44 e1       	ldi	r20, 0x14	; 20
    610e:	50 e0       	ldi	r21, 0x00	; 0
    6110:	60 e0       	ldi	r22, 0x00	; 0
    6112:	70 e0       	ldi	r23, 0x00	; 0
    6114:	8f ed       	ldi	r24, 0xDF	; 223
    6116:	93 e0       	ldi	r25, 0x03	; 3
    6118:	0e 94 be 24 	call	0x497c	; 0x497c <_ZN15Adafruit_ST77358fillRectEiiiij>
					tft.text(family_names[ind[RIGHT]],0,20);
    611c:	e9 81       	ldd	r30, Y+1	; 0x01
    611e:	f0 e0       	ldi	r31, 0x00	; 0
    6120:	ee 0f       	add	r30, r30
    6122:	ff 1f       	adc	r31, r31
    6124:	ee 52       	subi	r30, 0x2E	; 46
    6126:	fd 4f       	sbci	r31, 0xFD	; 253
    6128:	60 81       	ld	r22, Z
    612a:	71 81       	ldd	r23, Z+1	; 0x01
    612c:	24 e1       	ldi	r18, 0x14	; 20
    612e:	30 e0       	ldi	r19, 0x00	; 0
    6130:	40 e0       	ldi	r20, 0x00	; 0
    6132:	50 e0       	ldi	r21, 0x00	; 0
    6134:	8f ed       	ldi	r24, 0xDF	; 223
    6136:	93 e0       	ldi	r25, 0x03	; 3
    6138:	0e 94 39 1f 	call	0x3e72	; 0x3e72 <_ZN12Adafruit_GFX4textEPKcii>
					break;
    613c:	36 c0       	rjmp	.+108    	; 0x61aa <_Z14showFamilyNamePhhh+0xf2>
		case LEFT:	if(currentMode == FAMILY_SELECT_LEFT)
    613e:	43 30       	cpi	r20, 0x03	; 3
    6140:	91 f4       	brne	.+36     	; 0x6166 <_Z14showFamilyNamePhhh+0xae>
						tft.fillRect(0,80,ST7735_TFTHEIGHT,20,ST7735_BLUE);
    6142:	0f 2e       	mov	r0, r31
    6144:	ff e1       	ldi	r31, 0x1F	; 31
    6146:	ef 2e       	mov	r14, r31
    6148:	f1 2c       	mov	r15, r1
    614a:	f0 2d       	mov	r31, r0
    614c:	04 e1       	ldi	r16, 0x14	; 20
    614e:	10 e0       	ldi	r17, 0x00	; 0
    6150:	20 ea       	ldi	r18, 0xA0	; 160
    6152:	30 e0       	ldi	r19, 0x00	; 0
    6154:	40 e5       	ldi	r20, 0x50	; 80
    6156:	50 e0       	ldi	r21, 0x00	; 0
    6158:	60 e0       	ldi	r22, 0x00	; 0
    615a:	70 e0       	ldi	r23, 0x00	; 0
    615c:	8f ed       	ldi	r24, 0xDF	; 223
    615e:	93 e0       	ldi	r25, 0x03	; 3
    6160:	0e 94 be 24 	call	0x497c	; 0x497c <_ZN15Adafruit_ST77358fillRectEiiiij>
    6164:	12 c0       	rjmp	.+36     	; 0x618a <_Z14showFamilyNamePhhh+0xd2>
					else
						tft.fillRect(0,80,ST7735_TFTHEIGHT,20,ST7735_MAGENTA);
    6166:	0f 2e       	mov	r0, r31
    6168:	ff e1       	ldi	r31, 0x1F	; 31
    616a:	ef 2e       	mov	r14, r31
    616c:	f8 ef       	ldi	r31, 0xF8	; 248
    616e:	ff 2e       	mov	r15, r31
    6170:	f0 2d       	mov	r31, r0
    6172:	04 e1       	ldi	r16, 0x14	; 20
    6174:	10 e0       	ldi	r17, 0x00	; 0
    6176:	20 ea       	ldi	r18, 0xA0	; 160
    6178:	30 e0       	ldi	r19, 0x00	; 0
    617a:	40 e5       	ldi	r20, 0x50	; 80
    617c:	50 e0       	ldi	r21, 0x00	; 0
    617e:	60 e0       	ldi	r22, 0x00	; 0
    6180:	70 e0       	ldi	r23, 0x00	; 0
    6182:	8f ed       	ldi	r24, 0xDF	; 223
    6184:	93 e0       	ldi	r25, 0x03	; 3
    6186:	0e 94 be 24 	call	0x497c	; 0x497c <_ZN15Adafruit_ST77358fillRectEiiiij>
					tft.text(family_names[ind[LEFT]],0,80);
    618a:	e8 81       	ld	r30, Y
    618c:	f0 e0       	ldi	r31, 0x00	; 0
    618e:	ee 0f       	add	r30, r30
    6190:	ff 1f       	adc	r31, r31
    6192:	ee 52       	subi	r30, 0x2E	; 46
    6194:	fd 4f       	sbci	r31, 0xFD	; 253
    6196:	60 81       	ld	r22, Z
    6198:	71 81       	ldd	r23, Z+1	; 0x01
    619a:	20 e5       	ldi	r18, 0x50	; 80
    619c:	30 e0       	ldi	r19, 0x00	; 0
    619e:	40 e0       	ldi	r20, 0x00	; 0
    61a0:	50 e0       	ldi	r21, 0x00	; 0
    61a2:	8f ed       	ldi	r24, 0xDF	; 223
    61a4:	93 e0       	ldi	r25, 0x03	; 3
    61a6:	0e 94 39 1f 	call	0x3e72	; 0x3e72 <_ZN12Adafruit_GFX4textEPKcii>
					break;
	}		
		
}
    61aa:	df 91       	pop	r29
    61ac:	cf 91       	pop	r28
    61ae:	1f 91       	pop	r17
    61b0:	0f 91       	pop	r16
    61b2:	ff 90       	pop	r15
    61b4:	ef 90       	pop	r14
    61b6:	08 95       	ret

000061b8 <_Z18showInstrumentNamePhS_hh>:
			for(i = 0; i < 16; i++)
				lcdline[i] = pgm_read_byte(drumsets[prog[currentHand]] + i);
	}
}

void showInstrumentName(uint8_t *bank,uint8_t *prog,uint8_t hand,uint8_t currentMode){			
    61b8:	ef 92       	push	r14
    61ba:	ff 92       	push	r15
    61bc:	0f 93       	push	r16
    61be:	1f 93       	push	r17
    61c0:	cf 93       	push	r28
    61c2:	df 93       	push	r29
		
}

static void getInstrumentName(uint8_t *bank,uint8_t *prog,uint8_t currentHand){
	uint8_t i = 0;
	switch(bank[currentHand]){
    61c4:	a4 2f       	mov	r26, r20
    61c6:	b0 e0       	ldi	r27, 0x00	; 0
    61c8:	8a 0f       	add	r24, r26
    61ca:	9b 1f       	adc	r25, r27
    61cc:	fc 01       	movw	r30, r24
    61ce:	80 81       	ld	r24, Z
    61d0:	84 30       	cpi	r24, 0x04	; 4
    61d2:	09 f4       	brne	.+2      	; 0x61d6 <_Z18showInstrumentNamePhS_hh+0x1e>
    61d4:	81 c0       	rjmp	.+258    	; 0x62d8 <_Z18showInstrumentNamePhS_hh+0x120>
    61d6:	28 f4       	brcc	.+10     	; 0x61e2 <_Z18showInstrumentNamePhS_hh+0x2a>
    61d8:	88 23       	and	r24, r24
    61da:	51 f0       	breq	.+20     	; 0x61f0 <_Z18showInstrumentNamePhS_hh+0x38>
    61dc:	81 30       	cpi	r24, 0x01	; 1
    61de:	29 f1       	breq	.+74     	; 0x622a <_Z18showInstrumentNamePhS_hh+0x72>
    61e0:	97 c0       	rjmp	.+302    	; 0x6310 <_Z18showInstrumentNamePhS_hh+0x158>
    61e2:	8a 30       	cpi	r24, 0x0A	; 10
    61e4:	09 f4       	brne	.+2      	; 0x61e8 <_Z18showInstrumentNamePhS_hh+0x30>
    61e6:	3e c0       	rjmp	.+124    	; 0x6264 <_Z18showInstrumentNamePhS_hh+0xac>
    61e8:	8b 30       	cpi	r24, 0x0B	; 11
    61ea:	09 f4       	brne	.+2      	; 0x61ee <_Z18showInstrumentNamePhS_hh+0x36>
    61ec:	58 c0       	rjmp	.+176    	; 0x629e <_Z18showInstrumentNamePhS_hh+0xe6>
    61ee:	90 c0       	rjmp	.+288    	; 0x6310 <_Z18showInstrumentNamePhS_hh+0x158>
    61f0:	0f 2e       	mov	r0, r31
    61f2:	f3 e2       	ldi	r31, 0x23	; 35
    61f4:	ef 2e       	mov	r14, r31
    61f6:	f4 e0       	ldi	r31, 0x04	; 4
    61f8:	ff 2e       	mov	r15, r31
    61fa:	f0 2d       	mov	r31, r0
    61fc:	03 e3       	ldi	r16, 0x33	; 51
    61fe:	14 e0       	ldi	r17, 0x04	; 4
    6200:	e7 01       	movw	r28, r14
		case BANKA:	
			for(i = 0; i < 16; i++)
				lcdline[i] = pgm_read_byte(bank_a[prog[currentHand]] + i);
    6202:	a6 0f       	add	r26, r22
    6204:	b7 1f       	adc	r27, r23
    6206:	ec 91       	ld	r30, X
    6208:	80 e1       	ldi	r24, 0x10	; 16
    620a:	e8 9f       	mul	r30, r24
    620c:	f0 01       	movw	r30, r0
    620e:	11 24       	eor	r1, r1
    6210:	e2 5e       	subi	r30, 0xE2	; 226
    6212:	f7 4d       	sbci	r31, 0xD7	; 215
    6214:	ce 01       	movw	r24, r28
    6216:	8e 19       	sub	r24, r14
    6218:	9f 09       	sbc	r25, r15
    621a:	e8 0f       	add	r30, r24
    621c:	f9 1f       	adc	r31, r25
    621e:	e4 91       	lpm	r30, Z
    6220:	e9 93       	st	Y+, r30

static void getInstrumentName(uint8_t *bank,uint8_t *prog,uint8_t currentHand){
	uint8_t i = 0;
	switch(bank[currentHand]){
		case BANKA:	
			for(i = 0; i < 16; i++)
    6222:	c0 17       	cp	r28, r16
    6224:	d1 07       	cpc	r29, r17
    6226:	79 f7       	brne	.-34     	; 0x6206 <_Z18showInstrumentNamePhS_hh+0x4e>
    6228:	73 c0       	rjmp	.+230    	; 0x6310 <_Z18showInstrumentNamePhS_hh+0x158>
    622a:	0f 2e       	mov	r0, r31
    622c:	f3 e2       	ldi	r31, 0x23	; 35
    622e:	ef 2e       	mov	r14, r31
    6230:	f4 e0       	ldi	r31, 0x04	; 4
    6232:	ff 2e       	mov	r15, r31
    6234:	f0 2d       	mov	r31, r0
    6236:	03 e3       	ldi	r16, 0x33	; 51
    6238:	14 e0       	ldi	r17, 0x04	; 4
		
}

static void getInstrumentName(uint8_t *bank,uint8_t *prog,uint8_t currentHand){
	uint8_t i = 0;
	switch(bank[currentHand]){
    623a:	e7 01       	movw	r28, r14
			for(i = 0; i < 16; i++)
				lcdline[i] = pgm_read_byte(bank_a[prog[currentHand]] + i);
			break;
		case BANKB: 
			for(i = 0; i < 16; i++)
				lcdline[i] = pgm_read_byte(bank_b[prog[currentHand]] + i);
    623c:	a6 0f       	add	r26, r22
    623e:	b7 1f       	adc	r27, r23
    6240:	ec 91       	ld	r30, X
    6242:	80 e1       	ldi	r24, 0x10	; 16
    6244:	e8 9f       	mul	r30, r24
    6246:	f0 01       	movw	r30, r0
    6248:	11 24       	eor	r1, r1
    624a:	e2 5e       	subi	r30, 0xE2	; 226
    624c:	ff 4d       	sbci	r31, 0xDF	; 223
    624e:	ce 01       	movw	r24, r28
    6250:	8e 19       	sub	r24, r14
    6252:	9f 09       	sbc	r25, r15
    6254:	e8 0f       	add	r30, r24
    6256:	f9 1f       	adc	r31, r25
    6258:	e4 91       	lpm	r30, Z
    625a:	e9 93       	st	Y+, r30
		case BANKA:	
			for(i = 0; i < 16; i++)
				lcdline[i] = pgm_read_byte(bank_a[prog[currentHand]] + i);
			break;
		case BANKB: 
			for(i = 0; i < 16; i++)
    625c:	c0 17       	cp	r28, r16
    625e:	d1 07       	cpc	r29, r17
    6260:	79 f7       	brne	.-34     	; 0x6240 <_Z18showInstrumentNamePhS_hh+0x88>
    6262:	56 c0       	rjmp	.+172    	; 0x6310 <_Z18showInstrumentNamePhS_hh+0x158>
    6264:	0f 2e       	mov	r0, r31
    6266:	f3 e2       	ldi	r31, 0x23	; 35
    6268:	ef 2e       	mov	r14, r31
    626a:	f4 e0       	ldi	r31, 0x04	; 4
    626c:	ff 2e       	mov	r15, r31
    626e:	f0 2d       	mov	r31, r0
    6270:	03 e3       	ldi	r16, 0x33	; 51
    6272:	14 e0       	ldi	r17, 0x04	; 4
		
}

static void getInstrumentName(uint8_t *bank,uint8_t *prog,uint8_t currentHand){
	uint8_t i = 0;
	switch(bank[currentHand]){
    6274:	e7 01       	movw	r28, r14
			for(i = 0; i < 16; i++)
				lcdline[i] = pgm_read_byte(bank_b[prog[currentHand]] + i);
			break;
		case BANKC: 
			for(i = 0; i < 16; i++)
				lcdline[i] = pgm_read_byte(bank_c[prog[currentHand]] + i);
    6276:	a6 0f       	add	r26, r22
    6278:	b7 1f       	adc	r27, r23
    627a:	ec 91       	ld	r30, X
    627c:	80 e1       	ldi	r24, 0x10	; 16
    627e:	e8 9f       	mul	r30, r24
    6280:	f0 01       	movw	r30, r0
    6282:	11 24       	eor	r1, r1
    6284:	e2 5e       	subi	r30, 0xE2	; 226
    6286:	f7 4e       	sbci	r31, 0xE7	; 231
    6288:	ce 01       	movw	r24, r28
    628a:	8e 19       	sub	r24, r14
    628c:	9f 09       	sbc	r25, r15
    628e:	e8 0f       	add	r30, r24
    6290:	f9 1f       	adc	r31, r25
    6292:	e4 91       	lpm	r30, Z
    6294:	e9 93       	st	Y+, r30
		case BANKB: 
			for(i = 0; i < 16; i++)
				lcdline[i] = pgm_read_byte(bank_b[prog[currentHand]] + i);
			break;
		case BANKC: 
			for(i = 0; i < 16; i++)
    6296:	0c 17       	cp	r16, r28
    6298:	1d 07       	cpc	r17, r29
    629a:	79 f7       	brne	.-34     	; 0x627a <_Z18showInstrumentNamePhS_hh+0xc2>
    629c:	39 c0       	rjmp	.+114    	; 0x6310 <_Z18showInstrumentNamePhS_hh+0x158>
    629e:	0f 2e       	mov	r0, r31
    62a0:	f3 e2       	ldi	r31, 0x23	; 35
    62a2:	ef 2e       	mov	r14, r31
    62a4:	f4 e0       	ldi	r31, 0x04	; 4
    62a6:	ff 2e       	mov	r15, r31
    62a8:	f0 2d       	mov	r31, r0
    62aa:	03 e3       	ldi	r16, 0x33	; 51
    62ac:	14 e0       	ldi	r17, 0x04	; 4
		
}

static void getInstrumentName(uint8_t *bank,uint8_t *prog,uint8_t currentHand){
	uint8_t i = 0;
	switch(bank[currentHand]){
    62ae:	e7 01       	movw	r28, r14
			for(i = 0; i < 16; i++)
				lcdline[i] = pgm_read_byte(bank_c[prog[currentHand]] + i);
				break;
		case BANKD: 
			for(i = 0; i < 16; i++)
				lcdline[i] = pgm_read_byte(bank_d[prog[currentHand]] + i);
    62b0:	a6 0f       	add	r26, r22
    62b2:	b7 1f       	adc	r27, r23
    62b4:	ec 91       	ld	r30, X
    62b6:	80 e1       	ldi	r24, 0x10	; 16
    62b8:	e8 9f       	mul	r30, r24
    62ba:	f0 01       	movw	r30, r0
    62bc:	11 24       	eor	r1, r1
    62be:	e2 5e       	subi	r30, 0xE2	; 226
    62c0:	ff 4e       	sbci	r31, 0xEF	; 239
    62c2:	ce 01       	movw	r24, r28
    62c4:	8e 19       	sub	r24, r14
    62c6:	9f 09       	sbc	r25, r15
    62c8:	e8 0f       	add	r30, r24
    62ca:	f9 1f       	adc	r31, r25
    62cc:	e4 91       	lpm	r30, Z
    62ce:	e9 93       	st	Y+, r30
		case BANKC: 
			for(i = 0; i < 16; i++)
				lcdline[i] = pgm_read_byte(bank_c[prog[currentHand]] + i);
				break;
		case BANKD: 
			for(i = 0; i < 16; i++)
    62d0:	c0 17       	cp	r28, r16
    62d2:	d1 07       	cpc	r29, r17
    62d4:	79 f7       	brne	.-34     	; 0x62b4 <_Z18showInstrumentNamePhS_hh+0xfc>
    62d6:	1c c0       	rjmp	.+56     	; 0x6310 <_Z18showInstrumentNamePhS_hh+0x158>
    62d8:	0f 2e       	mov	r0, r31
    62da:	f3 e2       	ldi	r31, 0x23	; 35
    62dc:	ef 2e       	mov	r14, r31
    62de:	f4 e0       	ldi	r31, 0x04	; 4
    62e0:	ff 2e       	mov	r15, r31
    62e2:	f0 2d       	mov	r31, r0
    62e4:	03 e3       	ldi	r16, 0x33	; 51
    62e6:	14 e0       	ldi	r17, 0x04	; 4
		
}

static void getInstrumentName(uint8_t *bank,uint8_t *prog,uint8_t currentHand){
	uint8_t i = 0;
	switch(bank[currentHand]){
    62e8:	e7 01       	movw	r28, r14
			for(i = 0; i < 16; i++)
				lcdline[i] = pgm_read_byte(bank_d[prog[currentHand]] + i);
				break;
		case BANKE: 
			for(i = 0; i < 16; i++)
				lcdline[i] = pgm_read_byte(drumsets[prog[currentHand]] + i);
    62ea:	a6 0f       	add	r26, r22
    62ec:	b7 1f       	adc	r27, r23
    62ee:	ec 91       	ld	r30, X
    62f0:	80 e1       	ldi	r24, 0x10	; 16
    62f2:	e8 9f       	mul	r30, r24
    62f4:	f0 01       	movw	r30, r0
    62f6:	11 24       	eor	r1, r1
    62f8:	e2 5d       	subi	r30, 0xD2	; 210
    62fa:	f2 4f       	sbci	r31, 0xF2	; 242
    62fc:	ce 01       	movw	r24, r28
    62fe:	8e 19       	sub	r24, r14
    6300:	9f 09       	sbc	r25, r15
    6302:	e8 0f       	add	r30, r24
    6304:	f9 1f       	adc	r31, r25
    6306:	e4 91       	lpm	r30, Z
    6308:	e9 93       	st	Y+, r30
		case BANKD: 
			for(i = 0; i < 16; i++)
				lcdline[i] = pgm_read_byte(bank_d[prog[currentHand]] + i);
				break;
		case BANKE: 
			for(i = 0; i < 16; i++)
    630a:	0c 17       	cp	r16, r28
    630c:	1d 07       	cpc	r17, r29
    630e:	79 f7       	brne	.-34     	; 0x62ee <_Z18showInstrumentNamePhS_hh+0x136>
	}
}

void showInstrumentName(uint8_t *bank,uint8_t *prog,uint8_t hand,uint8_t currentMode){			
	getInstrumentName(bank,prog,hand);
	switch(hand){
    6310:	44 23       	and	r20, r20
    6312:	a1 f1       	breq	.+104    	; 0x637c <_Z18showInstrumentNamePhS_hh+0x1c4>
    6314:	41 30       	cpi	r20, 0x01	; 1
    6316:	09 f0       	breq	.+2      	; 0x631a <_Z18showInstrumentNamePhS_hh+0x162>
    6318:	61 c0       	rjmp	.+194    	; 0x63dc <_Z18showInstrumentNamePhS_hh+0x224>
		case RIGHT: if(currentMode == SOUND_SELECT_RIGHT)
    631a:	22 30       	cpi	r18, 0x02	; 2
    631c:	91 f4       	brne	.+36     	; 0x6342 <_Z18showInstrumentNamePhS_hh+0x18a>
						tft.fillRect(0,40,ST7735_TFTHEIGHT,20,ST7735_BLUE);
    631e:	0f 2e       	mov	r0, r31
    6320:	ff e1       	ldi	r31, 0x1F	; 31
    6322:	ef 2e       	mov	r14, r31
    6324:	f1 2c       	mov	r15, r1
    6326:	f0 2d       	mov	r31, r0
    6328:	04 e1       	ldi	r16, 0x14	; 20
    632a:	10 e0       	ldi	r17, 0x00	; 0
    632c:	20 ea       	ldi	r18, 0xA0	; 160
    632e:	30 e0       	ldi	r19, 0x00	; 0
    6330:	48 e2       	ldi	r20, 0x28	; 40
    6332:	50 e0       	ldi	r21, 0x00	; 0
    6334:	60 e0       	ldi	r22, 0x00	; 0
    6336:	70 e0       	ldi	r23, 0x00	; 0
    6338:	8f ed       	ldi	r24, 0xDF	; 223
    633a:	93 e0       	ldi	r25, 0x03	; 3
    633c:	0e 94 be 24 	call	0x497c	; 0x497c <_ZN15Adafruit_ST77358fillRectEiiiij>
    6340:	12 c0       	rjmp	.+36     	; 0x6366 <_Z18showInstrumentNamePhS_hh+0x1ae>
					else
						tft.fillRect(0,40,ST7735_TFTHEIGHT,20,ST7735_MAGENTA);
    6342:	0f 2e       	mov	r0, r31
    6344:	ff e1       	ldi	r31, 0x1F	; 31
    6346:	ef 2e       	mov	r14, r31
    6348:	f8 ef       	ldi	r31, 0xF8	; 248
    634a:	ff 2e       	mov	r15, r31
    634c:	f0 2d       	mov	r31, r0
    634e:	04 e1       	ldi	r16, 0x14	; 20
    6350:	10 e0       	ldi	r17, 0x00	; 0
    6352:	20 ea       	ldi	r18, 0xA0	; 160
    6354:	30 e0       	ldi	r19, 0x00	; 0
    6356:	48 e2       	ldi	r20, 0x28	; 40
    6358:	50 e0       	ldi	r21, 0x00	; 0
    635a:	60 e0       	ldi	r22, 0x00	; 0
    635c:	70 e0       	ldi	r23, 0x00	; 0
    635e:	8f ed       	ldi	r24, 0xDF	; 223
    6360:	93 e0       	ldi	r25, 0x03	; 3
    6362:	0e 94 be 24 	call	0x497c	; 0x497c <_ZN15Adafruit_ST77358fillRectEiiiij>
					tft.text(lcdline,0,40);
    6366:	28 e2       	ldi	r18, 0x28	; 40
    6368:	30 e0       	ldi	r19, 0x00	; 0
    636a:	40 e0       	ldi	r20, 0x00	; 0
    636c:	50 e0       	ldi	r21, 0x00	; 0
    636e:	63 e2       	ldi	r22, 0x23	; 35
    6370:	74 e0       	ldi	r23, 0x04	; 4
    6372:	8f ed       	ldi	r24, 0xDF	; 223
    6374:	93 e0       	ldi	r25, 0x03	; 3
    6376:	0e 94 39 1f 	call	0x3e72	; 0x3e72 <_ZN12Adafruit_GFX4textEPKcii>
					break;
    637a:	30 c0       	rjmp	.+96     	; 0x63dc <_Z18showInstrumentNamePhS_hh+0x224>
		case LEFT:	if(currentMode == SOUND_SELECT_LEFT)
    637c:	24 30       	cpi	r18, 0x04	; 4
    637e:	91 f4       	brne	.+36     	; 0x63a4 <_Z18showInstrumentNamePhS_hh+0x1ec>
						tft.fillRect(0,100,ST7735_TFTHEIGHT,20,ST7735_BLUE);
    6380:	0f 2e       	mov	r0, r31
    6382:	ff e1       	ldi	r31, 0x1F	; 31
    6384:	ef 2e       	mov	r14, r31
    6386:	f1 2c       	mov	r15, r1
    6388:	f0 2d       	mov	r31, r0
    638a:	04 e1       	ldi	r16, 0x14	; 20
    638c:	10 e0       	ldi	r17, 0x00	; 0
    638e:	20 ea       	ldi	r18, 0xA0	; 160
    6390:	30 e0       	ldi	r19, 0x00	; 0
    6392:	44 e6       	ldi	r20, 0x64	; 100
    6394:	50 e0       	ldi	r21, 0x00	; 0
    6396:	60 e0       	ldi	r22, 0x00	; 0
    6398:	70 e0       	ldi	r23, 0x00	; 0
    639a:	8f ed       	ldi	r24, 0xDF	; 223
    639c:	93 e0       	ldi	r25, 0x03	; 3
    639e:	0e 94 be 24 	call	0x497c	; 0x497c <_ZN15Adafruit_ST77358fillRectEiiiij>
    63a2:	12 c0       	rjmp	.+36     	; 0x63c8 <_Z18showInstrumentNamePhS_hh+0x210>
					else
						tft.fillRect(0,100,ST7735_TFTHEIGHT,20,ST7735_MAGENTA);
    63a4:	0f 2e       	mov	r0, r31
    63a6:	ff e1       	ldi	r31, 0x1F	; 31
    63a8:	ef 2e       	mov	r14, r31
    63aa:	f8 ef       	ldi	r31, 0xF8	; 248
    63ac:	ff 2e       	mov	r15, r31
    63ae:	f0 2d       	mov	r31, r0
    63b0:	04 e1       	ldi	r16, 0x14	; 20
    63b2:	10 e0       	ldi	r17, 0x00	; 0
    63b4:	20 ea       	ldi	r18, 0xA0	; 160
    63b6:	30 e0       	ldi	r19, 0x00	; 0
    63b8:	44 e6       	ldi	r20, 0x64	; 100
    63ba:	50 e0       	ldi	r21, 0x00	; 0
    63bc:	60 e0       	ldi	r22, 0x00	; 0
    63be:	70 e0       	ldi	r23, 0x00	; 0
    63c0:	8f ed       	ldi	r24, 0xDF	; 223
    63c2:	93 e0       	ldi	r25, 0x03	; 3
    63c4:	0e 94 be 24 	call	0x497c	; 0x497c <_ZN15Adafruit_ST77358fillRectEiiiij>
					tft.text(lcdline,0,100);
    63c8:	24 e6       	ldi	r18, 0x64	; 100
    63ca:	30 e0       	ldi	r19, 0x00	; 0
    63cc:	40 e0       	ldi	r20, 0x00	; 0
    63ce:	50 e0       	ldi	r21, 0x00	; 0
    63d0:	63 e2       	ldi	r22, 0x23	; 35
    63d2:	74 e0       	ldi	r23, 0x04	; 4
    63d4:	8f ed       	ldi	r24, 0xDF	; 223
    63d6:	93 e0       	ldi	r25, 0x03	; 3
    63d8:	0e 94 39 1f 	call	0x3e72	; 0x3e72 <_ZN12Adafruit_GFX4textEPKcii>
					break;
	}	
	
}
    63dc:	df 91       	pop	r29
    63de:	cf 91       	pop	r28
    63e0:	1f 91       	pop	r17
    63e2:	0f 91       	pop	r16
    63e4:	ff 90       	pop	r15
    63e6:	ef 90       	pop	r14
    63e8:	08 95       	ret

000063ea <_Z15showCurrentModehhb>:

void showCurrentMode(uint8_t currentMode,uint8_t hand,bool midiThru){	
    63ea:	ef 92       	push	r14
    63ec:	ff 92       	push	r15
    63ee:	0f 93       	push	r16
    63f0:	1f 93       	push	r17
    63f2:	cf 93       	push	r28
    63f4:	df 93       	push	r29
    63f6:	c8 2f       	mov	r28, r24
    63f8:	d4 2f       	mov	r29, r20
	switch(hand){
    63fa:	66 23       	and	r22, r22
    63fc:	09 f4       	brne	.+2      	; 0x6400 <_Z15showCurrentModehhb+0x16>
    63fe:	4b c0       	rjmp	.+150    	; 0x6496 <_Z15showCurrentModehhb+0xac>
    6400:	61 30       	cpi	r22, 0x01	; 1
    6402:	09 f0       	breq	.+2      	; 0x6406 <_Z15showCurrentModehhb+0x1c>
    6404:	6e c0       	rjmp	.+220    	; 0x64e2 <_Z15showCurrentModehhb+0xf8>
		case RIGHT:	tft.fillRect(0,0,ST7735_TFTHEIGHT,20,ST7735_RED);
    6406:	0f 2e       	mov	r0, r31
    6408:	e1 2c       	mov	r14, r1
    640a:	f8 ef       	ldi	r31, 0xF8	; 248
    640c:	ff 2e       	mov	r15, r31
    640e:	f0 2d       	mov	r31, r0
    6410:	04 e1       	ldi	r16, 0x14	; 20
    6412:	10 e0       	ldi	r17, 0x00	; 0
    6414:	20 ea       	ldi	r18, 0xA0	; 160
    6416:	30 e0       	ldi	r19, 0x00	; 0
    6418:	40 e0       	ldi	r20, 0x00	; 0
    641a:	50 e0       	ldi	r21, 0x00	; 0
    641c:	60 e0       	ldi	r22, 0x00	; 0
    641e:	70 e0       	ldi	r23, 0x00	; 0
    6420:	8f ed       	ldi	r24, 0xDF	; 223
    6422:	93 e0       	ldi	r25, 0x03	; 3
    6424:	0e 94 be 24 	call	0x497c	; 0x497c <_ZN15Adafruit_ST77358fillRectEiiiij>
					tft.text(modes_right[currentMode],0,0);
    6428:	6c 2f       	mov	r22, r28
    642a:	70 e0       	ldi	r23, 0x00	; 0
    642c:	66 0f       	add	r22, r22
    642e:	77 1f       	adc	r23, r23
    6430:	66 0f       	add	r22, r22
    6432:	77 1f       	adc	r23, r23
    6434:	66 0f       	add	r22, r22
    6436:	77 1f       	adc	r23, r23
    6438:	64 5a       	subi	r22, 0xA4	; 164
    643a:	7e 4f       	sbci	r23, 0xFE	; 254
    643c:	20 e0       	ldi	r18, 0x00	; 0
    643e:	30 e0       	ldi	r19, 0x00	; 0
    6440:	40 e0       	ldi	r20, 0x00	; 0
    6442:	50 e0       	ldi	r21, 0x00	; 0
    6444:	8f ed       	ldi	r24, 0xDF	; 223
    6446:	93 e0       	ldi	r25, 0x03	; 3
    6448:	0e 94 39 1f 	call	0x3e72	; 0x3e72 <_ZN12Adafruit_GFX4textEPKcii>
					tft.stroke(ST7735_YELLOW);
    644c:	60 ee       	ldi	r22, 0xE0	; 224
    644e:	7f ef       	ldi	r23, 0xFF	; 255
    6450:	8f ed       	ldi	r24, 0xDF	; 223
    6452:	93 e0       	ldi	r25, 0x03	; 3
    6454:	0e 94 2f 1f 	call	0x3e5e	; 0x3e5e <_ZN12Adafruit_GFX6strokeEj>
					if(midiThru == true)
    6458:	dd 23       	and	r29, r29
    645a:	59 f0       	breq	.+22     	; 0x6472 <_Z15showCurrentModehhb+0x88>
						tft.text("Off",100,0);
    645c:	20 e0       	ldi	r18, 0x00	; 0
    645e:	30 e0       	ldi	r19, 0x00	; 0
    6460:	44 e6       	ldi	r20, 0x64	; 100
    6462:	50 e0       	ldi	r21, 0x00	; 0
    6464:	60 e3       	ldi	r22, 0x30	; 48
    6466:	72 e0       	ldi	r23, 0x02	; 2
    6468:	8f ed       	ldi	r24, 0xDF	; 223
    646a:	93 e0       	ldi	r25, 0x03	; 3
    646c:	0e 94 39 1f 	call	0x3e72	; 0x3e72 <_ZN12Adafruit_GFX4textEPKcii>
    6470:	0a c0       	rjmp	.+20     	; 0x6486 <_Z15showCurrentModehhb+0x9c>
					else
						tft.text("On",100,0);
    6472:	20 e0       	ldi	r18, 0x00	; 0
    6474:	30 e0       	ldi	r19, 0x00	; 0
    6476:	44 e6       	ldi	r20, 0x64	; 100
    6478:	50 e0       	ldi	r21, 0x00	; 0
    647a:	64 e3       	ldi	r22, 0x34	; 52
    647c:	72 e0       	ldi	r23, 0x02	; 2
    647e:	8f ed       	ldi	r24, 0xDF	; 223
    6480:	93 e0       	ldi	r25, 0x03	; 3
    6482:	0e 94 39 1f 	call	0x3e72	; 0x3e72 <_ZN12Adafruit_GFX4textEPKcii>
					tft.stroke(0,0,0);
    6486:	20 e0       	ldi	r18, 0x00	; 0
    6488:	40 e0       	ldi	r20, 0x00	; 0
    648a:	60 e0       	ldi	r22, 0x00	; 0
    648c:	8f ed       	ldi	r24, 0xDF	; 223
    648e:	93 e0       	ldi	r25, 0x03	; 3
    6490:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <_ZN12Adafruit_GFX6strokeEhhh>
					break;
    6494:	26 c0       	rjmp	.+76     	; 0x64e2 <_Z15showCurrentModehhb+0xf8>
		case LEFT:	tft.fillRect(0,60,ST7735_TFTHEIGHT,20,ST7735_RED);
    6496:	0f 2e       	mov	r0, r31
    6498:	e1 2c       	mov	r14, r1
    649a:	f8 ef       	ldi	r31, 0xF8	; 248
    649c:	ff 2e       	mov	r15, r31
    649e:	f0 2d       	mov	r31, r0
    64a0:	04 e1       	ldi	r16, 0x14	; 20
    64a2:	10 e0       	ldi	r17, 0x00	; 0
    64a4:	20 ea       	ldi	r18, 0xA0	; 160
    64a6:	30 e0       	ldi	r19, 0x00	; 0
    64a8:	4c e3       	ldi	r20, 0x3C	; 60
    64aa:	50 e0       	ldi	r21, 0x00	; 0
    64ac:	60 e0       	ldi	r22, 0x00	; 0
    64ae:	70 e0       	ldi	r23, 0x00	; 0
    64b0:	8f ed       	ldi	r24, 0xDF	; 223
    64b2:	93 e0       	ldi	r25, 0x03	; 3
    64b4:	0e 94 be 24 	call	0x497c	; 0x497c <_ZN15Adafruit_ST77358fillRectEiiiij>
					tft.text(modes_left[currentMode],0,60);
    64b8:	8c 2f       	mov	r24, r28
    64ba:	90 e0       	ldi	r25, 0x00	; 0
    64bc:	bc 01       	movw	r22, r24
    64be:	66 0f       	add	r22, r22
    64c0:	77 1f       	adc	r23, r23
    64c2:	68 0f       	add	r22, r24
    64c4:	79 1f       	adc	r23, r25
    64c6:	66 0f       	add	r22, r22
    64c8:	77 1f       	adc	r23, r23
    64ca:	66 0f       	add	r22, r22
    64cc:	77 1f       	adc	r23, r23
    64ce:	6c 5e       	subi	r22, 0xEC	; 236
    64d0:	7e 4f       	sbci	r23, 0xFE	; 254
    64d2:	2c e3       	ldi	r18, 0x3C	; 60
    64d4:	30 e0       	ldi	r19, 0x00	; 0
    64d6:	40 e0       	ldi	r20, 0x00	; 0
    64d8:	50 e0       	ldi	r21, 0x00	; 0
    64da:	8f ed       	ldi	r24, 0xDF	; 223
    64dc:	93 e0       	ldi	r25, 0x03	; 3
    64de:	0e 94 39 1f 	call	0x3e72	; 0x3e72 <_ZN12Adafruit_GFX4textEPKcii>
					break;					
		}	
	
}
    64e2:	df 91       	pop	r29
    64e4:	cf 91       	pop	r28
    64e6:	1f 91       	pop	r17
    64e8:	0f 91       	pop	r16
    64ea:	ff 90       	pop	r15
    64ec:	ef 90       	pop	r14
    64ee:	08 95       	ret

000064f0 <_Z14showScreenPartPhS_S_hhb>:
	sprintf(lcdline,"%d\n",data);
	tft.fillRect(0,40,ST7735_TFTHEIGHT,20,ST7735_MAGENTA);
	tft.text(lcdline,0,40);
}

void showScreenPart(uint8_t * family,uint8_t * program,uint8_t * bank,uint8_t mod,uint8_t hand,bool midiThru){
    64f0:	8f 92       	push	r8
    64f2:	9f 92       	push	r9
    64f4:	af 92       	push	r10
    64f6:	bf 92       	push	r11
    64f8:	cf 92       	push	r12
    64fa:	df 92       	push	r13
    64fc:	ef 92       	push	r14
    64fe:	0f 93       	push	r16
    6500:	cf 93       	push	r28
    6502:	4c 01       	movw	r8, r24
    6504:	5b 01       	movw	r10, r22
    6506:	6a 01       	movw	r12, r20
    6508:	c2 2f       	mov	r28, r18
    650a:	4e 2d       	mov	r20, r14
	showCurrentMode(mod,hand,midiThru);
    650c:	60 2f       	mov	r22, r16
    650e:	82 2f       	mov	r24, r18
    6510:	0e 94 f5 31 	call	0x63ea	; 0x63ea <_Z15showCurrentModehhb>
	showFamilyName(family,hand,mod);
    6514:	4c 2f       	mov	r20, r28
    6516:	60 2f       	mov	r22, r16
    6518:	c4 01       	movw	r24, r8
    651a:	0e 94 5c 30 	call	0x60b8	; 0x60b8 <_Z14showFamilyNamePhhh>
	showInstrumentName(bank,program,hand,mod);
    651e:	2c 2f       	mov	r18, r28
    6520:	40 2f       	mov	r20, r16
    6522:	b5 01       	movw	r22, r10
    6524:	c6 01       	movw	r24, r12
    6526:	0e 94 dc 30 	call	0x61b8	; 0x61b8 <_Z18showInstrumentNamePhS_hh>
}
    652a:	cf 91       	pop	r28
    652c:	0f 91       	pop	r16
    652e:	ef 90       	pop	r14
    6530:	df 90       	pop	r13
    6532:	cf 90       	pop	r12
    6534:	bf 90       	pop	r11
    6536:	af 90       	pop	r10
    6538:	9f 90       	pop	r9
    653a:	8f 90       	pop	r8
    653c:	08 95       	ret

0000653e <_Z14showPresetListhh>:
		EEPROM.update(i, *input);
		input++;
	}
}

void showPresetList(uint8_t selected,uint8_t but){
    653e:	af 92       	push	r10
    6540:	bf 92       	push	r11
    6542:	cf 92       	push	r12
    6544:	df 92       	push	r13
    6546:	ef 92       	push	r14
    6548:	ff 92       	push	r15
    654a:	0f 93       	push	r16
    654c:	1f 93       	push	r17
    654e:	cf 93       	push	r28
    6550:	df 93       	push	r29
    6552:	c8 2e       	mov	r12, r24
	uint8_t offset = 0;
	uint8_t index = 0;
	switch(but){
    6554:	62 30       	cpi	r22, 0x02	; 2
    6556:	09 f4       	brne	.+2      	; 0x655a <_Z14showPresetListhh+0x1c>
    6558:	4e c0       	rjmp	.+156    	; 0x65f6 <_Z14showPresetListhh+0xb8>
    655a:	6f 3f       	cpi	r22, 0xFF	; 255
    655c:	19 f0       	breq	.+6      	; 0x6564 <_Z14showPresetListhh+0x26>
    655e:	61 11       	cpse	r22, r1
    6560:	56 c0       	rjmp	.+172    	; 0x660e <_Z14showPresetListhh+0xd0>
    6562:	3d c0       	rjmp	.+122    	; 0x65de <_Z14showPresetListhh+0xa0>
		case NONE:
			offset = selected * 20;
			tft.text("Preset A",0,0);
    6564:	20 e0       	ldi	r18, 0x00	; 0
    6566:	30 e0       	ldi	r19, 0x00	; 0
    6568:	40 e0       	ldi	r20, 0x00	; 0
    656a:	50 e0       	ldi	r21, 0x00	; 0
    656c:	67 e3       	ldi	r22, 0x37	; 55
    656e:	72 e0       	ldi	r23, 0x02	; 2
    6570:	8f ed       	ldi	r24, 0xDF	; 223
    6572:	93 e0       	ldi	r25, 0x03	; 3
    6574:	0e 94 39 1f 	call	0x3e72	; 0x3e72 <_ZN12Adafruit_GFX4textEPKcii>
			tft.text("Preset B",0,20);
    6578:	24 e1       	ldi	r18, 0x14	; 20
    657a:	30 e0       	ldi	r19, 0x00	; 0
    657c:	40 e0       	ldi	r20, 0x00	; 0
    657e:	50 e0       	ldi	r21, 0x00	; 0
    6580:	60 e4       	ldi	r22, 0x40	; 64
    6582:	72 e0       	ldi	r23, 0x02	; 2
    6584:	8f ed       	ldi	r24, 0xDF	; 223
    6586:	93 e0       	ldi	r25, 0x03	; 3
    6588:	0e 94 39 1f 	call	0x3e72	; 0x3e72 <_ZN12Adafruit_GFX4textEPKcii>
			tft.text("Preset C",0,40);
    658c:	28 e2       	ldi	r18, 0x28	; 40
    658e:	30 e0       	ldi	r19, 0x00	; 0
    6590:	40 e0       	ldi	r20, 0x00	; 0
    6592:	50 e0       	ldi	r21, 0x00	; 0
    6594:	69 e4       	ldi	r22, 0x49	; 73
    6596:	72 e0       	ldi	r23, 0x02	; 2
    6598:	8f ed       	ldi	r24, 0xDF	; 223
    659a:	93 e0       	ldi	r25, 0x03	; 3
    659c:	0e 94 39 1f 	call	0x3e72	; 0x3e72 <_ZN12Adafruit_GFX4textEPKcii>
			tft.text("Preset D",0,60);
    65a0:	2c e3       	ldi	r18, 0x3C	; 60
    65a2:	30 e0       	ldi	r19, 0x00	; 0
    65a4:	40 e0       	ldi	r20, 0x00	; 0
    65a6:	50 e0       	ldi	r21, 0x00	; 0
    65a8:	62 e5       	ldi	r22, 0x52	; 82
    65aa:	72 e0       	ldi	r23, 0x02	; 2
    65ac:	8f ed       	ldi	r24, 0xDF	; 223
    65ae:	93 e0       	ldi	r25, 0x03	; 3
    65b0:	0e 94 39 1f 	call	0x3e72	; 0x3e72 <_ZN12Adafruit_GFX4textEPKcii>
			tft.text("Preset E",0,80);
    65b4:	20 e5       	ldi	r18, 0x50	; 80
    65b6:	30 e0       	ldi	r19, 0x00	; 0
    65b8:	40 e0       	ldi	r20, 0x00	; 0
    65ba:	50 e0       	ldi	r21, 0x00	; 0
    65bc:	6b e5       	ldi	r22, 0x5B	; 91
    65be:	72 e0       	ldi	r23, 0x02	; 2
    65c0:	8f ed       	ldi	r24, 0xDF	; 223
    65c2:	93 e0       	ldi	r25, 0x03	; 3
    65c4:	0e 94 39 1f 	call	0x3e72	; 0x3e72 <_ZN12Adafruit_GFX4textEPKcii>
			tft.text("Preset F",0,100);
    65c8:	24 e6       	ldi	r18, 0x64	; 100
    65ca:	30 e0       	ldi	r19, 0x00	; 0
    65cc:	40 e0       	ldi	r20, 0x00	; 0
    65ce:	50 e0       	ldi	r21, 0x00	; 0
    65d0:	64 e6       	ldi	r22, 0x64	; 100
    65d2:	72 e0       	ldi	r23, 0x02	; 2
    65d4:	8f ed       	ldi	r24, 0xDF	; 223
    65d6:	93 e0       	ldi	r25, 0x03	; 3
    65d8:	0e 94 39 1f 	call	0x3e72	; 0x3e72 <_ZN12Adafruit_GFX4textEPKcii>
    65dc:	3d c0       	rjmp	.+122    	; 0x6658 <_Z14showPresetListhh+0x11a>
			break;
		case BUTTON0:
			offset = 20 * (selected + 1);
    65de:	88 0f       	add	r24, r24
    65e0:	88 0f       	add	r24, r24
    65e2:	94 e0       	ldi	r25, 0x04	; 4
    65e4:	98 0f       	add	r25, r24
    65e6:	89 2f       	mov	r24, r25
    65e8:	88 0f       	add	r24, r24
    65ea:	88 0f       	add	r24, r24
    65ec:	a9 2e       	mov	r10, r25
    65ee:	a8 0e       	add	r10, r24
			index = selected + 1;
    65f0:	c1 e0       	ldi	r28, 0x01	; 1
    65f2:	cc 0d       	add	r28, r12
			break;
    65f4:	10 c0       	rjmp	.+32     	; 0x6616 <_Z14showPresetListhh+0xd8>
		case BUTTON2:
			offset = 20 * (selected - 1);
    65f6:	88 0f       	add	r24, r24
    65f8:	88 0f       	add	r24, r24
    65fa:	9c ef       	ldi	r25, 0xFC	; 252
    65fc:	98 0f       	add	r25, r24
    65fe:	89 2f       	mov	r24, r25
    6600:	88 0f       	add	r24, r24
    6602:	88 0f       	add	r24, r24
    6604:	a9 2e       	mov	r10, r25
    6606:	a8 0e       	add	r10, r24
			index = selected - 1;
    6608:	cf ef       	ldi	r28, 0xFF	; 255
    660a:	cc 0d       	add	r28, r12
			break;
    660c:	04 c0       	rjmp	.+8      	; 0x6616 <_Z14showPresetListhh+0xd8>
	}
	// delete previous selection
	if(but != NONE){
    660e:	6f 3f       	cpi	r22, 0xFF	; 255
    6610:	19 f1       	breq	.+70     	; 0x6658 <_Z14showPresetListhh+0x11a>
	}
}

void showPresetList(uint8_t selected,uint8_t but){
	uint8_t offset = 0;
	uint8_t index = 0;
    6612:	c0 e0       	ldi	r28, 0x00	; 0
		input++;
	}
}

void showPresetList(uint8_t selected,uint8_t but){
	uint8_t offset = 0;
    6614:	a1 2c       	mov	r10, r1
			index = selected - 1;
			break;
	}
	// delete previous selection
	if(but != NONE){
		tft.fillRect(0,offset,ST7735_TFTHEIGHT,20,ST7735_MAGENTA);
    6616:	b1 2c       	mov	r11, r1
    6618:	0f 2e       	mov	r0, r31
    661a:	ff e1       	ldi	r31, 0x1F	; 31
    661c:	ef 2e       	mov	r14, r31
    661e:	f8 ef       	ldi	r31, 0xF8	; 248
    6620:	ff 2e       	mov	r15, r31
    6622:	f0 2d       	mov	r31, r0
    6624:	04 e1       	ldi	r16, 0x14	; 20
    6626:	10 e0       	ldi	r17, 0x00	; 0
    6628:	20 ea       	ldi	r18, 0xA0	; 160
    662a:	30 e0       	ldi	r19, 0x00	; 0
    662c:	a5 01       	movw	r20, r10
    662e:	60 e0       	ldi	r22, 0x00	; 0
    6630:	70 e0       	ldi	r23, 0x00	; 0
    6632:	8f ed       	ldi	r24, 0xDF	; 223
    6634:	93 e0       	ldi	r25, 0x03	; 3
    6636:	0e 94 be 24 	call	0x497c	; 0x497c <_ZN15Adafruit_ST77358fillRectEiiiij>
		tft.text(presetNames[index],0,offset);
    663a:	ec 2f       	mov	r30, r28
    663c:	f0 e0       	ldi	r31, 0x00	; 0
    663e:	ee 0f       	add	r30, r30
    6640:	ff 1f       	adc	r31, r31
    6642:	e4 51       	subi	r30, 0x14	; 20
    6644:	fd 4f       	sbci	r31, 0xFD	; 253
    6646:	60 81       	ld	r22, Z
    6648:	71 81       	ldd	r23, Z+1	; 0x01
    664a:	95 01       	movw	r18, r10
    664c:	40 e0       	ldi	r20, 0x00	; 0
    664e:	50 e0       	ldi	r21, 0x00	; 0
    6650:	8f ed       	ldi	r24, 0xDF	; 223
    6652:	93 e0       	ldi	r25, 0x03	; 3
    6654:	0e 94 39 1f 	call	0x3e72	; 0x3e72 <_ZN12Adafruit_GFX4textEPKcii>
	}
	
	tft.fillRect(0,20 * selected,ST7735_TFTHEIGHT,20,ST7735_RED);
    6658:	cc 2d       	mov	r28, r12
    665a:	d0 e0       	ldi	r29, 0x00	; 0
    665c:	84 e1       	ldi	r24, 0x14	; 20
    665e:	c8 9e       	mul	r12, r24
    6660:	60 01       	movw	r12, r0
    6662:	11 24       	eor	r1, r1
    6664:	0f 2e       	mov	r0, r31
    6666:	e1 2c       	mov	r14, r1
    6668:	f8 ef       	ldi	r31, 0xF8	; 248
    666a:	ff 2e       	mov	r15, r31
    666c:	f0 2d       	mov	r31, r0
    666e:	04 e1       	ldi	r16, 0x14	; 20
    6670:	10 e0       	ldi	r17, 0x00	; 0
    6672:	20 ea       	ldi	r18, 0xA0	; 160
    6674:	30 e0       	ldi	r19, 0x00	; 0
    6676:	a6 01       	movw	r20, r12
    6678:	60 e0       	ldi	r22, 0x00	; 0
    667a:	70 e0       	ldi	r23, 0x00	; 0
    667c:	8f ed       	ldi	r24, 0xDF	; 223
    667e:	93 e0       	ldi	r25, 0x03	; 3
    6680:	0e 94 be 24 	call	0x497c	; 0x497c <_ZN15Adafruit_ST77358fillRectEiiiij>
	tft.text(presetNames[selected],0,20 * selected);
    6684:	cc 0f       	add	r28, r28
    6686:	dd 1f       	adc	r29, r29
    6688:	c4 51       	subi	r28, 0x14	; 20
    668a:	dd 4f       	sbci	r29, 0xFD	; 253
    668c:	68 81       	ld	r22, Y
    668e:	79 81       	ldd	r23, Y+1	; 0x01
    6690:	96 01       	movw	r18, r12
    6692:	40 e0       	ldi	r20, 0x00	; 0
    6694:	50 e0       	ldi	r21, 0x00	; 0
    6696:	8f ed       	ldi	r24, 0xDF	; 223
    6698:	93 e0       	ldi	r25, 0x03	; 3
    669a:	0e 94 39 1f 	call	0x3e72	; 0x3e72 <_ZN12Adafruit_GFX4textEPKcii>
		
    669e:	df 91       	pop	r29
    66a0:	cf 91       	pop	r28
    66a2:	1f 91       	pop	r17
    66a4:	0f 91       	pop	r16
    66a6:	ff 90       	pop	r15
    66a8:	ef 90       	pop	r14
    66aa:	df 90       	pop	r13
    66ac:	cf 90       	pop	r12
    66ae:	bf 90       	pop	r11
    66b0:	af 90       	pop	r10
    66b2:	08 95       	ret

000066b4 <__cxa_pure_virtual>:
    66b4:	0e 94 72 37 	call	0x6ee4	; 0x6ee4 <abort>

000066b8 <_ZN14HardwareSerial9availableEv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    66b8:	fc 01       	movw	r30, r24
    66ba:	91 8d       	ldd	r25, Z+25	; 0x19
    66bc:	22 8d       	ldd	r18, Z+26	; 0x1a
    66be:	89 2f       	mov	r24, r25
    66c0:	90 e0       	ldi	r25, 0x00	; 0
    66c2:	80 5c       	subi	r24, 0xC0	; 192
    66c4:	9f 4f       	sbci	r25, 0xFF	; 255
    66c6:	82 1b       	sub	r24, r18
    66c8:	91 09       	sbc	r25, r1
    66ca:	8f 73       	andi	r24, 0x3F	; 63
    66cc:	99 27       	eor	r25, r25
    66ce:	08 95       	ret

000066d0 <_ZN14HardwareSerial4peekEv>:
    66d0:	fc 01       	movw	r30, r24
    66d2:	91 8d       	ldd	r25, Z+25	; 0x19
    66d4:	82 8d       	ldd	r24, Z+26	; 0x1a
    66d6:	98 17       	cp	r25, r24
    66d8:	31 f0       	breq	.+12     	; 0x66e6 <_ZN14HardwareSerial4peekEv+0x16>
    66da:	82 8d       	ldd	r24, Z+26	; 0x1a
    66dc:	e8 0f       	add	r30, r24
    66de:	f1 1d       	adc	r31, r1
    66e0:	85 8d       	ldd	r24, Z+29	; 0x1d
    66e2:	90 e0       	ldi	r25, 0x00	; 0
    66e4:	08 95       	ret
    66e6:	8f ef       	ldi	r24, 0xFF	; 255
    66e8:	9f ef       	ldi	r25, 0xFF	; 255
    66ea:	08 95       	ret

000066ec <_ZN14HardwareSerial4readEv>:
    66ec:	fc 01       	movw	r30, r24
    66ee:	91 8d       	ldd	r25, Z+25	; 0x19
    66f0:	82 8d       	ldd	r24, Z+26	; 0x1a
    66f2:	98 17       	cp	r25, r24
    66f4:	61 f0       	breq	.+24     	; 0x670e <_ZN14HardwareSerial4readEv+0x22>
    66f6:	82 8d       	ldd	r24, Z+26	; 0x1a
    66f8:	df 01       	movw	r26, r30
    66fa:	a8 0f       	add	r26, r24
    66fc:	b1 1d       	adc	r27, r1
    66fe:	5d 96       	adiw	r26, 0x1d	; 29
    6700:	8c 91       	ld	r24, X
    6702:	92 8d       	ldd	r25, Z+26	; 0x1a
    6704:	9f 5f       	subi	r25, 0xFF	; 255
    6706:	9f 73       	andi	r25, 0x3F	; 63
    6708:	92 8f       	std	Z+26, r25	; 0x1a
    670a:	90 e0       	ldi	r25, 0x00	; 0
    670c:	08 95       	ret
    670e:	8f ef       	ldi	r24, 0xFF	; 255
    6710:	9f ef       	ldi	r25, 0xFF	; 255
    6712:	08 95       	ret

00006714 <_ZN14HardwareSerial17availableForWriteEv>:
    6714:	fc 01       	movw	r30, r24
    6716:	53 8d       	ldd	r21, Z+27	; 0x1b
    6718:	44 8d       	ldd	r20, Z+28	; 0x1c
    671a:	25 2f       	mov	r18, r21
    671c:	30 e0       	ldi	r19, 0x00	; 0
    671e:	84 2f       	mov	r24, r20
    6720:	90 e0       	ldi	r25, 0x00	; 0
    6722:	82 1b       	sub	r24, r18
    6724:	93 0b       	sbc	r25, r19
    6726:	54 17       	cp	r21, r20
    6728:	10 f0       	brcs	.+4      	; 0x672e <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    672a:	cf 96       	adiw	r24, 0x3f	; 63
    672c:	08 95       	ret
    672e:	01 97       	sbiw	r24, 0x01	; 1
    6730:	08 95       	ret

00006732 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    6732:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    6734:	84 8d       	ldd	r24, Z+28	; 0x1c
    6736:	df 01       	movw	r26, r30
    6738:	a8 0f       	add	r26, r24
    673a:	b1 1d       	adc	r27, r1
    673c:	a3 5a       	subi	r26, 0xA3	; 163
    673e:	bf 4f       	sbci	r27, 0xFF	; 255
    6740:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    6742:	84 8d       	ldd	r24, Z+28	; 0x1c
    6744:	90 e0       	ldi	r25, 0x00	; 0
    6746:	01 96       	adiw	r24, 0x01	; 1
    6748:	8f 73       	andi	r24, 0x3F	; 63
    674a:	99 27       	eor	r25, r25
    674c:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    674e:	a6 89       	ldd	r26, Z+22	; 0x16
    6750:	b7 89       	ldd	r27, Z+23	; 0x17
    6752:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    6754:	a0 89       	ldd	r26, Z+16	; 0x10
    6756:	b1 89       	ldd	r27, Z+17	; 0x11
    6758:	8c 91       	ld	r24, X
    675a:	83 70       	andi	r24, 0x03	; 3
    675c:	80 64       	ori	r24, 0x40	; 64
    675e:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    6760:	93 8d       	ldd	r25, Z+27	; 0x1b
    6762:	84 8d       	ldd	r24, Z+28	; 0x1c
    6764:	98 13       	cpse	r25, r24
    6766:	06 c0       	rjmp	.+12     	; 0x6774 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    6768:	02 88       	ldd	r0, Z+18	; 0x12
    676a:	f3 89       	ldd	r31, Z+19	; 0x13
    676c:	e0 2d       	mov	r30, r0
    676e:	80 81       	ld	r24, Z
    6770:	8f 7d       	andi	r24, 0xDF	; 223
    6772:	80 83       	st	Z, r24
    6774:	08 95       	ret

00006776 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    6776:	ef 92       	push	r14
    6778:	ff 92       	push	r15
    677a:	0f 93       	push	r16
    677c:	1f 93       	push	r17
    677e:	cf 93       	push	r28
    6780:	df 93       	push	r29
    6782:	ec 01       	movw	r28, r24
  _written = true;
    6784:	81 e0       	ldi	r24, 0x01	; 1
    6786:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    6788:	9b 8d       	ldd	r25, Y+27	; 0x1b
    678a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    678c:	98 13       	cpse	r25, r24
    678e:	05 c0       	rjmp	.+10     	; 0x679a <_ZN14HardwareSerial5writeEh+0x24>
    6790:	e8 89       	ldd	r30, Y+16	; 0x10
    6792:	f9 89       	ldd	r31, Y+17	; 0x11
    6794:	80 81       	ld	r24, Z
    6796:	85 fd       	sbrc	r24, 5
    6798:	26 c0       	rjmp	.+76     	; 0x67e6 <_ZN14HardwareSerial5writeEh+0x70>
    679a:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    679c:	0b 8d       	ldd	r16, Y+27	; 0x1b
    679e:	10 e0       	ldi	r17, 0x00	; 0
    67a0:	0f 5f       	subi	r16, 0xFF	; 255
    67a2:	1f 4f       	sbci	r17, 0xFF	; 255
    67a4:	0f 73       	andi	r16, 0x3F	; 63
    67a6:	11 27       	eor	r17, r17
    67a8:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    67aa:	8c 8d       	ldd	r24, Y+28	; 0x1c
    67ac:	e8 12       	cpse	r14, r24
    67ae:	0c c0       	rjmp	.+24     	; 0x67c8 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    67b0:	0f b6       	in	r0, 0x3f	; 63
    67b2:	07 fc       	sbrc	r0, 7
    67b4:	fa cf       	rjmp	.-12     	; 0x67aa <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    67b6:	e8 89       	ldd	r30, Y+16	; 0x10
    67b8:	f9 89       	ldd	r31, Y+17	; 0x11
    67ba:	80 81       	ld	r24, Z
    67bc:	85 ff       	sbrs	r24, 5
    67be:	f5 cf       	rjmp	.-22     	; 0x67aa <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    67c0:	ce 01       	movw	r24, r28
    67c2:	0e 94 99 33 	call	0x6732	; 0x6732 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    67c6:	f1 cf       	rjmp	.-30     	; 0x67aa <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    67c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    67ca:	fe 01       	movw	r30, r28
    67cc:	e8 0f       	add	r30, r24
    67ce:	f1 1d       	adc	r31, r1
    67d0:	e3 5a       	subi	r30, 0xA3	; 163
    67d2:	ff 4f       	sbci	r31, 0xFF	; 255
    67d4:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    67d6:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    67d8:	f8 94       	cli
    _tx_buffer_head = i;
    67da:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    67dc:	ea 89       	ldd	r30, Y+18	; 0x12
    67de:	fb 89       	ldd	r31, Y+19	; 0x13
    67e0:	80 81       	ld	r24, Z
    67e2:	80 62       	ori	r24, 0x20	; 32
    67e4:	0a c0       	rjmp	.+20     	; 0x67fa <_ZN14HardwareSerial5writeEh+0x84>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    67e6:	9f b7       	in	r25, 0x3f	; 63
    67e8:	f8 94       	cli
      *_udr = c;
    67ea:	ee 89       	ldd	r30, Y+22	; 0x16
    67ec:	ff 89       	ldd	r31, Y+23	; 0x17
    67ee:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    67f0:	e8 89       	ldd	r30, Y+16	; 0x10
    67f2:	f9 89       	ldd	r31, Y+17	; 0x11
    67f4:	80 81       	ld	r24, Z
    67f6:	83 70       	andi	r24, 0x03	; 3
    67f8:	80 64       	ori	r24, 0x40	; 64
    67fa:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    67fc:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    67fe:	81 e0       	ldi	r24, 0x01	; 1
    6800:	90 e0       	ldi	r25, 0x00	; 0
    6802:	df 91       	pop	r29
    6804:	cf 91       	pop	r28
    6806:	1f 91       	pop	r17
    6808:	0f 91       	pop	r16
    680a:	ff 90       	pop	r15
    680c:	ef 90       	pop	r14
    680e:	08 95       	ret

00006810 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    6810:	cf 93       	push	r28
    6812:	df 93       	push	r29
    6814:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    6816:	88 8d       	ldd	r24, Y+24	; 0x18
    6818:	88 23       	and	r24, r24
    681a:	c9 f0       	breq	.+50     	; 0x684e <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    681c:	ea 89       	ldd	r30, Y+18	; 0x12
    681e:	fb 89       	ldd	r31, Y+19	; 0x13
    6820:	80 81       	ld	r24, Z
    6822:	85 fd       	sbrc	r24, 5
    6824:	05 c0       	rjmp	.+10     	; 0x6830 <_ZN14HardwareSerial5flushEv+0x20>
    6826:	a8 89       	ldd	r26, Y+16	; 0x10
    6828:	b9 89       	ldd	r27, Y+17	; 0x11
    682a:	8c 91       	ld	r24, X
    682c:	86 fd       	sbrc	r24, 6
    682e:	0f c0       	rjmp	.+30     	; 0x684e <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    6830:	0f b6       	in	r0, 0x3f	; 63
    6832:	07 fc       	sbrc	r0, 7
    6834:	f5 cf       	rjmp	.-22     	; 0x6820 <_ZN14HardwareSerial5flushEv+0x10>
    6836:	80 81       	ld	r24, Z
    6838:	85 ff       	sbrs	r24, 5
    683a:	f2 cf       	rjmp	.-28     	; 0x6820 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    683c:	a8 89       	ldd	r26, Y+16	; 0x10
    683e:	b9 89       	ldd	r27, Y+17	; 0x11
    6840:	8c 91       	ld	r24, X
    6842:	85 ff       	sbrs	r24, 5
    6844:	ed cf       	rjmp	.-38     	; 0x6820 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    6846:	ce 01       	movw	r24, r28
    6848:	0e 94 99 33 	call	0x6732	; 0x6732 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    684c:	e7 cf       	rjmp	.-50     	; 0x681c <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    684e:	df 91       	pop	r29
    6850:	cf 91       	pop	r28
    6852:	08 95       	ret

00006854 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    6854:	cf 92       	push	r12
    6856:	df 92       	push	r13
    6858:	ef 92       	push	r14
    685a:	ff 92       	push	r15
    685c:	1f 93       	push	r17
    685e:	cf 93       	push	r28
    6860:	df 93       	push	r29
    6862:	ec 01       	movw	r28, r24
    6864:	6a 01       	movw	r12, r20
    6866:	7b 01       	movw	r14, r22
    6868:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    686a:	e8 89       	ldd	r30, Y+16	; 0x10
    686c:	f9 89       	ldd	r31, Y+17	; 0x11
    686e:	82 e0       	ldi	r24, 0x02	; 2
    6870:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    6872:	41 15       	cp	r20, r1
    6874:	51 4e       	sbci	r21, 0xE1	; 225
    6876:	61 05       	cpc	r22, r1
    6878:	71 05       	cpc	r23, r1
    687a:	b1 f0       	breq	.+44     	; 0x68a8 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    687c:	60 e0       	ldi	r22, 0x00	; 0
    687e:	79 e0       	ldi	r23, 0x09	; 9
    6880:	8d e3       	ldi	r24, 0x3D	; 61
    6882:	90 e0       	ldi	r25, 0x00	; 0
    6884:	a7 01       	movw	r20, r14
    6886:	96 01       	movw	r18, r12
    6888:	0e 94 36 37 	call	0x6e6c	; 0x6e6c <__udivmodsi4>
    688c:	da 01       	movw	r26, r20
    688e:	c9 01       	movw	r24, r18
    6890:	01 97       	sbiw	r24, 0x01	; 1
    6892:	a1 09       	sbc	r26, r1
    6894:	b1 09       	sbc	r27, r1
    6896:	b6 95       	lsr	r27
    6898:	a7 95       	ror	r26
    689a:	97 95       	ror	r25
    689c:	87 95       	ror	r24
    689e:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    68a0:	21 15       	cp	r18, r1
    68a2:	80 e1       	ldi	r24, 0x10	; 16
    68a4:	38 07       	cpc	r19, r24
    68a6:	a8 f0       	brcs	.+42     	; 0x68d2 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    68a8:	e8 89       	ldd	r30, Y+16	; 0x10
    68aa:	f9 89       	ldd	r31, Y+17	; 0x11
    68ac:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    68ae:	60 e8       	ldi	r22, 0x80	; 128
    68b0:	74 e8       	ldi	r23, 0x84	; 132
    68b2:	8e e1       	ldi	r24, 0x1E	; 30
    68b4:	90 e0       	ldi	r25, 0x00	; 0
    68b6:	a7 01       	movw	r20, r14
    68b8:	96 01       	movw	r18, r12
    68ba:	0e 94 36 37 	call	0x6e6c	; 0x6e6c <__udivmodsi4>
    68be:	da 01       	movw	r26, r20
    68c0:	c9 01       	movw	r24, r18
    68c2:	01 97       	sbiw	r24, 0x01	; 1
    68c4:	a1 09       	sbc	r26, r1
    68c6:	b1 09       	sbc	r27, r1
    68c8:	b6 95       	lsr	r27
    68ca:	a7 95       	ror	r26
    68cc:	97 95       	ror	r25
    68ce:	87 95       	ror	r24
    68d0:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    68d2:	ec 85       	ldd	r30, Y+12	; 0x0c
    68d4:	fd 85       	ldd	r31, Y+13	; 0x0d
    68d6:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    68d8:	ee 85       	ldd	r30, Y+14	; 0x0e
    68da:	ff 85       	ldd	r31, Y+15	; 0x0f
    68dc:	20 83       	st	Z, r18

  _written = false;
    68de:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    68e0:	ec 89       	ldd	r30, Y+20	; 0x14
    68e2:	fd 89       	ldd	r31, Y+21	; 0x15
    68e4:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    68e6:	ea 89       	ldd	r30, Y+18	; 0x12
    68e8:	fb 89       	ldd	r31, Y+19	; 0x13
    68ea:	80 81       	ld	r24, Z
    68ec:	80 61       	ori	r24, 0x10	; 16
    68ee:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    68f0:	ea 89       	ldd	r30, Y+18	; 0x12
    68f2:	fb 89       	ldd	r31, Y+19	; 0x13
    68f4:	80 81       	ld	r24, Z
    68f6:	88 60       	ori	r24, 0x08	; 8
    68f8:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    68fa:	ea 89       	ldd	r30, Y+18	; 0x12
    68fc:	fb 89       	ldd	r31, Y+19	; 0x13
    68fe:	80 81       	ld	r24, Z
    6900:	80 68       	ori	r24, 0x80	; 128
    6902:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    6904:	ea 89       	ldd	r30, Y+18	; 0x12
    6906:	fb 89       	ldd	r31, Y+19	; 0x13
    6908:	80 81       	ld	r24, Z
    690a:	8f 7d       	andi	r24, 0xDF	; 223
    690c:	80 83       	st	Z, r24
}
    690e:	df 91       	pop	r29
    6910:	cf 91       	pop	r28
    6912:	1f 91       	pop	r17
    6914:	ff 90       	pop	r15
    6916:	ef 90       	pop	r14
    6918:	df 90       	pop	r13
    691a:	cf 90       	pop	r12
    691c:	08 95       	ret

0000691e <__vector_18>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
}
    691e:	1f 92       	push	r1
    6920:	0f 92       	push	r0
    6922:	0f b6       	in	r0, 0x3f	; 63
    6924:	0f 92       	push	r0
    6926:	11 24       	eor	r1, r1
    6928:	2f 93       	push	r18
    692a:	8f 93       	push	r24
    692c:	9f 93       	push	r25
    692e:	ef 93       	push	r30
    6930:	ff 93       	push	r31
    6932:	e0 91 43 04 	lds	r30, 0x0443	; 0x800443 <Serial+0x10>
    6936:	f0 91 44 04 	lds	r31, 0x0444	; 0x800444 <Serial+0x11>
    693a:	80 81       	ld	r24, Z
    693c:	e0 91 49 04 	lds	r30, 0x0449	; 0x800449 <Serial+0x16>
    6940:	f0 91 4a 04 	lds	r31, 0x044A	; 0x80044a <Serial+0x17>
    6944:	82 fd       	sbrc	r24, 2
    6946:	12 c0       	rjmp	.+36     	; 0x696c <__vector_18+0x4e>
    6948:	90 81       	ld	r25, Z
    694a:	80 91 4c 04 	lds	r24, 0x044C	; 0x80044c <Serial+0x19>
    694e:	8f 5f       	subi	r24, 0xFF	; 255
    6950:	8f 73       	andi	r24, 0x3F	; 63
    6952:	20 91 4d 04 	lds	r18, 0x044D	; 0x80044d <Serial+0x1a>
    6956:	82 17       	cp	r24, r18
    6958:	51 f0       	breq	.+20     	; 0x696e <__vector_18+0x50>
    695a:	e0 91 4c 04 	lds	r30, 0x044C	; 0x80044c <Serial+0x19>
    695e:	f0 e0       	ldi	r31, 0x00	; 0
    6960:	ed 5c       	subi	r30, 0xCD	; 205
    6962:	fb 4f       	sbci	r31, 0xFB	; 251
    6964:	95 8f       	std	Z+29, r25	; 0x1d
    6966:	80 93 4c 04 	sts	0x044C, r24	; 0x80044c <Serial+0x19>
    696a:	01 c0       	rjmp	.+2      	; 0x696e <__vector_18+0x50>
    696c:	80 81       	ld	r24, Z
    696e:	ff 91       	pop	r31
    6970:	ef 91       	pop	r30
    6972:	9f 91       	pop	r25
    6974:	8f 91       	pop	r24
    6976:	2f 91       	pop	r18
    6978:	0f 90       	pop	r0
    697a:	0f be       	out	0x3f, r0	; 63
    697c:	0f 90       	pop	r0
    697e:	1f 90       	pop	r1
    6980:	18 95       	reti

00006982 <__vector_19>:
    6982:	1f 92       	push	r1
    6984:	0f 92       	push	r0
    6986:	0f b6       	in	r0, 0x3f	; 63
    6988:	0f 92       	push	r0
    698a:	11 24       	eor	r1, r1
    698c:	2f 93       	push	r18
    698e:	3f 93       	push	r19
    6990:	4f 93       	push	r20
    6992:	5f 93       	push	r21
    6994:	6f 93       	push	r22
    6996:	7f 93       	push	r23
    6998:	8f 93       	push	r24
    699a:	9f 93       	push	r25
    699c:	af 93       	push	r26
    699e:	bf 93       	push	r27
    69a0:	ef 93       	push	r30
    69a2:	ff 93       	push	r31
    69a4:	83 e3       	ldi	r24, 0x33	; 51
    69a6:	94 e0       	ldi	r25, 0x04	; 4
    69a8:	0e 94 99 33 	call	0x6732	; 0x6732 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    69ac:	ff 91       	pop	r31
    69ae:	ef 91       	pop	r30
    69b0:	bf 91       	pop	r27
    69b2:	af 91       	pop	r26
    69b4:	9f 91       	pop	r25
    69b6:	8f 91       	pop	r24
    69b8:	7f 91       	pop	r23
    69ba:	6f 91       	pop	r22
    69bc:	5f 91       	pop	r21
    69be:	4f 91       	pop	r20
    69c0:	3f 91       	pop	r19
    69c2:	2f 91       	pop	r18
    69c4:	0f 90       	pop	r0
    69c6:	0f be       	out	0x3f, r0	; 63
    69c8:	0f 90       	pop	r0
    69ca:	1f 90       	pop	r1
    69cc:	18 95       	reti

000069ce <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    69ce:	e3 e3       	ldi	r30, 0x33	; 51
    69d0:	f4 e0       	ldi	r31, 0x04	; 4
    69d2:	13 82       	std	Z+3, r1	; 0x03
    69d4:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    69d6:	88 ee       	ldi	r24, 0xE8	; 232
    69d8:	93 e0       	ldi	r25, 0x03	; 3
    69da:	a0 e0       	ldi	r26, 0x00	; 0
    69dc:	b0 e0       	ldi	r27, 0x00	; 0
    69de:	84 83       	std	Z+4, r24	; 0x04
    69e0:	95 83       	std	Z+5, r25	; 0x05
    69e2:	a6 83       	std	Z+6, r26	; 0x06
    69e4:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    69e6:	8c ef       	ldi	r24, 0xFC	; 252
    69e8:	92 e0       	ldi	r25, 0x02	; 2
    69ea:	91 83       	std	Z+1, r25	; 0x01
    69ec:	80 83       	st	Z, r24
    69ee:	85 ec       	ldi	r24, 0xC5	; 197
    69f0:	90 e0       	ldi	r25, 0x00	; 0
    69f2:	95 87       	std	Z+13, r25	; 0x0d
    69f4:	84 87       	std	Z+12, r24	; 0x0c
    69f6:	84 ec       	ldi	r24, 0xC4	; 196
    69f8:	90 e0       	ldi	r25, 0x00	; 0
    69fa:	97 87       	std	Z+15, r25	; 0x0f
    69fc:	86 87       	std	Z+14, r24	; 0x0e
    69fe:	80 ec       	ldi	r24, 0xC0	; 192
    6a00:	90 e0       	ldi	r25, 0x00	; 0
    6a02:	91 8b       	std	Z+17, r25	; 0x11
    6a04:	80 8b       	std	Z+16, r24	; 0x10
    6a06:	81 ec       	ldi	r24, 0xC1	; 193
    6a08:	90 e0       	ldi	r25, 0x00	; 0
    6a0a:	93 8b       	std	Z+19, r25	; 0x13
    6a0c:	82 8b       	std	Z+18, r24	; 0x12
    6a0e:	82 ec       	ldi	r24, 0xC2	; 194
    6a10:	90 e0       	ldi	r25, 0x00	; 0
    6a12:	95 8b       	std	Z+21, r25	; 0x15
    6a14:	84 8b       	std	Z+20, r24	; 0x14
    6a16:	86 ec       	ldi	r24, 0xC6	; 198
    6a18:	90 e0       	ldi	r25, 0x00	; 0
    6a1a:	97 8b       	std	Z+23, r25	; 0x17
    6a1c:	86 8b       	std	Z+22, r24	; 0x16
    6a1e:	11 8e       	std	Z+25, r1	; 0x19
    6a20:	12 8e       	std	Z+26, r1	; 0x1a
    6a22:	13 8e       	std	Z+27, r1	; 0x1b
    6a24:	14 8e       	std	Z+28, r1	; 0x1c
    6a26:	08 95       	ret

00006a28 <_ZN5Print5writeEPKhj>:
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
    virtual size_t write(const uint8_t *buffer, size_t size);
    size_t write(const char *buffer, size_t size) {
      return write((const uint8_t *)buffer, size);
    6a28:	cf 92       	push	r12
    6a2a:	df 92       	push	r13
    6a2c:	ef 92       	push	r14
    6a2e:	ff 92       	push	r15
    6a30:	0f 93       	push	r16
    6a32:	1f 93       	push	r17
    6a34:	cf 93       	push	r28
    6a36:	df 93       	push	r29
    6a38:	6c 01       	movw	r12, r24
    6a3a:	7a 01       	movw	r14, r20
    6a3c:	8b 01       	movw	r16, r22
    6a3e:	c0 e0       	ldi	r28, 0x00	; 0
    6a40:	d0 e0       	ldi	r29, 0x00	; 0
    6a42:	ce 15       	cp	r28, r14
    6a44:	df 05       	cpc	r29, r15
    6a46:	81 f0       	breq	.+32     	; 0x6a68 <_ZN5Print5writeEPKhj+0x40>
    6a48:	d8 01       	movw	r26, r16
    6a4a:	6d 91       	ld	r22, X+
    6a4c:	8d 01       	movw	r16, r26
    6a4e:	d6 01       	movw	r26, r12
    6a50:	ed 91       	ld	r30, X+
    6a52:	fc 91       	ld	r31, X
    6a54:	01 90       	ld	r0, Z+
    6a56:	f0 81       	ld	r31, Z
    6a58:	e0 2d       	mov	r30, r0
    6a5a:	c6 01       	movw	r24, r12
    6a5c:	09 95       	icall
    6a5e:	89 2b       	or	r24, r25
    6a60:	11 f0       	breq	.+4      	; 0x6a66 <_ZN5Print5writeEPKhj+0x3e>
    6a62:	21 96       	adiw	r28, 0x01	; 1
    6a64:	ee cf       	rjmp	.-36     	; 0x6a42 <_ZN5Print5writeEPKhj+0x1a>
    6a66:	7e 01       	movw	r14, r28
    6a68:	c7 01       	movw	r24, r14
    6a6a:	df 91       	pop	r29
    6a6c:	cf 91       	pop	r28
    6a6e:	1f 91       	pop	r17
    6a70:	0f 91       	pop	r16
    6a72:	ff 90       	pop	r15
    6a74:	ef 90       	pop	r14
    6a76:	df 90       	pop	r13
    6a78:	cf 90       	pop	r12
    6a7a:	08 95       	ret

00006a7c <_ZN5Print5writeEPKc>:
    6a7c:	61 15       	cp	r22, r1
    6a7e:	71 05       	cpc	r23, r1
    6a80:	79 f0       	breq	.+30     	; 0x6aa0 <_ZN5Print5writeEPKc+0x24>
    6a82:	fb 01       	movw	r30, r22
    6a84:	01 90       	ld	r0, Z+
    6a86:	00 20       	and	r0, r0
    6a88:	e9 f7       	brne	.-6      	; 0x6a84 <_ZN5Print5writeEPKc+0x8>
    6a8a:	31 97       	sbiw	r30, 0x01	; 1
    6a8c:	af 01       	movw	r20, r30
    6a8e:	46 1b       	sub	r20, r22
    6a90:	57 0b       	sbc	r21, r23
    6a92:	dc 01       	movw	r26, r24
    6a94:	ed 91       	ld	r30, X+
    6a96:	fc 91       	ld	r31, X
    6a98:	02 80       	ldd	r0, Z+2	; 0x02
    6a9a:	f3 81       	ldd	r31, Z+3	; 0x03
    6a9c:	e0 2d       	mov	r30, r0
    6a9e:	09 94       	ijmp
    6aa0:	80 e0       	ldi	r24, 0x00	; 0
    6aa2:	90 e0       	ldi	r25, 0x00	; 0
    6aa4:	08 95       	ret

00006aa6 <_ZN5Print5printEPKc>:
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    6aa6:	0c 94 3e 35 	jmp	0x6a7c	; 0x6a7c <_ZN5Print5writeEPKc>

00006aaa <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    6aaa:	1f 92       	push	r1
    6aac:	0f 92       	push	r0
    6aae:	0f b6       	in	r0, 0x3f	; 63
    6ab0:	0f 92       	push	r0
    6ab2:	11 24       	eor	r1, r1
    6ab4:	2f 93       	push	r18
    6ab6:	3f 93       	push	r19
    6ab8:	8f 93       	push	r24
    6aba:	9f 93       	push	r25
    6abc:	af 93       	push	r26
    6abe:	bf 93       	push	r27
    6ac0:	80 91 d1 04 	lds	r24, 0x04D1	; 0x8004d1 <timer0_millis>
    6ac4:	90 91 d2 04 	lds	r25, 0x04D2	; 0x8004d2 <timer0_millis+0x1>
    6ac8:	a0 91 d3 04 	lds	r26, 0x04D3	; 0x8004d3 <timer0_millis+0x2>
    6acc:	b0 91 d4 04 	lds	r27, 0x04D4	; 0x8004d4 <timer0_millis+0x3>
    6ad0:	30 91 d0 04 	lds	r19, 0x04D0	; 0x8004d0 <timer0_fract>
    6ad4:	23 e0       	ldi	r18, 0x03	; 3
    6ad6:	23 0f       	add	r18, r19
    6ad8:	2d 37       	cpi	r18, 0x7D	; 125
    6ada:	20 f4       	brcc	.+8      	; 0x6ae4 <__vector_16+0x3a>
    6adc:	01 96       	adiw	r24, 0x01	; 1
    6ade:	a1 1d       	adc	r26, r1
    6ae0:	b1 1d       	adc	r27, r1
    6ae2:	05 c0       	rjmp	.+10     	; 0x6aee <__vector_16+0x44>
    6ae4:	26 e8       	ldi	r18, 0x86	; 134
    6ae6:	23 0f       	add	r18, r19
    6ae8:	02 96       	adiw	r24, 0x02	; 2
    6aea:	a1 1d       	adc	r26, r1
    6aec:	b1 1d       	adc	r27, r1
    6aee:	20 93 d0 04 	sts	0x04D0, r18	; 0x8004d0 <timer0_fract>
    6af2:	80 93 d1 04 	sts	0x04D1, r24	; 0x8004d1 <timer0_millis>
    6af6:	90 93 d2 04 	sts	0x04D2, r25	; 0x8004d2 <timer0_millis+0x1>
    6afa:	a0 93 d3 04 	sts	0x04D3, r26	; 0x8004d3 <timer0_millis+0x2>
    6afe:	b0 93 d4 04 	sts	0x04D4, r27	; 0x8004d4 <timer0_millis+0x3>
    6b02:	80 91 d5 04 	lds	r24, 0x04D5	; 0x8004d5 <timer0_overflow_count>
    6b06:	90 91 d6 04 	lds	r25, 0x04D6	; 0x8004d6 <timer0_overflow_count+0x1>
    6b0a:	a0 91 d7 04 	lds	r26, 0x04D7	; 0x8004d7 <timer0_overflow_count+0x2>
    6b0e:	b0 91 d8 04 	lds	r27, 0x04D8	; 0x8004d8 <timer0_overflow_count+0x3>
    6b12:	01 96       	adiw	r24, 0x01	; 1
    6b14:	a1 1d       	adc	r26, r1
    6b16:	b1 1d       	adc	r27, r1
    6b18:	80 93 d5 04 	sts	0x04D5, r24	; 0x8004d5 <timer0_overflow_count>
    6b1c:	90 93 d6 04 	sts	0x04D6, r25	; 0x8004d6 <timer0_overflow_count+0x1>
    6b20:	a0 93 d7 04 	sts	0x04D7, r26	; 0x8004d7 <timer0_overflow_count+0x2>
    6b24:	b0 93 d8 04 	sts	0x04D8, r27	; 0x8004d8 <timer0_overflow_count+0x3>
    6b28:	bf 91       	pop	r27
    6b2a:	af 91       	pop	r26
    6b2c:	9f 91       	pop	r25
    6b2e:	8f 91       	pop	r24
    6b30:	3f 91       	pop	r19
    6b32:	2f 91       	pop	r18
    6b34:	0f 90       	pop	r0
    6b36:	0f be       	out	0x3f, r0	; 63
    6b38:	0f 90       	pop	r0
    6b3a:	1f 90       	pop	r1
    6b3c:	18 95       	reti

00006b3e <micros>:
    6b3e:	3f b7       	in	r19, 0x3f	; 63
    6b40:	f8 94       	cli
    6b42:	80 91 d5 04 	lds	r24, 0x04D5	; 0x8004d5 <timer0_overflow_count>
    6b46:	90 91 d6 04 	lds	r25, 0x04D6	; 0x8004d6 <timer0_overflow_count+0x1>
    6b4a:	a0 91 d7 04 	lds	r26, 0x04D7	; 0x8004d7 <timer0_overflow_count+0x2>
    6b4e:	b0 91 d8 04 	lds	r27, 0x04D8	; 0x8004d8 <timer0_overflow_count+0x3>
    6b52:	26 b5       	in	r18, 0x26	; 38
    6b54:	a8 9b       	sbis	0x15, 0	; 21
    6b56:	05 c0       	rjmp	.+10     	; 0x6b62 <micros+0x24>
    6b58:	2f 3f       	cpi	r18, 0xFF	; 255
    6b5a:	19 f0       	breq	.+6      	; 0x6b62 <micros+0x24>
    6b5c:	01 96       	adiw	r24, 0x01	; 1
    6b5e:	a1 1d       	adc	r26, r1
    6b60:	b1 1d       	adc	r27, r1
    6b62:	3f bf       	out	0x3f, r19	; 63
    6b64:	ba 2f       	mov	r27, r26
    6b66:	a9 2f       	mov	r26, r25
    6b68:	98 2f       	mov	r25, r24
    6b6a:	88 27       	eor	r24, r24
    6b6c:	82 0f       	add	r24, r18
    6b6e:	91 1d       	adc	r25, r1
    6b70:	a1 1d       	adc	r26, r1
    6b72:	b1 1d       	adc	r27, r1
    6b74:	bc 01       	movw	r22, r24
    6b76:	cd 01       	movw	r24, r26
    6b78:	42 e0       	ldi	r20, 0x02	; 2
    6b7a:	66 0f       	add	r22, r22
    6b7c:	77 1f       	adc	r23, r23
    6b7e:	88 1f       	adc	r24, r24
    6b80:	99 1f       	adc	r25, r25
    6b82:	4a 95       	dec	r20
    6b84:	d1 f7       	brne	.-12     	; 0x6b7a <micros+0x3c>
    6b86:	08 95       	ret

00006b88 <delay>:
    6b88:	8f 92       	push	r8
    6b8a:	9f 92       	push	r9
    6b8c:	af 92       	push	r10
    6b8e:	bf 92       	push	r11
    6b90:	cf 92       	push	r12
    6b92:	df 92       	push	r13
    6b94:	ef 92       	push	r14
    6b96:	ff 92       	push	r15
    6b98:	6b 01       	movw	r12, r22
    6b9a:	7c 01       	movw	r14, r24
    6b9c:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <micros>
    6ba0:	4b 01       	movw	r8, r22
    6ba2:	5c 01       	movw	r10, r24
    6ba4:	c1 14       	cp	r12, r1
    6ba6:	d1 04       	cpc	r13, r1
    6ba8:	e1 04       	cpc	r14, r1
    6baa:	f1 04       	cpc	r15, r1
    6bac:	01 f1       	breq	.+64     	; 0x6bee <delay+0x66>
    6bae:	0e 94 15 37 	call	0x6e2a	; 0x6e2a <yield>
    6bb2:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <micros>
    6bb6:	dc 01       	movw	r26, r24
    6bb8:	cb 01       	movw	r24, r22
    6bba:	88 19       	sub	r24, r8
    6bbc:	99 09       	sbc	r25, r9
    6bbe:	aa 09       	sbc	r26, r10
    6bc0:	bb 09       	sbc	r27, r11
    6bc2:	88 3e       	cpi	r24, 0xE8	; 232
    6bc4:	93 40       	sbci	r25, 0x03	; 3
    6bc6:	a1 05       	cpc	r26, r1
    6bc8:	b1 05       	cpc	r27, r1
    6bca:	60 f3       	brcs	.-40     	; 0x6ba4 <delay+0x1c>
    6bcc:	21 e0       	ldi	r18, 0x01	; 1
    6bce:	c2 1a       	sub	r12, r18
    6bd0:	d1 08       	sbc	r13, r1
    6bd2:	e1 08       	sbc	r14, r1
    6bd4:	f1 08       	sbc	r15, r1
    6bd6:	88 ee       	ldi	r24, 0xE8	; 232
    6bd8:	88 0e       	add	r8, r24
    6bda:	83 e0       	ldi	r24, 0x03	; 3
    6bdc:	98 1e       	adc	r9, r24
    6bde:	a1 1c       	adc	r10, r1
    6be0:	b1 1c       	adc	r11, r1
    6be2:	c1 14       	cp	r12, r1
    6be4:	d1 04       	cpc	r13, r1
    6be6:	e1 04       	cpc	r14, r1
    6be8:	f1 04       	cpc	r15, r1
    6bea:	19 f7       	brne	.-58     	; 0x6bb2 <delay+0x2a>
    6bec:	db cf       	rjmp	.-74     	; 0x6ba4 <delay+0x1c>
    6bee:	ff 90       	pop	r15
    6bf0:	ef 90       	pop	r14
    6bf2:	df 90       	pop	r13
    6bf4:	cf 90       	pop	r12
    6bf6:	bf 90       	pop	r11
    6bf8:	af 90       	pop	r10
    6bfa:	9f 90       	pop	r9
    6bfc:	8f 90       	pop	r8
    6bfe:	08 95       	ret

00006c00 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    6c00:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    6c02:	84 b5       	in	r24, 0x24	; 36
    6c04:	82 60       	ori	r24, 0x02	; 2
    6c06:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    6c08:	84 b5       	in	r24, 0x24	; 36
    6c0a:	81 60       	ori	r24, 0x01	; 1
    6c0c:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    6c0e:	85 b5       	in	r24, 0x25	; 37
    6c10:	82 60       	ori	r24, 0x02	; 2
    6c12:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    6c14:	85 b5       	in	r24, 0x25	; 37
    6c16:	81 60       	ori	r24, 0x01	; 1
    6c18:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    6c1a:	ee e6       	ldi	r30, 0x6E	; 110
    6c1c:	f0 e0       	ldi	r31, 0x00	; 0
    6c1e:	80 81       	ld	r24, Z
    6c20:	81 60       	ori	r24, 0x01	; 1
    6c22:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    6c24:	e1 e8       	ldi	r30, 0x81	; 129
    6c26:	f0 e0       	ldi	r31, 0x00	; 0
    6c28:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    6c2a:	80 81       	ld	r24, Z
    6c2c:	82 60       	ori	r24, 0x02	; 2
    6c2e:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    6c30:	80 81       	ld	r24, Z
    6c32:	81 60       	ori	r24, 0x01	; 1
    6c34:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    6c36:	e0 e8       	ldi	r30, 0x80	; 128
    6c38:	f0 e0       	ldi	r31, 0x00	; 0
    6c3a:	80 81       	ld	r24, Z
    6c3c:	81 60       	ori	r24, 0x01	; 1
    6c3e:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    6c40:	e1 eb       	ldi	r30, 0xB1	; 177
    6c42:	f0 e0       	ldi	r31, 0x00	; 0
    6c44:	80 81       	ld	r24, Z
    6c46:	84 60       	ori	r24, 0x04	; 4
    6c48:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    6c4a:	e0 eb       	ldi	r30, 0xB0	; 176
    6c4c:	f0 e0       	ldi	r31, 0x00	; 0
    6c4e:	80 81       	ld	r24, Z
    6c50:	81 60       	ori	r24, 0x01	; 1
    6c52:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    6c54:	ea e7       	ldi	r30, 0x7A	; 122
    6c56:	f0 e0       	ldi	r31, 0x00	; 0
    6c58:	80 81       	ld	r24, Z
    6c5a:	84 60       	ori	r24, 0x04	; 4
    6c5c:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    6c5e:	80 81       	ld	r24, Z
    6c60:	82 60       	ori	r24, 0x02	; 2
    6c62:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    6c64:	80 81       	ld	r24, Z
    6c66:	81 60       	ori	r24, 0x01	; 1
    6c68:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    6c6a:	80 81       	ld	r24, Z
    6c6c:	80 68       	ori	r24, 0x80	; 128
    6c6e:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    6c70:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    6c74:	08 95       	ret

00006c76 <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    6c76:	8e 30       	cpi	r24, 0x0E	; 14
    6c78:	08 f0       	brcs	.+2      	; 0x6c7c <analogRead+0x6>
    6c7a:	8e 50       	subi	r24, 0x0E	; 14
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    6c7c:	20 91 98 01 	lds	r18, 0x0198	; 0x800198 <analog_reference>
    6c80:	90 e4       	ldi	r25, 0x40	; 64
    6c82:	29 9f       	mul	r18, r25
    6c84:	90 01       	movw	r18, r0
    6c86:	11 24       	eor	r1, r1
    6c88:	87 70       	andi	r24, 0x07	; 7
    6c8a:	82 2b       	or	r24, r18
    6c8c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    6c90:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    6c94:	80 64       	ori	r24, 0x40	; 64
    6c96:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    6c9a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    6c9e:	86 fd       	sbrc	r24, 6
    6ca0:	fc cf       	rjmp	.-8      	; 0x6c9a <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    6ca2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	high = ADCH;
    6ca6:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    6caa:	90 e0       	ldi	r25, 0x00	; 0
}
    6cac:	92 2b       	or	r25, r18
    6cae:	08 95       	ret

00006cb0 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    6cb0:	83 30       	cpi	r24, 0x03	; 3
    6cb2:	81 f0       	breq	.+32     	; 0x6cd4 <turnOffPWM+0x24>
    6cb4:	28 f4       	brcc	.+10     	; 0x6cc0 <turnOffPWM+0x10>
    6cb6:	81 30       	cpi	r24, 0x01	; 1
    6cb8:	99 f0       	breq	.+38     	; 0x6ce0 <turnOffPWM+0x30>
    6cba:	82 30       	cpi	r24, 0x02	; 2
    6cbc:	a1 f0       	breq	.+40     	; 0x6ce6 <turnOffPWM+0x36>
    6cbe:	08 95       	ret
    6cc0:	87 30       	cpi	r24, 0x07	; 7
    6cc2:	a9 f0       	breq	.+42     	; 0x6cee <turnOffPWM+0x3e>
    6cc4:	88 30       	cpi	r24, 0x08	; 8
    6cc6:	b9 f0       	breq	.+46     	; 0x6cf6 <turnOffPWM+0x46>
    6cc8:	84 30       	cpi	r24, 0x04	; 4
    6cca:	d1 f4       	brne	.+52     	; 0x6d00 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    6ccc:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    6cd0:	8f 7d       	andi	r24, 0xDF	; 223
    6cd2:	03 c0       	rjmp	.+6      	; 0x6cda <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    6cd4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    6cd8:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    6cda:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    6cde:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    6ce0:	84 b5       	in	r24, 0x24	; 36
    6ce2:	8f 77       	andi	r24, 0x7F	; 127
    6ce4:	02 c0       	rjmp	.+4      	; 0x6cea <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    6ce6:	84 b5       	in	r24, 0x24	; 36
    6ce8:	8f 7d       	andi	r24, 0xDF	; 223
    6cea:	84 bd       	out	0x24, r24	; 36
    6cec:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    6cee:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    6cf2:	8f 77       	andi	r24, 0x7F	; 127
    6cf4:	03 c0       	rjmp	.+6      	; 0x6cfc <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    6cf6:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    6cfa:	8f 7d       	andi	r24, 0xDF	; 223
    6cfc:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    6d00:	08 95       	ret

00006d02 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    6d02:	cf 93       	push	r28
    6d04:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    6d06:	90 e0       	ldi	r25, 0x00	; 0
    6d08:	fc 01       	movw	r30, r24
    6d0a:	ee 5c       	subi	r30, 0xCE	; 206
    6d0c:	ff 4c       	sbci	r31, 0xCF	; 207
    6d0e:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    6d10:	fc 01       	movw	r30, r24
    6d12:	ea 5b       	subi	r30, 0xBA	; 186
    6d14:	ff 4c       	sbci	r31, 0xCF	; 207
    6d16:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    6d18:	88 23       	and	r24, r24
    6d1a:	61 f1       	breq	.+88     	; 0x6d74 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    6d1c:	90 e0       	ldi	r25, 0x00	; 0
    6d1e:	88 0f       	add	r24, r24
    6d20:	99 1f       	adc	r25, r25
    6d22:	fc 01       	movw	r30, r24
    6d24:	e2 59       	subi	r30, 0x92	; 146
    6d26:	ff 4c       	sbci	r31, 0xCF	; 207
    6d28:	c5 91       	lpm	r28, Z+
    6d2a:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    6d2c:	fc 01       	movw	r30, r24
    6d2e:	ec 59       	subi	r30, 0x9C	; 156
    6d30:	ff 4c       	sbci	r31, 0xCF	; 207
    6d32:	a5 91       	lpm	r26, Z+
    6d34:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    6d36:	61 11       	cpse	r22, r1
    6d38:	09 c0       	rjmp	.+18     	; 0x6d4c <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    6d3a:	9f b7       	in	r25, 0x3f	; 63
                cli();
    6d3c:	f8 94       	cli
		*reg &= ~bit;
    6d3e:	88 81       	ld	r24, Y
    6d40:	20 95       	com	r18
    6d42:	82 23       	and	r24, r18
    6d44:	88 83       	st	Y, r24
		*out &= ~bit;
    6d46:	ec 91       	ld	r30, X
    6d48:	2e 23       	and	r18, r30
    6d4a:	0b c0       	rjmp	.+22     	; 0x6d62 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    6d4c:	62 30       	cpi	r22, 0x02	; 2
    6d4e:	61 f4       	brne	.+24     	; 0x6d68 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    6d50:	9f b7       	in	r25, 0x3f	; 63
                cli();
    6d52:	f8 94       	cli
		*reg &= ~bit;
    6d54:	88 81       	ld	r24, Y
    6d56:	32 2f       	mov	r19, r18
    6d58:	30 95       	com	r19
    6d5a:	83 23       	and	r24, r19
    6d5c:	88 83       	st	Y, r24
		*out |= bit;
    6d5e:	ec 91       	ld	r30, X
    6d60:	2e 2b       	or	r18, r30
    6d62:	2c 93       	st	X, r18
		SREG = oldSREG;
    6d64:	9f bf       	out	0x3f, r25	; 63
    6d66:	06 c0       	rjmp	.+12     	; 0x6d74 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    6d68:	8f b7       	in	r24, 0x3f	; 63
                cli();
    6d6a:	f8 94       	cli
		*reg |= bit;
    6d6c:	e8 81       	ld	r30, Y
    6d6e:	2e 2b       	or	r18, r30
    6d70:	28 83       	st	Y, r18
		SREG = oldSREG;
    6d72:	8f bf       	out	0x3f, r24	; 63
	}
}
    6d74:	df 91       	pop	r29
    6d76:	cf 91       	pop	r28
    6d78:	08 95       	ret

00006d7a <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    6d7a:	1f 93       	push	r17
    6d7c:	cf 93       	push	r28
    6d7e:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    6d80:	28 2f       	mov	r18, r24
    6d82:	30 e0       	ldi	r19, 0x00	; 0
    6d84:	f9 01       	movw	r30, r18
    6d86:	e2 5e       	subi	r30, 0xE2	; 226
    6d88:	ff 4c       	sbci	r31, 0xCF	; 207
    6d8a:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    6d8c:	f9 01       	movw	r30, r18
    6d8e:	ee 5c       	subi	r30, 0xCE	; 206
    6d90:	ff 4c       	sbci	r31, 0xCF	; 207
    6d92:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    6d94:	f9 01       	movw	r30, r18
    6d96:	ea 5b       	subi	r30, 0xBA	; 186
    6d98:	ff 4c       	sbci	r31, 0xCF	; 207
    6d9a:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    6d9c:	cc 23       	and	r28, r28
    6d9e:	c1 f0       	breq	.+48     	; 0x6dd0 <digitalWrite+0x56>
    6da0:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    6da2:	81 11       	cpse	r24, r1
    6da4:	0e 94 58 36 	call	0x6cb0	; 0x6cb0 <turnOffPWM>

	out = portOutputRegister(port);
    6da8:	ec 2f       	mov	r30, r28
    6daa:	f0 e0       	ldi	r31, 0x00	; 0
    6dac:	ee 0f       	add	r30, r30
    6dae:	ff 1f       	adc	r31, r31
    6db0:	ec 59       	subi	r30, 0x9C	; 156
    6db2:	ff 4c       	sbci	r31, 0xCF	; 207
    6db4:	a5 91       	lpm	r26, Z+
    6db6:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    6db8:	9f b7       	in	r25, 0x3f	; 63
	cli();
    6dba:	f8 94       	cli

	if (val == LOW) {
    6dbc:	11 11       	cpse	r17, r1
    6dbe:	04 c0       	rjmp	.+8      	; 0x6dc8 <digitalWrite+0x4e>
		*out &= ~bit;
    6dc0:	8c 91       	ld	r24, X
    6dc2:	d0 95       	com	r29
    6dc4:	d8 23       	and	r29, r24
    6dc6:	02 c0       	rjmp	.+4      	; 0x6dcc <digitalWrite+0x52>
	} else {
		*out |= bit;
    6dc8:	ec 91       	ld	r30, X
    6dca:	de 2b       	or	r29, r30
    6dcc:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    6dce:	9f bf       	out	0x3f, r25	; 63
}
    6dd0:	df 91       	pop	r29
    6dd2:	cf 91       	pop	r28
    6dd4:	1f 91       	pop	r17
    6dd6:	08 95       	ret

00006dd8 <digitalRead>:

int digitalRead(uint8_t pin)
{
    6dd8:	cf 93       	push	r28
    6dda:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    6ddc:	28 2f       	mov	r18, r24
    6dde:	30 e0       	ldi	r19, 0x00	; 0
    6de0:	f9 01       	movw	r30, r18
    6de2:	e2 5e       	subi	r30, 0xE2	; 226
    6de4:	ff 4c       	sbci	r31, 0xCF	; 207
    6de6:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    6de8:	f9 01       	movw	r30, r18
    6dea:	ee 5c       	subi	r30, 0xCE	; 206
    6dec:	ff 4c       	sbci	r31, 0xCF	; 207
    6dee:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    6df0:	f9 01       	movw	r30, r18
    6df2:	ea 5b       	subi	r30, 0xBA	; 186
    6df4:	ff 4c       	sbci	r31, 0xCF	; 207
    6df6:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    6df8:	cc 23       	and	r28, r28
    6dfa:	91 f0       	breq	.+36     	; 0x6e20 <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    6dfc:	81 11       	cpse	r24, r1
    6dfe:	0e 94 58 36 	call	0x6cb0	; 0x6cb0 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    6e02:	ec 2f       	mov	r30, r28
    6e04:	f0 e0       	ldi	r31, 0x00	; 0
    6e06:	ee 0f       	add	r30, r30
    6e08:	ff 1f       	adc	r31, r31
    6e0a:	e6 5a       	subi	r30, 0xA6	; 166
    6e0c:	ff 4c       	sbci	r31, 0xCF	; 207
    6e0e:	a5 91       	lpm	r26, Z+
    6e10:	b4 91       	lpm	r27, Z
    6e12:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    6e14:	ed 23       	and	r30, r29
    6e16:	81 e0       	ldi	r24, 0x01	; 1
    6e18:	90 e0       	ldi	r25, 0x00	; 0
    6e1a:	21 f4       	brne	.+8      	; 0x6e24 <digitalRead+0x4c>
    6e1c:	80 e0       	ldi	r24, 0x00	; 0
    6e1e:	02 c0       	rjmp	.+4      	; 0x6e24 <digitalRead+0x4c>
    6e20:	80 e0       	ldi	r24, 0x00	; 0
    6e22:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    6e24:	df 91       	pop	r29
    6e26:	cf 91       	pop	r28
    6e28:	08 95       	ret

00006e2a <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    6e2a:	08 95       	ret

00006e2c <__udivmodqi4>:
    6e2c:	99 1b       	sub	r25, r25
    6e2e:	79 e0       	ldi	r23, 0x09	; 9
    6e30:	04 c0       	rjmp	.+8      	; 0x6e3a <__udivmodqi4_ep>

00006e32 <__udivmodqi4_loop>:
    6e32:	99 1f       	adc	r25, r25
    6e34:	96 17       	cp	r25, r22
    6e36:	08 f0       	brcs	.+2      	; 0x6e3a <__udivmodqi4_ep>
    6e38:	96 1b       	sub	r25, r22

00006e3a <__udivmodqi4_ep>:
    6e3a:	88 1f       	adc	r24, r24
    6e3c:	7a 95       	dec	r23
    6e3e:	c9 f7       	brne	.-14     	; 0x6e32 <__udivmodqi4_loop>
    6e40:	80 95       	com	r24
    6e42:	08 95       	ret

00006e44 <__divmodhi4>:
    6e44:	97 fb       	bst	r25, 7
    6e46:	07 2e       	mov	r0, r23
    6e48:	16 f4       	brtc	.+4      	; 0x6e4e <__divmodhi4+0xa>
    6e4a:	00 94       	com	r0
    6e4c:	07 d0       	rcall	.+14     	; 0x6e5c <__divmodhi4_neg1>
    6e4e:	77 fd       	sbrc	r23, 7
    6e50:	09 d0       	rcall	.+18     	; 0x6e64 <__divmodhi4_neg2>
    6e52:	0e 94 5e 37 	call	0x6ebc	; 0x6ebc <__udivmodhi4>
    6e56:	07 fc       	sbrc	r0, 7
    6e58:	05 d0       	rcall	.+10     	; 0x6e64 <__divmodhi4_neg2>
    6e5a:	3e f4       	brtc	.+14     	; 0x6e6a <__divmodhi4_exit>

00006e5c <__divmodhi4_neg1>:
    6e5c:	90 95       	com	r25
    6e5e:	81 95       	neg	r24
    6e60:	9f 4f       	sbci	r25, 0xFF	; 255
    6e62:	08 95       	ret

00006e64 <__divmodhi4_neg2>:
    6e64:	70 95       	com	r23
    6e66:	61 95       	neg	r22
    6e68:	7f 4f       	sbci	r23, 0xFF	; 255

00006e6a <__divmodhi4_exit>:
    6e6a:	08 95       	ret

00006e6c <__udivmodsi4>:
    6e6c:	a1 e2       	ldi	r26, 0x21	; 33
    6e6e:	1a 2e       	mov	r1, r26
    6e70:	aa 1b       	sub	r26, r26
    6e72:	bb 1b       	sub	r27, r27
    6e74:	fd 01       	movw	r30, r26
    6e76:	0d c0       	rjmp	.+26     	; 0x6e92 <__udivmodsi4_ep>

00006e78 <__udivmodsi4_loop>:
    6e78:	aa 1f       	adc	r26, r26
    6e7a:	bb 1f       	adc	r27, r27
    6e7c:	ee 1f       	adc	r30, r30
    6e7e:	ff 1f       	adc	r31, r31
    6e80:	a2 17       	cp	r26, r18
    6e82:	b3 07       	cpc	r27, r19
    6e84:	e4 07       	cpc	r30, r20
    6e86:	f5 07       	cpc	r31, r21
    6e88:	20 f0       	brcs	.+8      	; 0x6e92 <__udivmodsi4_ep>
    6e8a:	a2 1b       	sub	r26, r18
    6e8c:	b3 0b       	sbc	r27, r19
    6e8e:	e4 0b       	sbc	r30, r20
    6e90:	f5 0b       	sbc	r31, r21

00006e92 <__udivmodsi4_ep>:
    6e92:	66 1f       	adc	r22, r22
    6e94:	77 1f       	adc	r23, r23
    6e96:	88 1f       	adc	r24, r24
    6e98:	99 1f       	adc	r25, r25
    6e9a:	1a 94       	dec	r1
    6e9c:	69 f7       	brne	.-38     	; 0x6e78 <__udivmodsi4_loop>
    6e9e:	60 95       	com	r22
    6ea0:	70 95       	com	r23
    6ea2:	80 95       	com	r24
    6ea4:	90 95       	com	r25
    6ea6:	9b 01       	movw	r18, r22
    6ea8:	ac 01       	movw	r20, r24
    6eaa:	bd 01       	movw	r22, r26
    6eac:	cf 01       	movw	r24, r30
    6eae:	08 95       	ret

00006eb0 <__tablejump2__>:
    6eb0:	ee 0f       	add	r30, r30
    6eb2:	ff 1f       	adc	r31, r31
    6eb4:	05 90       	lpm	r0, Z+
    6eb6:	f4 91       	lpm	r31, Z
    6eb8:	e0 2d       	mov	r30, r0
    6eba:	09 94       	ijmp

00006ebc <__udivmodhi4>:
    6ebc:	aa 1b       	sub	r26, r26
    6ebe:	bb 1b       	sub	r27, r27
    6ec0:	51 e1       	ldi	r21, 0x11	; 17
    6ec2:	07 c0       	rjmp	.+14     	; 0x6ed2 <__udivmodhi4_ep>

00006ec4 <__udivmodhi4_loop>:
    6ec4:	aa 1f       	adc	r26, r26
    6ec6:	bb 1f       	adc	r27, r27
    6ec8:	a6 17       	cp	r26, r22
    6eca:	b7 07       	cpc	r27, r23
    6ecc:	10 f0       	brcs	.+4      	; 0x6ed2 <__udivmodhi4_ep>
    6ece:	a6 1b       	sub	r26, r22
    6ed0:	b7 0b       	sbc	r27, r23

00006ed2 <__udivmodhi4_ep>:
    6ed2:	88 1f       	adc	r24, r24
    6ed4:	99 1f       	adc	r25, r25
    6ed6:	5a 95       	dec	r21
    6ed8:	a9 f7       	brne	.-22     	; 0x6ec4 <__udivmodhi4_loop>
    6eda:	80 95       	com	r24
    6edc:	90 95       	com	r25
    6ede:	bc 01       	movw	r22, r24
    6ee0:	cd 01       	movw	r24, r26
    6ee2:	08 95       	ret

00006ee4 <abort>:
    6ee4:	81 e0       	ldi	r24, 0x01	; 1
    6ee6:	90 e0       	ldi	r25, 0x00	; 0
    6ee8:	f8 94       	cli
    6eea:	0c 94 9b 37 	jmp	0x6f36	; 0x6f36 <__do_global_dtors>

00006eee <strncmp>:
    6eee:	fb 01       	movw	r30, r22
    6ef0:	dc 01       	movw	r26, r24
    6ef2:	41 50       	subi	r20, 0x01	; 1
    6ef4:	50 40       	sbci	r21, 0x00	; 0
    6ef6:	30 f0       	brcs	.+12     	; 0x6f04 <strncmp+0x16>
    6ef8:	8d 91       	ld	r24, X+
    6efa:	01 90       	ld	r0, Z+
    6efc:	80 19       	sub	r24, r0
    6efe:	19 f4       	brne	.+6      	; 0x6f06 <strncmp+0x18>
    6f00:	00 20       	and	r0, r0
    6f02:	b9 f7       	brne	.-18     	; 0x6ef2 <strncmp+0x4>
    6f04:	88 1b       	sub	r24, r24
    6f06:	99 0b       	sbc	r25, r25
    6f08:	08 95       	ret

00006f0a <eeprom_read_byte>:
    6f0a:	f9 99       	sbic	0x1f, 1	; 31
    6f0c:	fe cf       	rjmp	.-4      	; 0x6f0a <eeprom_read_byte>
    6f0e:	92 bd       	out	0x22, r25	; 34
    6f10:	81 bd       	out	0x21, r24	; 33
    6f12:	f8 9a       	sbi	0x1f, 0	; 31
    6f14:	99 27       	eor	r25, r25
    6f16:	80 b5       	in	r24, 0x20	; 32
    6f18:	08 95       	ret

00006f1a <eeprom_write_byte>:
    6f1a:	26 2f       	mov	r18, r22

00006f1c <eeprom_write_r18>:
    6f1c:	f9 99       	sbic	0x1f, 1	; 31
    6f1e:	fe cf       	rjmp	.-4      	; 0x6f1c <eeprom_write_r18>
    6f20:	1f ba       	out	0x1f, r1	; 31
    6f22:	92 bd       	out	0x22, r25	; 34
    6f24:	81 bd       	out	0x21, r24	; 33
    6f26:	20 bd       	out	0x20, r18	; 32
    6f28:	0f b6       	in	r0, 0x3f	; 63
    6f2a:	f8 94       	cli
    6f2c:	fa 9a       	sbi	0x1f, 2	; 31
    6f2e:	f9 9a       	sbi	0x1f, 1	; 31
    6f30:	0f be       	out	0x3f, r0	; 63
    6f32:	01 96       	adiw	r24, 0x01	; 1
    6f34:	08 95       	ret

00006f36 <__do_global_dtors>:
    6f36:	18 e1       	ldi	r17, 0x18	; 24
    6f38:	ce e3       	ldi	r28, 0x3E	; 62
    6f3a:	d8 e1       	ldi	r29, 0x18	; 24
    6f3c:	04 c0       	rjmp	.+8      	; 0x6f46 <__do_global_dtors+0x10>
    6f3e:	fe 01       	movw	r30, r28
    6f40:	0e 94 58 37 	call	0x6eb0	; 0x6eb0 <__tablejump2__>
    6f44:	21 96       	adiw	r28, 0x01	; 1
    6f46:	cf 33       	cpi	r28, 0x3F	; 63
    6f48:	d1 07       	cpc	r29, r17
    6f4a:	c9 f7       	brne	.-14     	; 0x6f3e <__do_global_dtors+0x8>
    6f4c:	f8 94       	cli

00006f4e <__stop_program>:
    6f4e:	ff cf       	rjmp	.-2      	; 0x6f4e <__stop_program>
